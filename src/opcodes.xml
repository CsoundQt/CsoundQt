<?xml version="1.0" encoding="UTF-8"?>
<!-- Don't modify this file. It is generated automatically by opcodeparser.py
This file is distributed under the GNU Free Documentation Licence--><opcodes>
<category name="Orchestra Syntax:Header">
<opcode><desc>Sets the value of 0 decibels using full scale amplitude.</desc><synopsis><opcodename>0dbfs</opcodename> = iarg</synopsis>
</opcode>
<opcode><desc>Sets the base frequency for pitch A4.</desc><synopsis><opcodename>A4</opcodename> = iarg</synopsis></opcode>
<opcode><desc>Sets the control rate.</desc><synopsis><opcodename>kr</opcodename> = iarg</synopsis></opcode>
<opcode><desc>Sets the number of samples in a control period.</desc><synopsis><opcodename>ksmps</opcodename> = iarg</synopsis></opcode>
<opcode><desc>Sets the number of channels of audio output.</desc><synopsis><opcodename>nchnls</opcodename> = iarg</synopsis></opcode>
<opcode><desc>Sets the number of channels of audio input.</desc><synopsis><opcodename>nchnls_i</opcodename> = iarg</synopsis></opcode>
<opcode><desc>Sets the audio sampling rate.</desc><synopsis><opcodename>sr</opcodename> = iarg</synopsis></opcode>
</category>
<category name="Orchestra Syntax:Block Statements">
<opcode><desc>Ends the current instrument block.</desc><synopsis><opcodename>endin</opcodename></synopsis></opcode>
<opcode><desc>Marks the end of an user-defined opcode block.</desc><synopsis><opcodename>endop</opcodename></synopsis></opcode>
<opcode><desc>Starts an instrument block.</desc><synopsis><opcodename>instr</opcodename> i, j, ...</synopsis></opcode>
<opcode><desc>Defines the start of user-defined opcode block.</desc><synopsis><opcodename>opcode</opcodename> name, outtypes, intypes</synopsis></opcode>
</category>
<category name="Orchestra Syntax:Macros">
<opcode><desc>Defines a macro.</desc><synopsis><opcodename>#define</opcodename> NAME # replacement text #</synopsis>
<synopsis><opcodename>#define</opcodename> NAME(a&apos; b&apos; c&apos;) # replacement text #</synopsis>
</opcode>
<opcode><desc>Calls a defined macro.</desc><synopsis><opcodename>$NAME</opcodename></synopsis>
<para/></opcode>
<opcode><desc>Conditional reading of code.</desc><synopsis><opcodename>#ifdef</opcodename> NAME</synopsis><synopsis>  ....</synopsis><synopsis><opcodename>#else</opcodename></synopsis><synopsis>  ....</synopsis><synopsis><opcodename>#end</opcodename></synopsis>
</opcode>
<opcode><desc>Conditional reading of code.</desc><synopsis><opcodename>#ifndef</opcodename> NAME</synopsis><synopsis>  ....</synopsis><synopsis><opcodename>#else</opcodename></synopsis><synopsis>  ....</synopsis><synopsis><opcodename>#end</opcodename></synopsis>
</opcode>
<opcode><desc>Includes an external file for processing.</desc><synopsis><opcodename>#include</opcodename> &quot;filename&quot;</synopsis>
</opcode>
<opcode><desc>Un-defines a macro.</desc><synopsis><opcodename>#undef</opcodename> NAME</synopsis>
</opcode>
</category>
<category name="Signal Generators:Additive Synthesis/Resynthesis">
<opcode><desc>Output is an additive set of individually controlled sinusoids, using an oscillator bank.</desc><synopsis>ares <opcodename>adsyn</opcodename> kamod, kfmod, ksmod, ifilcod</synopsis></opcode>
<opcode><desc>Performs additive synthesis with an arbitrary number of partials, not necessarily harmonic.</desc><synopsis>ares <opcodename>adsynt</opcodename> kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]</synopsis></opcode>
<opcode><desc>Performs additive synthesis with an arbitrary number of partials -not necessarily harmonic- with interpolation.</desc><synopsis>ar <opcodename>adsynt2</opcodename> kamp, kcps, iwfn, ifreqfn, iampfn, icnt [, iphs]</synopsis></opcode>
<opcode><desc>Band-Enhanced Oscillator-Bank</desc><synopsis>aout <opcodename>beadsynt</opcodename> kFreqs[], kAmps[], kBws[] \
                   [, inumosc, iflags, kfreq, kbw, ifn, iphs ]</synopsis><synopsis>aout <opcodename>beadsynt</opcodename> ifreqft, iampft, ibwft, inumosc \
                   [, iflags, kfreq, kbw, ifn, iphs ]</synopsis></opcode>
<opcode><desc>Band-Enhanced Oscillator</desc><synopsis>aout <opcodename>beosc</opcodename> xfreq, kbw [, ifn, iphs, inoisetype ]</synopsis></opcode>
<opcode><desc>An oscillator which takes tonality and brightness as arguments.</desc><synopsis>ares <opcodename>hsboscil</opcodename> kamp, ktone, kbrite, ibasfreq, iwfn, ioctfn \
               [, ioctcnt] [, iphs]</synopsis></opcode>
</category>
<category name="Signal Generators:Basic Oscillators">
<opcode><desc>A low frequency oscillator of various shapes.</desc><synopsis>kres <opcodename>lfo</opcodename> kamp, kcps [, itype]</synopsis><synopsis>ares <opcodename>lfo</opcodename> kamp, kcps [, itype]</synopsis></opcode>
<opcode><desc>Mixes the output of any number of oscillators.</desc><synopsis>ares <opcodename>oscbnk</opcodename>  kcps, kamd, kfmd, kpmd, iovrlap, iseed, kl1minf, kl1maxf, \
      kl2minf, kl2maxf, ilfomode, keqminf, keqmaxf, keqminl, keqmaxl, \
      keqminq, keqmaxq, ieqmode, kfn [, il1fn] [, il2fn] [, ieqffn]   \
      [, ieqlfn] [, ieqqfn] [, itabl] [, ioutfn]</synopsis></opcode>
<opcode><desc>A simple oscillator.</desc><synopsis>ares <opcodename>oscil</opcodename> xamp, xcps [, ifn, iphs]</synopsis><synopsis>kres <opcodename>oscil</opcodename> kamp, kcps [, ifn, iphs]</synopsis></opcode>
<opcode><desc>A simple oscillator with cubic interpolation.</desc><synopsis>ares <opcodename>oscil3</opcodename> xamp, xcps [, ifn, iphs]</synopsis><synopsis>kres <opcodename>oscil3</opcodename> kamp, kcps [, ifn, iphs]</synopsis></opcode>
<opcode><desc>A simple oscillator with linear interpolation.</desc><synopsis>ares <opcodename>oscili</opcodename> xamp, xcps[, ifn, iphs]</synopsis><synopsis>kres <opcodename>oscili</opcodename> kamp, kcps[, ifn, iphs]</synopsis></opcode>
<opcode><desc>A linearly interpolated oscillator that allows changing the table number at k-rate.</desc><synopsis>ares <opcodename>oscilikt</opcodename> xamp, xcps, kfn [, iphs] [, istor]</synopsis><synopsis>kres <opcodename>oscilikt</opcodename> kamp, kcps, kfn [, iphs] [, istor]</synopsis></opcode>
<opcode><desc>A linearly interpolated oscillator that allows allows phase modulation.</desc><synopsis>ares <opcodename>osciliktp</opcodename> kcps, kfn, kphs [, istor]</synopsis></opcode>
<opcode><desc>A linearly interpolated oscillator with sync status that allows changing the table number at k-rate.</desc><synopsis>ares <opcodename>oscilikts</opcodename> xamp, xcps, kfn, async, kphs [, istor]</synopsis></opcode>
<opcode><desc>Accesses table values at a user-defined frequency.</desc><synopsis>ares <opcodename>osciln</opcodename> kamp, ifrq, ifn, itimes</synopsis></opcode>
<opcode><desc>A simple, fast sine oscillator</desc><synopsis>ares <opcodename>oscils</opcodename> iamp, icps, iphs [, iflg]</synopsis></opcode>
<opcode><desc>High precision oscillator.</desc><synopsis>ares <opcodename>poscil</opcodename> aamp, acps [, ifn, iphs]</synopsis><synopsis>ares <opcodename>poscil</opcodename> aamp, kcps [, ifn, iphs]</synopsis><synopsis>ares <opcodename>poscil</opcodename> kamp, acps [, ifn, iphs]</synopsis><synopsis>ares <opcodename>poscil</opcodename> kamp, kcps [, ifn, iphs]</synopsis><synopsis>ires <opcodename>poscil</opcodename> kamp, kcps [, ifn, iphs]</synopsis><synopsis>kres <opcodename>poscil</opcodename> kamp, kcps [, ifn, iphs]</synopsis></opcode>
<opcode><desc>High precision oscillator with cubic interpolation.</desc><synopsis>ares <opcodename>poscil3</opcodename> aamp, acps [, ifn, iphs]</synopsis><synopsis>ares <opcodename>poscil3</opcodename> aamp, kcps [, ifn, iphs]</synopsis><synopsis>ares <opcodename>poscil3</opcodename> kamp, acps [, ifn, iphs]</synopsis><synopsis>ares <opcodename>poscil3</opcodename> kamp, kcps [, ifn, iphs]</synopsis><synopsis>ires <opcodename>poscil3</opcodename> kamp, kcps [, ifn, iphs]</synopsis><synopsis>kres <opcodename>poscil3</opcodename> kamp, kcps [, ifn, iphs]</synopsis></opcode>
<opcode><desc>Easier-to-use user-controllable vibrato.</desc><synopsis>kout <opcodename>vibr</opcodename> kAverageAmp, kAverageFreq, ifn</synopsis></opcode>
<opcode><desc>Generates a natural-sounding user-controllable vibrato.</desc><synopsis>kout <opcodename>vibrato</opcodename> kAverageAmp, kAverageFreq, kRandAmountAmp, kRandAmountFreq, kAmpMinRate, kAmpMaxRate, kcpsMinRate, kcpsMaxRate, ifn [, iphs</synopsis></opcode>
</category>
<category name="Signal Generators:Dynamic Spectrum Oscillators">
<opcode><desc>Output is a set of harmonically related sine partials.</desc><synopsis>ares <opcodename>buzz</opcodename> xamp, xcps, knh, ifn [, iphs]</synopsis></opcode>
<opcode><desc>Output is a set of harmonically related cosine partials.</desc><synopsis>ares <opcodename>gbuzz</opcodename> xamp, xcps, knh, klh, kmul, ifn [, iphs]</synopsis></opcode>
<opcode><desc>Generates a set of impulses.</desc><synopsis>ares <opcodename>mpulse</opcodename> kamp, kintvl [, ioffset]</synopsis></opcode>
<opcode><desc>A mostly bandlimited shape-shifting square-pulse-saw-sinewave oscillator with hardsync.</desc><synopsis>aout [, asyncout] <opcodename>squinewave</opcodename> acps, aClip, aSkew [, asyncin] [, iMinSweep] [, iphase]</synopsis></opcode>
<opcode><desc>Implementation of a band limited, analog modeled oscillator.</desc><synopsis>ares <opcodename>vco</opcodename> xamp, xcps, iwave, kpw [, ifn] [, imaxd] [, ileak] [, inyx] \
      [, iphs] [, iskip]</synopsis></opcode>
<opcode><desc>Implementation of a band-limited oscillator using pre-calculated tables.</desc><synopsis>ares <opcodename>vco2</opcodename> kamp, kcps [, imode] [, kpw] [, kphs] [, inyx]</synopsis></opcode>
<opcode><desc>Returns a table number at k-time for a given oscillator frequency and wavform.</desc><synopsis>kfn <opcodename>vco2ft</opcodename> kcps, iwave [, inyx]</synopsis></opcode>
<opcode><desc>Returns a table number at i-time for a given oscillator frequency and wavform.</desc><synopsis>ifn <opcodename>vco2ift</opcodename> icps, iwave [, inyx]</synopsis></opcode>
<opcode><desc>Calculates tables for use by vco2 opcode.</desc><synopsis>ifn <opcodename>vco2init</opcodename> iwave [, ibasfn] [, ipmul] [, iminsiz] [, imaxsiz] [, isrcft]</synopsis></opcode>
</category>
<category name="Signal Generators:FM Synthesis">
<opcode><desc>Two mutually frequency and/or phase modulated oscillators.</desc><synopsis>a1, a2 <opcodename>crossfm</opcodename> xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]</synopsis><synopsis>a1, a2 <opcodename>crossfmi</opcodename> xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]</synopsis><synopsis>a1, a2 <opcodename>crosspm</opcodename> xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]</synopsis><synopsis>a1, a2 <opcodename>crosspmi</opcodename> xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]</synopsis><synopsis>a1, a2 <opcodename>crossfmpm</opcodename> xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]</synopsis><synopsis>a1, a2 <opcodename>crossfmpmi</opcodename> xfrq1, xfrq2, xndx1, xndx2, kcps, ifn1, ifn2 [, iphs1] [, iphs2]</synopsis></opcode>
<opcode><desc>Uses FM synthesis to create a Hammond B3 organ sound.</desc><synopsis>ares <opcodename>fmb3</opcodename> kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, \
      ifn4, ivfn]</synopsis></opcode>
<opcode><desc>Uses FM synthesis to create a tublar bell sound.</desc><synopsis>ares <opcodename>fmbell</opcodename> kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, ifn3, \
      ifn4, ivfn, isus]</synopsis></opcode>
<opcode><desc>Uses FM synthesis to create a</desc><synopsis>ares <opcodename>fmmetal</opcodename> kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, \
      ifn4, ivfn</synopsis></opcode>
<opcode><desc>Uses FM synthesis to create a percussive flute sound.</desc><synopsis>ares <opcodename>fmpercfl</opcodename> kamp, kfreq, kc1, kc2, kvdepth, kvrate[, ifn1, ifn2, \
      ifn3, ifn4, ivfn]</synopsis></opcode>
<opcode><desc>Uses FM synthesis to create a Fender Rhodes electric piano sound.</desc><synopsis>ares <opcodename>fmrhode</opcodename> kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, \
      ifn3, ifn4, ivfn</synopsis></opcode>
<opcode><desc>FM Singing Voice Synthesis</desc><synopsis>ares <opcodename>fmvoice</opcodename> kamp, kfreq, kvowel, ktilt, kvibamt, kvibrate[, ifn1, \
      ifn2, ifn3, ifn4, ivibfn]</synopsis></opcode>
<opcode><desc>Uses FM synthesis to create a Wurlitzer electric piano sound.</desc><synopsis>ares <opcodename>fmwurlie</opcodename> kamp, kfreq, kc1, kc2, kvdepth, kvrate, ifn1, ifn2, ifn3, \
      ifn4, ivfn</synopsis></opcode>
<opcode><desc>A basic frequency modulated oscillator.</desc><synopsis>ares <opcodename>foscil</opcodename> xamp, kcps, xcar, xmod, kndx, ifn [, iphs]</synopsis></opcode>
<opcode><desc>Basic frequency modulated oscillator with linear interpolation.</desc><synopsis>ares <opcodename>foscili</opcodename> xamp, kcps, xcar, xmod, kndx, ifn [, iphs]</synopsis></opcode>
</category>
<category name="Signal Generators:Granular Synthesis">
<opcode><desc>Synchronous granular synthesis, using a soundfile as source.</desc><synopsis>asig <opcodename>diskgrain</opcodename> Sfname, kamp, kfreq, kpitch, kgrsize, kprate, \
      ifun, iolaps [,imaxgrsize , ioffset]</synopsis></opcode>
<opcode><desc>Produces sinusoid bursts useful for formant and granular synthesis.</desc><synopsis>ares <opcodename>fof</opcodename> xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, \
      ifna, ifnb, itotdur [, iphs] [, ifmode] [, iskip]</synopsis></opcode>
<opcode><desc>Produces sinusoid bursts including k-rate incremental indexing with each successive burst.</desc><synopsis>ares <opcodename>fof2</opcodename> xamp, xfund, xform, koct, kband, kris, kdur, kdec, iolaps, \
      ifna, ifnb, itotdur, kphs, kgliss [, iskip]</synopsis></opcode>
<opcode><desc>Audio output is a succession of grains derived from data in a stored function table</desc><synopsis>ares <opcodename>fog</opcodename> xamp, xdens, xtrans, aspd, koct, kband, kris, kdur, kdec, \
      iolaps, ifna, ifnb, itotdur [, iphs] [, itmode] [, iskip]</synopsis></opcode>
<opcode><desc>Generates granular synthesis textures.</desc><synopsis>ares <opcodename>grain</opcodename> xamp, xpitch, xdens, kampoff, kpitchoff, kgdur, igfn, \
      iwfn, imgdur [, igrnd]</synopsis></opcode>
<opcode><desc>Easy-to-use granular synthesis texture generator.</desc><synopsis>ares <opcodename>grain2</opcodename> kcps, kfmd, kgdur, iovrlp, kfn, iwfn [, irpow] \
      [, iseed] [, imode]</synopsis></opcode>
<opcode><desc>Generate granular synthesis textures with more user control.</desc><synopsis>ares <opcodename>grain3</opcodename> kcps, kphs, kfmd, kpmd, kgdur, kdens, imaxovr, kfn, iwfn, \
      kfrpow, kprpow [, iseed] [, imode]</synopsis></opcode>
<opcode><desc>A more complex granular synthesis texture generator.</desc><synopsis>ares <opcodename>granule</opcodename> xamp, ivoice, iratio, imode, ithd, ifn, ipshift, igskip, \
      igskip_os, ilength, kgap, igap_os, kgsize, igsize_os, iatt, idec \
      [, iseed] [, ipitch1] [, ipitch2] [, ipitch3] [, ipitch4] [, ifnenv]</synopsis></opcode>
<opcode><desc>Granular synthesizer with &quot;per grain&quot; control
      over many of its parameters.  Has a sync input to
      sychronize its internal grain scheduler clock to an external
      clock source.</desc><synopsis>a1 [, a2, a3, a4, a5, a6, a7, a8] <opcodename>partikkel</opcodename> agrainfreq, \
              kdistribution, idisttab, async, kenv2amt, ienv2tab, ienv_attack, \
              ienv_decay, ksustain_amount, ka_d_ratio, kduration, kamp, igainmasks, \
              kwavfreq, ksweepshape, iwavfreqstarttab, iwavfreqendtab, awavfm, \
              ifmamptab, kfmenv, icosine, ktraincps, knumpartials, kchroma, \
              ichannelmasks, krandommask, kwaveform1, kwaveform2, kwaveform3, \
              kwaveform4, iwaveamptab, asamplepos1, asamplepos2, asamplepos3, \
              asamplepos4, kwavekey1, kwavekey2, kwavekey3, kwavekey4, imax_grains \
              [, iopcode_id, ipanlaws]</synopsis></opcode>
<opcode><desc>Get mask index for a specific mask parameter of a running</desc><synopsis>kindex <opcodename>partikkelget</opcodename> kparameterindex, iopcode_id</synopsis></opcode>
<opcode><desc>Set mask index for a specific mask parameter of a running</desc><synopsis><opcodename>partikkelset</opcodename> kparameterindex, kmaskindex, iopcode_id</synopsis></opcode>
<opcode><desc>Outputs</desc><synopsis>async [,aphase] <opcodename>partikkelsync</opcodename> iopcode_id</synopsis></opcode>
<opcode><desc>Reads a mono sound sample from a table and applies time-stretching and/or pitch modification.</desc><synopsis>ares [, ac] <opcodename>sndwarp</opcodename> xamp, xtimewarp, xresample, ifn1, ibeg, iwsize, \
      irandw, ioverlap, ifn2, itimemode</synopsis></opcode>
<opcode><desc>Reads a stereo sound sample from a table and applies time-stretching and/or pitch modification.</desc><synopsis>ar1, ar2 [,ac1] [, ac2] <opcodename>sndwarpst</opcodename> xamp, xtimewarp, xresample, ifn1, \
      ibeg, iwsize, irandw, ioverlap, ifn2, itimemode</synopsis></opcode>
<opcode><desc>Synchronous granular synthesis.</desc><synopsis>asig <opcodename>syncgrain</opcodename> kamp, kfreq, kpitch, kgrsize, kprate, ifun1, \
      ifun2, iolaps</synopsis></opcode>
<opcode><desc>Synchronous granular synthesis.</desc><synopsis>asig <opcodename>syncloop</opcodename> kamp, kfreq, kpitch, kgrsize, kprate, klstart, \
      klend, ifun1, ifun2, iolaps[,istart, iskip]</synopsis></opcode>
<opcode><desc>Simple vocal simulation based on glottal pulses with formant characteristics.</desc><synopsis>ar <opcodename>vosim</opcodename> kamp, kFund, kForm, kDecay, kPulseCount, kPulseFactor, ifn [, iskip]</synopsis></opcode>
</category>
<category name="Signal Generators:Hyper Vectorial Synthesis">
<opcode><desc>Allows one-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.</desc><synopsis><opcodename>hvs1</opcodename> kx, inumParms, inumPointsX, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]</synopsis></opcode>
<opcode><desc>Allows two-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.</desc><synopsis><opcodename>hvs2</opcodename> kx, ky, inumParms, inumPointsX, inumPointsY, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]</synopsis></opcode>
<opcode><desc>Allows three-dimensional Hyper Vectorial Synthesis (HVS) controlled by externally-updated k-variables.</desc><synopsis><opcodename>hvs3</opcodename> kx, ky, kz, inumParms, inumPointsX, inumPointsY, inumPointsZ, iOutTab, iPositionsTab, iSnapTab [, iConfigTab]</synopsis></opcode>
</category>
<category name="Signal Generators:Linear and Exponential Generators">
<opcode><desc>Break point function with linear interpolation</desc><synopsis>ky <opcodename>bpf</opcodename> kx, kx1, ky1, kx2, ..., kxn, kyn</synopsis><synopsis>iy <opcodename>bpf</opcodename> ix, ix1, iy1, ix2, ..., ixn, iyn</synopsis><synopsis>kys[] <opcodename>bpf</opcodename> kxs[], kx1, ky1, kx2, ..., kxn, kyn</synopsis><synopsis>iys[] <opcodename>bpf</opcodename> ixs[], ix1, iy1, ix2, ..., ixn, iyn</synopsis></opcode>
<opcode><desc>Break point function with cosine (easy-in/easy-out) interpolation</desc><synopsis>ky <opcodename>bpfcos</opcodename> kx, kx1, ky1, kx2, ..., kxn, kyn</synopsis><synopsis>kys[] <opcodename>bpfcos</opcodename> kxs[], kx1, ky1, kx2, ..., kxn, kyn</synopsis></opcode>
<opcode><desc>Trace a series of line segments between specified points with
      cosine interpolation.</desc><synopsis>ares <opcodename>cosseg</opcodename> ia, idur1, ib [, idur2] [, ic] [...]</synopsis><synopsis>kres <opcodename>cosseg</opcodename> ia, idur1, ib [, idur2] [, ic] [...]</synopsis></opcode>
<opcode><desc>Trace a series of line segments between specified absolute points with
      cosine interpolation.</desc><synopsis>ares <opcodename>cossegb</opcodename> ia, itim1, ib [, itim2] [, ic] [...]</synopsis><synopsis>kres <opcodename>cossegb</opcodename> ia, itim1, ib [, itim2] [, ic] [...]</synopsis></opcode>
<opcode><desc>Trace a series of line segments between specified points with
      cosine interpolation, including a release segment.</desc><synopsis>ares <opcodename>cossegr</opcodename> ia, idur1, ib [, idur2] [, ic] [...], irel, iz</synopsis><synopsis>kres <opcodename>cossegr</opcodename> ia, idur1, ib [, idur2] [, ic] [...], irel, iz</synopsis></opcode>
<opcode><desc>This opcode implements a formula for generating a normalised exponential curve in range 0 - 1. It is based on the Max / MSP work of Eric Singer (c) 1994.</desc><synopsis>kout <opcodename>expcurve</opcodename> kindex, ksteepness</synopsis></opcode>
<opcode><desc>Trace an exponential curve between specified points.</desc><synopsis>ares <opcodename>expon</opcodename> ia, idur, ib</synopsis><synopsis>kres <opcodename>expon</opcodename> ia, idur, ib</synopsis></opcode>
<opcode><desc>Trace a series of exponential segments between specified points.</desc><synopsis>ares <opcodename>expseg</opcodename> ia, idur1, ib [, idur2] [, ic] [...]</synopsis><synopsis>kres <opcodename>expseg</opcodename> ia, idur1, ib [, idur2] [, ic] [...]</synopsis></opcode>
<opcode><desc>An exponential segment generator operating at a-rate.</desc><synopsis>ares <opcodename>expsega</opcodename> ia, idur1, ib [, idur2] [, ic] [...]</synopsis></opcode>
<opcode><desc>Trace a series of exponential segments between specified
      absolute points.</desc><synopsis>ares <opcodename>expsegb</opcodename> ia, itim1, ib [, itim2] [, ic] [...]</synopsis><synopsis>kres <opcodename>expsegb</opcodename> ia, itim1, ib [, itim2] [, ic] [...]</synopsis></opcode>
<opcode><desc>An exponential segment generator operating at a-rate with
      absolute times.</desc><synopsis>ares <opcodename>expsegba</opcodename> ia, itim1, ib [, itim2] [, ic] [...]</synopsis></opcode>
<opcode><desc>Trace a series of exponential segments between specified points including a release segment.</desc><synopsis>ares <opcodename>expsegr</opcodename> ia, idur1, ib [, idur2] [, ic] [...], irel, iz</synopsis><synopsis>kres <opcodename>expsegr</opcodename> ia, idur1, ib [, idur2] [, ic] [...], irel, iz</synopsis></opcode>
<opcode><desc>An implementation of a logarithmic gain curve which is similar to the gainslider~ object from Cycling 74 Max / MSP.</desc><synopsis>kout <opcodename>gainslider</opcodename> kindex</synopsis></opcode>
<opcode><desc>Linear to cosine interpolation</desc><synopsis>ky <opcodename>lincos</opcodename> kx, ky0, ky1 [, kx0, kx1 ]</synopsis><synopsis>iy <opcodename>lincos</opcodename> ix, iy0, iy1 [, ix0, ix1 ]</synopsis></opcode>
<opcode><desc>Trace a straight line between specified points.</desc><synopsis>ares <opcodename>line</opcodename> ia, idur, ib</synopsis><synopsis>kres <opcodename>line</opcodename> ia, idur, ib</synopsis></opcode>
<opcode><desc>Linear to linear interpolation</desc><synopsis>ky <opcodename>linlin</opcodename> kx, ky0, ky1 [, kx0, kx1 ]</synopsis><synopsis>iy <opcodename>linlin</opcodename> ix, iy0, iy1 [, ix0, ix1 ]</synopsis><synopsis>kys[] <opcodename>linlin</opcodename> kxs[], ky0, ky1 [, kx0, kx1 ]</synopsis><synopsis>iys[] <opcodename>linlin</opcodename> ixs[], ky0, ky1, [ kx0, kx1 ]</synopsis><synopsis>kC[] <opcodename>linlin</opcodename> kx, kA[], kB[] [, kx0, kx1 ]</synopsis></opcode>
<opcode><desc>Trace a series of line segments between specified points.</desc><synopsis>ares <opcodename>linseg</opcodename> ia, idur1, ib [, idur2] [, ic] [...]</synopsis><synopsis>kres <opcodename>linseg</opcodename> ia, idur1, ib [, idur2] [, ic] [...]</synopsis></opcode>
<opcode><desc>Trace a series of line segments between specified absolute points.</desc><synopsis>ares <opcodename>linsegb</opcodename> ia, itim1, ib [, itim2] [, ic] [...]</synopsis><synopsis>kres <opcodename>linsegb</opcodename> ia, itim1, ib [, itim2] [, ic] [...]</synopsis></opcode>
<opcode><desc>Trace a series of line segments between specified points including a release segment.</desc><synopsis>ares <opcodename>linsegr</opcodename> ia, idur1, ib [, idur2] [, ic] [...], irel, iz</synopsis><synopsis>kres <opcodename>linsegr</opcodename> ia, idur1, ib [, idur2] [, ic] [...], irel, iz</synopsis></opcode>
<opcode><desc>This opcode implements a formula for generating a normalised logarithmic curve in range 0 - 1. It is based on the Max / MSP work of Eric Singer (c) 1994.</desc><synopsis>kout <opcodename>logcurve</opcodename> kindex, ksteepness</synopsis></opcode>
<opcode><desc>Generate control signal consisting of linear segments delimited by two or more specified points.</desc><synopsis>ksig <opcodename>loopseg</opcodename> kfreq, ktrig, iphase, kvalue0, ktime0 [, kvalue1] [, ktime1] \
[, kvalue2] [, ktime2][...]</synopsis></opcode>
<opcode><desc>Control signals based on linear segments.</desc><synopsis>ksig <opcodename>loopsegp</opcodename>  kphase, kvalue0, kdur0, kvalue1 \
      [, kdur1, ... , kdurN-1, kvalueN]</synopsis></opcode>
<opcode><desc>Generate control signal consisting of exponential or linear segments delimited by two or more specified points.</desc><synopsis>ksig <opcodename>looptseg</opcodename> kfreq, ktrig, iphase, kvalue0, ktype0, ktime0, [, kvalue1] [,ktype1] [, ktime1] \
      [, kvalue2] [,ktype2] [, ktime2] [...] [, kvalueN] [,ktypeN] [, ktimeN]</synopsis></opcode>
<opcode><desc>Generate control signal consisting of exponential segments delimited by two or more specified points.</desc><synopsis>ksig <opcodename>loopxseg</opcodename> kfreq, ktrig, iphase, ktime0, kvalue0 [, ktime1] [, kvalue1] \
      [, ktime2] [, kvalue2] [...]</synopsis></opcode>
<opcode><desc>Generate control signal consisting of held segments.</desc><synopsis>ksig <opcodename>lpshold</opcodename> kfreq, ktrig, iphase, ktime0, kvalue0  [, kvalue1] [, ktime1] [, kvalue2] [, ktime2] [...]</synopsis></opcode>
<opcode><desc>Control signals based on held segments.</desc><synopsis>ksig <opcodename>lpsholdp</opcodename>  kphase, kvalue0, ktime0  [, kvalue1] [, ktime1] \
      [, kvalue2] [, ktime2] [...]</synopsis></opcode>
<opcode><desc>Arbitrary signal scaling.</desc><synopsis>kscl <opcodename>scale</opcodename> kinput, kmax, kmin</synopsis></opcode>
<opcode><desc>Constructs a user-definable envelope.</desc><synopsis>ares <opcodename>transeg</opcodename> ia, idur, itype, ib [, idur2] [, itype] [, ic] ...</synopsis><synopsis>kres <opcodename>transeg</opcodename> ia, idur, itype, ib [, idur2] [, itype] [, ic] ...</synopsis></opcode>
<opcode><desc>Constructs a user-definable envelope in absolute time.</desc><synopsis>ares <opcodename>transegb</opcodename> ia, itim, itype, ib [, itim2] [, itype] [, ic] ...</synopsis><synopsis>kres <opcodename>transegb</opcodename> ia, itim, itype, ib [, itim2] [, itype] [, ic] ...</synopsis></opcode>
<opcode><desc>Constructs a user-definable envelope with extended release segment.</desc><synopsis>ares <opcodename>transegr</opcodename> ia, idur, itype, ib [, idur2] [, itype] [, ic] ...</synopsis><synopsis>kres <opcodename>transegr</opcodename> ia, idur, itype, ib [, idur2] [, itype] [, ic] ...</synopsis></opcode>
<opcode><desc>2D linear interpolation</desc><synopsis>kout <opcodename>xyscale</opcodename> kx, ky, k00, k10, k01, k11</synopsis></opcode>
</category>
<category name="Signal Generators:Envelope Generators">
<opcode><desc>Calculates the classical ADSR envelope using linear segments.</desc><synopsis>ares <opcodename>adsr</opcodename> iatt, idec, islev, irel [, idel]</synopsis><synopsis>kres <opcodename>adsr</opcodename> iatt, idec, islev, irel [, idel]</synopsis></opcode>
<opcode><desc>Applies an envelope consisting of 3 segments.</desc><synopsis>ares <opcodename>envlpx</opcodename> xamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]</synopsis><synopsis>kres <opcodename>envlpx</opcodename> kamp, irise, idur, idec, ifn, iatss, iatdec [, ixmod]</synopsis></opcode>
<opcode><desc>The</desc><synopsis>ares <opcodename>envlpxr</opcodename> xamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]</synopsis><synopsis>kres <opcodename>envlpxr</opcodename> kamp, irise, idec, ifn, iatss, iatdec [, ixmod] [,irind]</synopsis></opcode>
<opcode><desc>Applies a straight line rise and decay pattern to an input amp signal.</desc><synopsis>ares <opcodename>linen</opcodename> xamp, irise, idur, idec</synopsis><synopsis>kres <opcodename>linen</opcodename> kamp, irise, idur, idec</synopsis></opcode>
<opcode><desc>The</desc><synopsis>ares <opcodename>linenr</opcodename> xamp, irise, idec, iatdec</synopsis><synopsis>kres <opcodename>linenr</opcodename> kamp, irise, idec, iatdec</synopsis></opcode>
<opcode><desc>Calculates the classical ADSR envelope using the</desc><synopsis>ares <opcodename>madsr</opcodename> iatt, idec, islev, irel [, idel] [, ireltim]</synopsis><synopsis>kres <opcodename>madsr</opcodename> iatt, idec, islev, irel [, idel] [, ireltim]</synopsis></opcode>
<opcode><desc>Calculates the classical ADSR envelope using the</desc><synopsis>ares <opcodename>mxadsr</opcodename> iatt, idec, islev, irel [, idel] [, ireltim]</synopsis><synopsis>kres <opcodename>mxadsr</opcodename> iatt, idec, islev, irel [, idel] [, ireltim]</synopsis></opcode>
<opcode><desc>Calculates the classical ADSR envelope.</desc><synopsis>ares <opcodename>xadsr</opcodename> iatt, idec, islev, irel [, idel]</synopsis><synopsis>kres <opcodename>xadsr</opcodename> iatt, idec, islev, irel [, idel]</synopsis></opcode>
</category>
<category name="Signal Generators:Models and Emulations">
<opcode><desc>Semi-physical model of a bamboo sound.</desc><synopsis>ares <opcodename>bamboo</opcodename> kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
      [, ifreq1] [, ifreq2]</synopsis></opcode>
<opcode><desc>Creates a tone similar to a struck metal bar.</desc><synopsis>ares <opcodename>barmodel</opcodename> kbcL, kbcR, iK, ib, kscan, iT30, ipos, ivel, iwid</synopsis></opcode>
<opcode><desc>Semi-physical model of a cabasa sound.</desc><synopsis>ares <opcodename>cabasa</opcodename> iamp, idettack [, inum] [, idamp] [, imaxshake]</synopsis></opcode>
<opcode><desc>Simulates Chua's oscillator, an LRC oscillator with an active resistor, proved capable of bifurcation and chaotic attractors, with k-rate control of circuit elements.</desc><synopsis>aI3, aV2, aV1 <opcodename>chuap</opcodename> kL, kR0, kC1, kG, kGa, kGb, kE, kC2, iI3, iV2, iV1, ktime_step</synopsis></opcode>
<opcode><desc>Semi-physical model of a crunch sound.</desc><synopsis>ares <opcodename>crunch</opcodename> iamp, idettack [, inum] [, idamp] [, imaxshake]</synopsis></opcode>
<opcode><desc>Semi-physical model of a water drop.</desc><synopsis>ares <opcodename>dripwater</opcodename> kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
      [, ifreq1] [, ifreq2]</synopsis></opcode>
<opcode><desc>Dynamic stochastic approach to waveform synthesis conceived by Iannis Xenakis.</desc><synopsis>ares <opcodename>gendy</opcodename> kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
           kampscl, kdurscl [, initcps] [, knum]</synopsis><synopsis>kres <opcodename>gendy</opcodename> kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
           kampscl, kdurscl [, initcps] [, knum]</synopsis></opcode>
<opcode><desc>Dynamic stochastic approach to waveform synthesis using cubic interpolation.</desc><synopsis>ares <opcodename>gendyc</opcodename> kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
            kampscl, kdurscl [, initcps] [, knum]</synopsis><synopsis>kres <opcodename>gendyc</opcodename> kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
            kampscl, kdurscl [, initcps] [, knum]</synopsis></opcode>
<opcode><desc>Variation of the dynamic stochastic approach to waveform
      synthesis conceived by Iannis Xenakis.</desc><synopsis>ares <opcodename>gendyx</opcodename> kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
            kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]</synopsis><synopsis>kres <opcodename>gendyx</opcodename> kamp, kampdist, kdurdist, kadpar, kddpar, kminfreq, kmaxfreq, \
            kampscl, kdurscl, kcurveup, kcurvedown [, initcps] [, knum]</synopsis></opcode>
<opcode><desc>Audio output is a tone related to the striking of a cow bell or similar.</desc><synopsis>ares <opcodename>gogobel</opcodename> kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivfn</synopsis></opcode>
<opcode><desc>Semi-physical model of a guiro sound.</desc><synopsis>ares <opcodename>guiro</opcodename> kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] [, ifreq1]</synopsis></opcode>
<opcode><desc>Implements the Lorenz system of equations.</desc><synopsis>ax, ay, az <opcodename>lorenz</opcodename> ksv, krv, kbv, kh, ix, iy, iz, iskip [, iskipinit]</synopsis></opcode>
<opcode><desc>Mandelbrot set</desc><synopsis>kiter, koutrig <opcodename>mandel</opcodename>  ktrig, kx, ky, kmaxIter</synopsis></opcode>
<opcode><desc>An emulation of a mandolin.</desc><synopsis>ares <opcodename>mandol</opcodename> kamp, kfreq, kpluck, kdetune, kgain, ksize \
    [, ifn] [, iminfreq]</synopsis></opcode>
<opcode><desc>Physical model related to the striking of a wooden block.</desc><synopsis>ares <opcodename>marimba</opcodename> kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec \
      [, idoubles] [, itriples]</synopsis></opcode>
<opcode><desc>An emulation of a mini-Moog synthesizer.</desc><synopsis>ares <opcodename>moog</opcodename> kamp, kfreq, kfiltq, kfiltrate, kvibf, kvamp, iafn, iwfn, ivfn</synopsis></opcode>
<opcode><desc>Simulates a planet orbiting in a binary star system.</desc><synopsis>ax, ay, az <opcodename>planet</opcodename> kmass1, kmass2, ksep, ix, iy, iz, ivx, ivy, ivz, idelta \
      [, ifriction] [, iskip]</synopsis></opcode>
<opcode><desc>Creates a tone similar to a piano string prepared in a Cageian fashion.</desc><synopsis>ares <opcodename>prepiano</opcodename> ifreq, iNS, iD, iK, \
    iT30,iB, kbcl, kbcr, imass, ihvfreq, iinit, ipos, ivel, isfreq, \
    isspread[, irattles, irubbers]</synopsis><synopsis>al,ar <opcodename>prepiano</opcodename> ifreq, iNS, iD, iK, \
    iT30,iB, kbcl, kbcr, imass, ihvfreq, iinit, ipos, ivel, isfreq, \
    isspread[, irattles, irubbers]</synopsis></opcode>
<opcode><desc>Semi-physical model of a sandpaper sound.</desc><synopsis>ares <opcodename>sandpaper</opcodename> iamp, idettack [, inum] [, idamp] [, imaxshake]</synopsis></opcode>
<opcode><desc>Semi-physical model of a sekere sound.</desc><synopsis>ares <opcodename>sekere</opcodename> iamp, idettack [, inum] [, idamp] [, imaxshake]</synopsis></opcode>
<opcode><desc>Sounds like the shaking of a maraca or similar gourd instrument.</desc><synopsis>ares <opcodename>shaker</opcodename> kamp, kfreq, kbeans, kdamp, ktimes [, idecay]</synopsis></opcode>
<opcode><desc>Semi-physical model of a sleighbell sound.</desc><synopsis>ares <opcodename>sleighbells</opcodename> kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
      [, ifreq1] [, ifreq2]</synopsis></opcode>
<opcode><desc>Semi-physical model of a stick sound.</desc><synopsis>ares <opcodename>stix</opcodename> iamp, idettack [, inum] [, idamp] [, imaxshake]</synopsis></opcode>
<opcode><desc>Semi-physical model of a tambourine sound.</desc><synopsis>ares <opcodename>tambourine</opcodename> kamp, idettack [, inum] [, idamp] [, imaxshake] [, ifreq] \
      [, ifreq1] [, ifreq2]</synopsis></opcode>
<opcode><desc>Physical model related to the striking of a metal block.</desc><synopsis>ares <opcodename>vibes</opcodename> kamp, kfreq, ihrd, ipos, imp, kvibf, kvamp, ivibfn, idec</synopsis></opcode>
<opcode><desc>An emulation of a human voice.</desc><synopsis>ares <opcodename>voice</opcodename> kamp, kfreq, kphoneme, kform, kvibf, kvamp, ifn, ivfn</synopsis></opcode>
</category>
<category name="Signal Generators:Phasors">
<opcode><desc>produces two outputs: a periodic phase signal and a periodic exponential decaying signal.</desc><synopsis>aexp,aph <opcodename>ephasor</opcodename> kfreq, kR</synopsis></opcode>
<opcode><desc>Produce a normalized moving phase value.</desc><synopsis>ares <opcodename>phasor</opcodename> xcps [, iphs]</synopsis><synopsis>kres <opcodename>phasor</opcodename> kcps [, iphs]</synopsis></opcode>
<opcode><desc>Produce an arbitrary number of normalized moving phase values.</desc><synopsis>ares <opcodename>phasorbnk</opcodename> xcps, kndx, icnt [, iphs]</synopsis><synopsis>kres <opcodename>phasorbnk</opcodename> kcps, kndx, icnt [, iphs]</synopsis></opcode>
<opcode><desc>A resettable linear ramp between two levels</desc><synopsis>aindex <opcodename>sc_phasor</opcodename> xtrig, xrate, kstart, kend [, kresetPos] </synopsis><synopsis>kindex <opcodename>sc_phasor</opcodename> xtrig, xrate, kstart, kend [, kresetPos] </synopsis></opcode>
<opcode><desc>Produces a normalized moving phase value with sync input and output.</desc><synopsis>aphase, asyncout <opcodename>syncphasor</opcodename> xcps, asyncin, [, iphs]</synopsis></opcode>
</category>
<category name="Signal Generators:Random (Noise) Generators">
<opcode><desc>Beta distribution random number generator (positive values only).</desc><synopsis>ares <opcodename>betarand</opcodename> krange, kalpha, kbeta</synopsis><synopsis>ires <opcodename>betarand</opcodename> krange, kalpha, kbeta</synopsis><synopsis>kres <opcodename>betarand</opcodename> krange, kalpha, kbeta</synopsis></opcode>
<opcode><desc>Exponential distribution random number generator.</desc><synopsis>ares <opcodename>bexprnd</opcodename> krange</synopsis><synopsis>ires <opcodename>bexprnd</opcodename> krange</synopsis><synopsis>kres <opcodename>bexprnd</opcodename> krange</synopsis></opcode>
<opcode><desc>Cauchy distribution random number generator.</desc><synopsis>ares <opcodename>cauchy</opcodename> kalpha</synopsis><synopsis>ires <opcodename>cauchy</opcodename> kalpha</synopsis><synopsis>kres <opcodename>cauchy</opcodename> kalpha</synopsis></opcode>
<opcode><desc>Cauchy distribution random number generator with
      interpolation.</desc><synopsis>ares <opcodename>cauchyi</opcodename> klambda, xamp, xcps</synopsis><synopsis>ires <opcodename>cauchyi</opcodename> klambda, xamp, xcps</synopsis><synopsis>kres <opcodename>cauchyi</opcodename> klambda, xamp, xcps</synopsis></opcode>
<opcode><desc>Continuous USER-defined-distribution RaNDom generator.</desc><synopsis>aout <opcodename>cuserrnd</opcodename> kmin, kmax, ktableNum</synopsis><synopsis>iout <opcodename>cuserrnd</opcodename> imin, imax, itableNum</synopsis><synopsis>kout <opcodename>cuserrnd</opcodename> kmin, kmax, ktableNum</synopsis></opcode>
<opcode><desc>Discrete USER-defined-distribution RaNDom generator.</desc><synopsis>aout <opcodename>duserrnd</opcodename> ktableNum</synopsis><synopsis>iout <opcodename>duserrnd</opcodename> itableNum</synopsis><synopsis>kout <opcodename>duserrnd</opcodename> ktableNum</synopsis></opcode>
<opcode><desc>Random impulses.</desc><synopsis>ares <opcodename>dust</opcodename> kamp, kdensity</synopsis><synopsis>kres <opcodename>dust</opcodename> kamp, kdensity</synopsis></opcode>
<opcode><desc>Random impulses.</desc><synopsis>ares <opcodename>dust2</opcodename> kamp, kdensity</synopsis><synopsis>kres <opcodename>dust2</opcodename> kamp, kdensity</synopsis></opcode>
<opcode><desc>Exponential distribution random number generator (positive values only).</desc><synopsis>ares <opcodename>exprand</opcodename> klambda</synopsis><synopsis>ires <opcodename>exprand</opcodename> klambda</synopsis><synopsis>kres <opcodename>exprand</opcodename> klambda</synopsis></opcode>
<opcode><desc>Exponential distribution random number generator with
      interpolation (positive values only).</desc><synopsis>ares <opcodename>exprandi</opcodename> klambda, xamp, xcps</synopsis><synopsis>ires <opcodename>exprandi</opcodename> klambda, xamp, xcps</synopsis><synopsis>kres <opcodename>exprandi</opcodename> klambda, xamp, xcps</synopsis></opcode>
<opcode><desc>A fractal noise generator.</desc><synopsis>ares <opcodename>fractalnoise</opcodename> kamp, kbeta</synopsis></opcode>
<opcode><desc>Gaussian distribution random number generator.</desc><synopsis>ares <opcodename>gauss</opcodename> krange</synopsis><synopsis>ires <opcodename>gauss</opcodename> krange</synopsis><synopsis>kres <opcodename>gauss</opcodename> krange</synopsis></opcode>
<opcode><desc>Gaussian distribution random number generator with
      interpolation.</desc><synopsis>ares <opcodename>gaussi</opcodename> krange, xamp, xcps</synopsis><synopsis>ires <opcodename>gaussi</opcodename> krange, xamp, xcps</synopsis><synopsis>kres <opcodename>gaussi</opcodename> krange, xamp, xcps</synopsis></opcode>
<opcode><desc>Random impulses around a certain frequency.</desc><synopsis>ares <opcodename>gausstrig</opcodename> kamp, kcps, kdev [, imode] [, ifrst1]</synopsis><synopsis>kres <opcodename>gausstrig</opcodename> kamp, kcps, kdev [, imode] [, ifrst1]</synopsis></opcode>
<opcode><desc>Reads the global seed value.</desc><synopsis>ians<opcodename> getseed</opcodename></synopsis><synopsis>kans<opcodename> getseed</opcodename></synopsis></opcode>
<opcode><desc>Generates a segmented line whose segments are randomly generated.</desc><synopsis>kout <opcodename>jitter</opcodename> kamp, kcpsMin, kcpsMax</synopsis></opcode>
<opcode><desc>Generates a segmented line with user-controllable random segments.</desc><synopsis>kout <opcodename>jitter2</opcodename> ktotamp, kamp1, kcps1,
    kamp2, kcps2, kamp3, kcps3[ , iopt]</synopsis></opcode>
<opcode><desc>A jitter-spline generator.</desc><synopsis>ares <opcodename>jspline</opcodename> xamp, kcpsMin, kcpsMax</synopsis><synopsis>kres <opcodename>jspline</opcodename> kamp, kcpsMin, kcpsMax</synopsis></opcode>
<opcode><desc>Linear distribution random number generator (positive values only).</desc><synopsis>ares <opcodename>linrand</opcodename> krange</synopsis><synopsis>ires <opcodename>linrand</opcodename> krange</synopsis><synopsis>kres <opcodename>linrand</opcodename> krange</synopsis></opcode>
<opcode><desc>A white noise generator with an IIR lowpass filter.</desc><synopsis>ares <opcodename>noise</opcodename> xamp, kbeta</synopsis></opcode>
<opcode><desc>Cauchy distribution random number generator (positive values only).</desc><synopsis>ares <opcodename>pcauchy</opcodename> kalpha</synopsis><synopsis>ires <opcodename>pcauchy</opcodename> kalpha</synopsis><synopsis>kres <opcodename>pcauchy</opcodename> kalpha</synopsis></opcode>
<opcode><desc>Generates pink noise.</desc><synopsis>ares <opcodename>pinker</opcodename></synopsis></opcode>
<opcode><desc>Generates approximate pink noise.</desc><synopsis>ares <opcodename>pinkish</opcodename> xin [, imethod] [, inumbands] [, iseed] [, iskip]</synopsis></opcode>
<opcode><desc>Poisson distribution random number generator (positive values only).</desc><synopsis>ares <opcodename>poisson</opcodename> klambda</synopsis><synopsis>ires <opcodename>poisson</opcodename> klambda</synopsis><synopsis>kres <opcodename>poisson</opcodename> klambda</synopsis></opcode>
<opcode><desc>Generates a controlled random number series.</desc><synopsis>ares <opcodename>rand</opcodename> xamp [, iseed] [, isel] [, ioffset]</synopsis><synopsis>kres <opcodename>rand</opcodename> xamp [, iseed] [, isel] [, ioffset]</synopsis></opcode>
<opcode><desc>Generates random numbers and holds them for a period of time.</desc><synopsis>ares <opcodename>randh</opcodename> xamp, xcps [, iseed] [, isize] [, ioffset]</synopsis><synopsis>kres <opcodename>randh</opcodename> kamp, kcps [, iseed] [, isize] [, ioffset]</synopsis></opcode>
<opcode><desc>Generates a controlled random number series with interpolation between each new number.</desc><synopsis>ares <opcodename>randi</opcodename> xamp, xcps [, iseed] [, isize] [, ioffset]</synopsis><synopsis>kres <opcodename>randi</opcodename> kamp, kcps [, iseed] [, isize] [, ioffset]</synopsis></opcode>
<opcode><desc>Generates a controlled pseudo-random number series between min and max values.</desc><synopsis>ares <opcodename>random</opcodename> kmin, kmax</synopsis><synopsis>ires <opcodename>random</opcodename> imin, imax</synopsis><synopsis>kres <opcodename>random</opcodename> kmin, kmax</synopsis></opcode>
<opcode><desc>Generates random numbers with a user-defined limit and holds them for a period of time.</desc><synopsis>ares <opcodename>randomh</opcodename> kmin, kmax, xcps [,imode] [,ifirstval]</synopsis><synopsis>kres <opcodename>randomh</opcodename> kmin, kmax, kcps [,imode] [,ifirstval]</synopsis></opcode>
<opcode><desc>Generates a user-controlled random number series with interpolation between each new number.</desc><synopsis>ares <opcodename>randomi</opcodename> kmin, kmax, xcps [,imode] [,ifirstval]</synopsis><synopsis>kres <opcodename>randomi</opcodename> kmin, kmax, kcps [,imode] [,ifirstval]</synopsis></opcode>
<opcode><desc>31-bit bipolar random opcodes with controllable distribution.</desc><synopsis>ax <opcodename>rnd31</opcodename> kscl, krpow [, iseed]</synopsis><synopsis>ix <opcodename>rnd31</opcodename> iscl, irpow [, iseed]</synopsis><synopsis>kx <opcodename>rnd31</opcodename> kscl, krpow [, iseed]</synopsis></opcode>
<opcode><desc>Generate random spline curves.</desc><synopsis>ares <opcodename>rspline</opcodename> xrangeMin, xrangeMax, kcpsMin, kcpsMax</synopsis><synopsis>kres <opcodename>rspline</opcodename> krangeMin, krangeMax, kcpsMin, kcpsMax</synopsis></opcode>
<opcode><desc>Sets the global seed value.</desc><synopsis><opcodename>seed</opcodename> ival</synopsis></opcode>
<opcode><desc>Generates a controlled pseudo-random number series between min and max values according to a trigger.</desc><synopsis>kout <opcodename>trandom</opcodename> ktrig, kmin, kmax</synopsis></opcode>
<opcode><desc>Triangular distribution random number generator</desc><synopsis>ares <opcodename>trirand</opcodename> krange</synopsis><synopsis>ires <opcodename>trirand</opcodename> krange</synopsis><synopsis>kres <opcodename>trirand</opcodename> krange</synopsis></opcode>
<opcode><desc>Uniform distribution random number generator (positive values only).</desc><synopsis>ares <opcodename>unirand</opcodename> krange</synopsis><synopsis>ires <opcodename>unirand</opcodename> krange</synopsis><synopsis>kres <opcodename>unirand</opcodename> krange</synopsis></opcode>
<opcode><desc>truly random opcodes with controllable range.</desc><synopsis>ax <opcodename>urandom</opcodename> [imin, imax]</synopsis><synopsis>ix <opcodename>urandom</opcodename> [imin, imax]</synopsis><synopsis>kx <opcodename>urandom</opcodename> [imin, imax]</synopsis></opcode>
<opcode><desc>A discrete user-defined-distribution random generator that can be used as a function.</desc><synopsis>aout = <opcodename>urd</opcodename>(ktableNum)</synopsis><synopsis>iout = <opcodename>urd</opcodename>(itableNum)</synopsis><synopsis>kout = <opcodename>urd</opcodename>(ktableNum)</synopsis></opcode>
<opcode><desc>Weibull distribution random number generator (positive values only).</desc><synopsis>ares <opcodename>weibull</opcodename> ksigma, ktau</synopsis><synopsis>ires <opcodename>weibull</opcodename> ksigma, ktau</synopsis><synopsis>kres <opcodename>weibull</opcodename> ksigma, ktau</synopsis></opcode>
</category>
<category name="Signal Generators:Sample Playback">
<opcode><desc>Generates breakbeat-style cut-ups of a mono audio stream.</desc><synopsis>a1 <opcodename>bbcutm</opcodename> asource, ibps, isubdiv, ibarlength, iphrasebars, inumrepeats \
      [, istutterspeed] [, istutterchance] [, ienvchoice ]</synopsis></opcode>
<opcode><desc>Generates breakbeat-style cut-ups of a stereo audio stream.</desc><synopsis>a1,a2 <opcodename>bbcuts</opcodename> asource1, asource2, ibps, isubdiv, ibarlength, iphrasebars, \
      inumrepeats [, istutterspeed] [, istutterchance] [, ienvchoice]</synopsis></opcode>
<opcode><desc>Function-table-based crossfading looper.</desc><synopsis>asig1[, asig2] <opcodename>flooper</opcodename> kamp, kpitch, istart, idur, ifad, ifn</synopsis></opcode>
<opcode><desc>Function-table-based crossfading looper.</desc><synopsis>asig1[,asig2] <opcodename>flooper2</opcodename> kamp, kpitch, kloopstart, kloopend, kcrossfade, ifn \
      [, istart, imode, ifenv, iskip]</synopsis></opcode>
<opcode><desc>Collects all audio from all Fluidsynth engines in a performance</desc><synopsis>aleft, aright <opcodename>fluidAllOut</opcodename></synopsis></opcode>
<opcode><desc>Sends a MIDI controller data message to fluid.</desc><synopsis><opcodename>fluidCCi</opcodename> iEngineNumber, iChannelNumber, iControllerNumber, iValue</synopsis></opcode>
<opcode><desc>Sends a MIDI controller data message to fluid.</desc><synopsis><opcodename>fluidCCk</opcodename> iEngineNumber, iChannelNumber, iControllerNumber, kValue</synopsis></opcode>
<opcode><desc>Sends MIDI note on, note off, and other messages to a SoundFont preset.</desc><synopsis><opcodename>fluidControl</opcodename> ienginenum, kstatus, kchannel, kdata1, kdata2</synopsis></opcode>
<opcode><desc>Instantiates a fluidsynth engine.</desc><synopsis>ienginenum <opcodename>fluidEngine</opcodename> [iReverbEnabled] [, iChorusEnabled] [,iNumChannels] [, iPolyphony] </synopsis></opcode>
<opcode><desc>Retrieves program information from currently loaded soundfont.</desc><synopsis>SPrograms[] <opcodename>fluidInfo</opcodename> ienginenum</synopsis></opcode>
<opcode><desc>Loads a SoundFont into a fluidEngine, optionally listing SoundFont contents.</desc><synopsis>isfnum <opcodename>fluidLoad</opcodename> soundfont, ienginenum[, ilistpresets]</synopsis></opcode>
<opcode><desc>Plays a note on a channel in a fluidSynth engine.</desc><synopsis><opcodename>fluidNote</opcodename> ienginenum, ichannelnum, imidikey, imidivel</synopsis></opcode>
<opcode><desc>Outputs sound from a given fluidEngine</desc><synopsis>aleft, aright <opcodename>fluidOut</opcodename> ienginenum</synopsis></opcode>
<opcode><desc>Assigns a preset from a SoundFont to a channel on a fluidEngine.</desc><synopsis><opcodename>fluidProgramSelect</opcodename> ienginenum, ichannelnum, isfnum, ibanknum, ipresetnum</synopsis></opcode>
<opcode><desc>Set interpolation method for channel in Fluid Engine</desc><synopsis><opcodename>fluidSetInterpMethod</opcodename> ienginenum, ichannelnum, iInterpMethod</synopsis></opcode>
<opcode><desc>Read sampled sound from a table.</desc><synopsis>ar1 [,ar2] <opcodename>loscil</opcodename> xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \
    [, imod2] [, ibeg2] [, iend2]</synopsis><synopsis>aph, ar1 [,ar2] <opcodename>loscilphs</opcodename> xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \
      [, imod2] [, ibeg2] [, iend2]</synopsis></opcode>
<opcode><desc>Read sampled sound from a table using cubic interpolation. A version that outputs the exact
      table position (phase) corresponding to the output sample is
      provided as an alternative opcode.</desc><synopsis>ar1 [,ar2] <opcodename>loscil3</opcodename> xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \
    [, imod2] [, ibeg2] [, iend2]</synopsis><synopsis>aph, ar1 [,ar2] <opcodename>loscil3phs</opcodename> xamp, kcps, ifn [, ibas] [, imod1] [, ibeg1] [, iend1] \
      [, imod2] [, ibeg2] [, iend2]</synopsis></opcode>
<opcode><desc>Read multi-channel sampled sound from a table.</desc><synopsis>ar1 [, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, \
      ar15, ar16] <opcodename>loscilx</opcodename> xamp, kcps, ifn \
      [, iwsize, ibas, istrt, imod, ibeg, iend]</synopsis></opcode>
<opcode><desc>Generates a table index for sample playback</desc><synopsis>ares <opcodename>lphasor</opcodename> xtrns [, ilps] [, ilpe] [, imode] [, istrt] [, istor]</synopsis></opcode>
<opcode><desc>Read sampled sound from a table with looping and high precision.</desc><synopsis>ares <opcodename>lposcil</opcodename> kamp, kfreqratio, kloop, kend, ifn [, iphs]</synopsis></opcode>
<opcode><desc>Read sampled sound from a table with high precision and cubic interpolation.</desc><synopsis>ares <opcodename>lposcil3</opcodename> kamp, kfreqratio, kloop, kend, ifn [, iphs]</synopsis></opcode>
<opcode><desc>Read sampled sound from a table with looping and high precision.</desc><synopsis>ar <opcodename>lposcila</opcodename> aamp, kfreqratio, kloop, kend, ift [,iphs] </synopsis></opcode>
<opcode><desc>Read stereo sampled sound from a table with looping and high precision.</desc><synopsis>ar1, ar2 <opcodename>lposcilsa</opcodename> aamp, kfreqratio, kloop, kend, ift [,iphs] </synopsis></opcode>
<opcode><desc>Read stereo sampled sound from a table with looping and high precision.</desc><synopsis>ar1, ar2 <opcodename>lposcilsa2</opcodename> aamp, kfreqratio, kloop, kend, ift [,iphs] </synopsis></opcode>
<opcode><desc>Prints a list of all instruments of a previously loaded SoundFont2 (SF2) file.</desc><synopsis><opcodename>sfilist</opcodename> ifilhandle</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound.</desc><synopsis>ar1, ar2 <opcodename>sfinstr</opcodename> ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
      [, iflag] [, ioffset]</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample instrument, generating a stereo sound with cubic interpolation.</desc><synopsis>ar1, ar2 <opcodename>sfinstr3</opcodename> ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
      [, iflag] [, ioffset]</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample instrument, generating a mono sound with cubic interpolation.</desc><synopsis>ares <opcodename>sfinstr3m</opcodename> ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
      [, iflag] [, ioffset]</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample instrument, generating a mono sound.</desc><synopsis>ares <opcodename>sfinstrm</opcodename> ivel, inotenum, xamp, xfreq, instrnum, ifilhandle \
      [, iflag] [, ioffset]</synopsis></opcode>
<opcode><desc>Loads an entire SoundFont2 (SF2) sample file into memory.</desc><synopsis>ir <opcodename>sfload</opcodename> &quot;filename&quot;</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample preset, generating a stereo sound, with user-defined
      time-varying crossfade looping.</desc><synopsis>ar1, ar2 <opcodename>sflooper</opcodename> ivel, inotenum, kamp, kpitch, ipreindex, kloopstart, kloopend, kcrossfade \
      [, istart, imode, ifenv, iskip] </synopsis></opcode>
<opcode><desc>Assigns all presets of a SoundFont2 (SF2) sample file to a sequence of progressive index numbers.</desc><synopsis><opcodename>sfpassign</opcodename> istartindex, ifilhandle[, imsgs]</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample preset, generating a stereo sound.</desc><synopsis>ar1, ar2 <opcodename>sfplay</opcodename> ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample preset, generating a stereo sound with cubic interpolation.</desc><synopsis>ar1, ar2 <opcodename>sfplay3</opcodename> ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample preset, generating a mono sound with cubic interpolation.</desc><synopsis>ares <opcodename>sfplay3m</opcodename> ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]</synopsis></opcode>
<opcode><desc>Plays a SoundFont2 (SF2) sample preset, generating a mono sound.</desc><synopsis>ares <opcodename>sfplaym</opcodename> ivel, inotenum, xamp, xfreq, ipreindex [, iflag] [, ioffset] [, ienv]</synopsis></opcode>
<opcode><desc>Prints a list of all presets of a SoundFont2 (SF2) sample file.</desc><synopsis><opcodename>sfplist</opcodename> ifilhandle</synopsis></opcode>
<opcode><desc>Assigns an existing preset of a SoundFont2 (SF2) sample file to an index number.</desc><synopsis>ir <opcodename>sfpreset</opcodename> iprog, ibank, ifilhandle, ipreindex</synopsis></opcode>
<opcode><desc>A sound looper with pitch control.</desc><synopsis>asig, krec <opcodename>sndloop</opcodename> ain, kpitch, ktrig, idur, ifad</synopsis></opcode>
<opcode><desc>A simple time stretch by repeating cycles.</desc><synopsis>ares <opcodename>waveset</opcodename> ain, krep [, ilen]</synopsis></opcode>
</category>
<category name="Signal Generators:Scanned Synthesis">
<opcode><desc>Copies from one table to another with a gain control.</desc><synopsis><opcodename>scanhammer</opcodename> isrc, idst, ipos, imult</synopsis></opcode>
<opcode><desc>Generate audio output using scanned synthesis.</desc><synopsis>ares <opcodename>scans</opcodename> kamp, kfreq, ifn, id [, iorder]</synopsis></opcode>
<opcode><desc>A simpler scanned synthesis implementation.</desc><synopsis>aout <opcodename>scantable</opcodename> kamp, kpch, ipos, imass, istiff, idamp, ivel</synopsis></opcode>
<opcode><desc>Compute the waveform and the wavetable for use in scanned synthesis.</desc><synopsis><opcodename>scanu</opcodename> init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, \
      kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id</synopsis></opcode>
<opcode><desc>Allows the position and velocity of a node in a scanned process to be read.</desc><synopsis>kpos, kvel <opcodename>xscanmap</opcodename> iscan, kamp, kvamp [, iwhich]</synopsis></opcode>
<opcode><desc>Fast scanned synthesis waveform and the wavetable generator.</desc><synopsis>ares <opcodename>xscans</opcodename> kamp, kfreq, ifntraj, id [, iorder]</synopsis></opcode>
<opcode><desc>Allows the position and velocity of a node in a scanned process to be read.</desc><synopsis><opcodename>xscansmap</opcodename> kpos, kvel, iscan, kamp, kvamp [, iwhich]</synopsis></opcode>
<opcode><desc>Compute the waveform and the wavetable for use in scanned synthesis.</desc><synopsis><opcodename>xscanu</opcodename> init, irate, ifnvel, ifnmass, ifnstif, ifncentr, ifndamp, kmass, \
      kstif, kcentr, kdamp, ileft, iright, kpos, kstrngth, ain, idisp, id</synopsis></opcode>
</category>
<category name="Signal Generators:STK Opcodes">
<opcode><desc>STKBandedWG uses banded waveguide techniques to model a variety of sounds.</desc><synopsis>asignal <opcodename>STKBandedWG</opcodename> ifrequency, iamplitude, [kpress, kv1[, kmot, kv2[, klfo, kv3[, klfodepth, kv4[, kvel, kv5[, kstrk, kv6[, kinstr, kv7]]]]]]]</synopsis></opcode>
<opcode><desc>STK Hammond-oid organ-like FM synthesis instrument.</desc><synopsis>asignal <opcodename>STKBeeThree</opcodename> ifrequency, iamplitude, [kop4, kv1[, kop3, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKBlowBotl uses a helmholtz resonator (biquad filter) with a polynomial jet excitation.</desc><synopsis>asignal <opcodename>STKBlowBotl</opcodename> ifrequency, iamplitude, [knoise, kv1[, klfo, kv2[, klfodepth, kv3[, kvol, kv4]]]]</synopsis></opcode>
<opcode><desc>STK clarinet physical model with one register hole and one tonehole.</desc><synopsis>asignal <opcodename>STKBlowHole</opcodename> ifrequency, iamplitude, [kreed, kv1[, knoise, kv2[, khole, kv3[, kreg, kv4[, kbreath, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKBowed is a bowed string instrument.</desc><synopsis>asignal <opcodename>STKBowed</opcodename> ifrequency, iamplitude, [kpress, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKBrass is a simple brass instrument.</desc><synopsis>asignal <opcodename>STKBrass</opcodename> ifrequency, iamplitude, [klip, kv1[, kslide, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKClarinet uses a simple clarinet physical model.</desc><synopsis>asignal <opcodename>STKClarinet</opcodename> ifrequency, iamplitude, [kstiff, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKDrummer is a drum sampling synthesizer.</desc><synopsis>asignal <opcodename>STKDrummer</opcodename> ifrequency, iamplitude</synopsis></opcode>
<opcode><desc>STKFMVoices is a singing FM synthesis instrument.</desc><synopsis>asignal <opcodename>STKFMVoices</opcodename> ifrequency, iamplitude, [kvowel, kv1[, kspec, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKFlute uses a simple flute physical model.</desc><synopsis>asignal <opcodename>STKFlute</opcodename> ifrequency, iamplitude, [kjet, kv1[, knoise, kv2[, klfo, kv3[, klfodepth, kv4[, kbreath, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKHevyMetl produces metal sounds.</desc><synopsis>asignal <opcodename>STKHevyMetl</opcodename> ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKMandolin produces mamdolin-like sounds.</desc><synopsis>asignal <opcodename>STKMandolin</opcodename> ifrequency, iamplitude, [kbody, kv1[, kpos, kv2[, ksus, kv3[, kdetune, kv4[, kmic, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKModalBar is a resonant bar instrument.</desc><synopsis>asignal <opcodename>STKModalBar</opcodename> ifrequency, iamplitude, [khard, kv1[, kpos, kv2[, klfo, kv3[, klfodepth, kv4[, kmix, kv5[, kvol, kv6[, kinstr, kv7]]]]]]]</synopsis></opcode>
<opcode><desc>STKMoog produces moog-like swept filter sounds.</desc><synopsis>asignal <opcodename>STKMoog</opcodename> ifrequency, iamplitude, [kq, kv1[, krate, kv2[, klfo, kv3[, klfodepth, kv4[, kvol, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKPercFlut is a percussive flute FM synthesis instrument.</desc><synopsis>asignal <opcodename>STKPercFlut</opcodename> ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKPlucked uses a plucked string physical model.</desc><synopsis>asignal <opcodename>STKPlucked</opcodename> ifrequency, iamplitude</synopsis></opcode>
<opcode><desc>STKResonate is a noise driven formant filter.</desc><synopsis>asignal <opcodename>STKResonate</opcodename> ifrequency, iamplitude, [kfreq, kv1[, kpole, kv2[, knotch, kv3[, kzero, kv4[, kenv, kv5]]]]]</synopsis></opcode>
<opcode><desc>STK Fender Rhodes-like electric piano FM synthesis instrument.</desc><synopsis>asignal <opcodename>STKRhodey</opcodename> ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKSaxofony is a faux conical bore reed instrument.</desc><synopsis>asignal <opcodename>STKSaxofony</opcodename> ifrequency, iamplitude, [kstiff, kv1[, kapert, kv2[, kblow, kv3[, knoise, kv4[, klfo, kv5[, klfodepth, kv6[, kbreath, kv7]]]]]]]</synopsis></opcode>
<opcode><desc>STKShakers is an instrument that simulates environmental sounds or collisions of multiple independent sound producing objects.</desc><synopsis>asignal <opcodename>STKShakers</opcodename> ifrequency, iamplitude, [kenerg, kv1[, kdecay, kv2[, kshake, kv3[, knum, kv4[, kres, kv5[, kinstr, kv6]]]]]]</synopsis></opcode>
<opcode><desc>STKSimple is a wavetable/noise instrument.</desc><synopsis>asignal <opcodename>STKSimple</opcodename> ifrequency, iamplitude, [kpos, kv1[, kcross, kv2[, kenv, kv3[, kgain, kv4]]]]</synopsis></opcode>
<opcode><desc>STKSitar uses a plucked string physical model.</desc><synopsis>asignal <opcodename>STKSitar</opcodename> ifrequency, iamplitude</synopsis></opcode>
<opcode><desc>STKStifKarp is a plucked stiff string instrument.</desc><synopsis>asignal <opcodename>STKStifKarp</opcodename> ifrequency, iamplitude, [kpos, kv1[, ksus, kv2[, kstretch, kv3]]]</synopsis></opcode>
<opcode><desc>STKTubeBell is a  tubular bell (orchestral chime) FM synthesis instrument.</desc><synopsis>asignal <opcodename>STKTubeBell</opcodename> ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKVoicForm is a  four formant synthesis instrument.</desc><synopsis>asignal <opcodename>STKVoicForm</opcodename> ifrequency, iamplitude, [kmix, kv1[, ksel, kv2[, klfo, kv3[, klfodepth, kv4[, kloud, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKWhistle produces whistle sounds.</desc><synopsis>asignal <opcodename>STKWhistle</opcodename> ifrequency, iamplitude, [kmod, kv1[, knoise, kv2[, kfipfreq, kv3[, kfipgain, kv4[, kvol, kv5]]]]]</synopsis></opcode>
<opcode><desc>STKWurley simulates a Wurlitzer electric piano FM synthesis instrument.</desc><synopsis>asignal <opcodename>STKWurley</opcodename> ifrequency, iamplitude, [kmod, kv1[, kcross, kv2[, klfo, kv3[, klfodepth, kv4[, kadsr, kv5]]]]]</synopsis></opcode>
</category>
<category name="Signal Generators:Table Access">
<opcode><desc>Accesses table values by incremental sampling.</desc><synopsis>kres <opcodename>oscil1</opcodename> idel, kamp, idur [, ifn]</synopsis></opcode>
<opcode><desc>Accesses table values by incremental sampling with linear interpolation.</desc><synopsis>kres <opcodename>oscil1i</opcodename> idel, kamp, idur [, ifn]</synopsis></opcode>
<opcode><desc>Accesses table values by direct indexing.</desc><synopsis>ares <opcodename>ptable</opcodename> andx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>ires <opcodename>ptable</opcodename> indx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>ptable</opcodename> kndx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
<opcode><desc>Accesses table values by direct indexing with cubic interpolation.</desc><synopsis>ares <opcodename>ptable3</opcodename> andx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>ires <opcodename>ptable3</opcodename> indx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>ptable3</opcodename> kndx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
<opcode><desc>Accesses table values by direct indexing with linear interpolation.</desc><synopsis>ares <opcodename>ptablei</opcodename> andx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>ires <opcodename>ptablei</opcodename> indx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>ptablei</opcodename> kndx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
<opcode><desc>Fast table opcodes.</desc><synopsis>ir <opcodename>tab_i</opcodename> indx, ifn[, ixmode]</synopsis><synopsis>kr <opcodename>tab</opcodename> kndx, ifn[, ixmode]</synopsis><synopsis>ar <opcodename>tab</opcodename> xndx, ifn[, ixmode]</synopsis><synopsis><opcodename>tabw_i</opcodename> isig, indx, ifn [,ixmode]</synopsis><synopsis><opcodename>tabw</opcodename> ksig, kndx, ifn [,ixmode]</synopsis><synopsis><opcodename>tabw</opcodename> asig, andx, ifn [,ixmode]</synopsis></opcode>
<opcode><desc>Accesses table values by direct indexing.</desc><synopsis>ares <opcodename>table</opcodename> andx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>ires <opcodename>table</opcodename> indx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>table</opcodename> kndx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
<opcode><desc>Accesses table values by direct indexing with cubic interpolation.</desc><synopsis>ares <opcodename>table3</opcodename> andx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>ires <opcodename>table3</opcodename> indx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>table3</opcodename> kndx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
<opcode><desc>Accesses table values by direct indexing with linear interpolation.</desc><synopsis>ares <opcodename>tablei</opcodename> andx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>ires <opcodename>tablei</opcodename> indx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>tablei</opcodename> kndx, ifn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
</category>
<category name="Signal Generators:Wave Terrain Synthesis">
<opcode><desc>A simple wave-terrain synthesis opcode.</desc><synopsis>aout <opcodename>wterrain</opcodename> kamp, kpch, k_xcenter, k_ycenter, k_xradius, k_yradius, \
      itabx, itaby</synopsis></opcode>
</category>
<category name="Signal Generators:Waveguide Physical Modeling">
<opcode><desc>Produces a naturally decaying plucked string or drum sound.</desc><synopsis>ares <opcodename>pluck</opcodename> kamp, kcps, icps, ifn, imeth [, iparm1] [, iparm2]</synopsis></opcode>
<opcode><desc>Physical model of the plucked string.</desc><synopsis>ares <opcodename>repluck</opcodename> iplk, kamp, icps, kpick, krefl, axcite</synopsis></opcode>
<opcode><desc>A string resonator with variable fundamental frequency.</desc><synopsis>ares <opcodename>streson</opcodename> asig, kfr, kfdbgain</synopsis></opcode>
<opcode><desc>Creates a tone similar to a bowed string.</desc><synopsis>ares <opcodename>wgbow</opcodename> kamp, kfreq, kpres, krat, kvibf, kvamp \
    [, ifn] [, iminfreq]</synopsis></opcode>
<opcode><desc>A physical model of a bowed bar.</desc><synopsis>ares <opcodename>wgbowedbar</opcodename> kamp, kfreq, kpos, kbowpres, kgain [, iconst] [, itvel] \
      [, ibowpos] [, ilow]</synopsis></opcode>
<opcode><desc>Creates a tone related to a brass instrument.</desc><synopsis>ares <opcodename>wgbrass</opcodename> kamp, kfreq, ktens, iatt, kvibf, kvamp \
    [, ifn] [, iminfreq]</synopsis></opcode>
<opcode><desc>Creates a tone similar to a clarinet.</desc><synopsis>ares <opcodename>wgclar</opcodename> kamp, kfreq, kstiff, \
    iatt, idetk, kngain, kvibf, kvamp [, ifn] [, iminfreq]</synopsis></opcode>
<opcode><desc>Creates a tone similar to a flute.</desc><synopsis>ares <opcodename>wgflute</opcodename> kamp, kfreq, kjet, iatt,
    idetk, kngain, kvibf, kvamp [, ifn] [, iminfreq] [, ijetrf] [, iendrf]</synopsis></opcode>
<opcode><desc>A high fidelity simulation of a plucked string.</desc><synopsis>ares <opcodename>wgpluck</opcodename> icps, iamp, kpick, iplk, idamp, ifilt, axcite</synopsis></opcode>
<opcode><desc>Physical model of the plucked string.</desc><synopsis>ares <opcodename>wgpluck2</opcodename> iplk, kamp, icps, kpick, krefl</synopsis></opcode>
</category>
<category name="Signal I/O:File I/O">
<opcode><desc>Periodically writes an orchestra control-signal value to an external file.</desc><synopsis><opcodename>dumpk</opcodename>  ksig, ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Periodically writes two orchestra control-signal values to an external file.</desc><synopsis><opcodename>dumpk2</opcodename> ksig1, ksig2, ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Periodically writes three orchestra control-signal values to an external file.</desc><synopsis><opcodename>dumpk3</opcodename> ksig1, ksig2, ksig3, ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Periodically writes four orchestra control-signal values to an external file.</desc><synopsis><opcodename>dumpk4</opcodename> ksig1, ksig2, ksig3, ksig4, ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Closes a previously opened file.</desc><synopsis><opcodename>ficlose</opcodename> ihandle</synopsis><synopsis><opcodename>ficlose</opcodename> Sfilename</synopsis></opcode>
<opcode><desc>Read signals from a file at a-rate.</desc><synopsis><opcodename>fin</opcodename> ifilename, iskipframes, iformat, ain1 [, ain2] [, ain3] [,...]</synopsis><synopsis><opcodename>fin</opcodename> ifilename, iskipframes, iformat, arr[]</synopsis></opcode>
<opcode><desc>Read signals from a file at i-rate.</desc><synopsis><opcodename>fini</opcodename> ifilename, iskipframes, iformat, in1 [, in2] [, in3] [, ...]</synopsis></opcode>
<opcode><desc>Read signals from a file at k-rate.</desc><synopsis><opcodename>fink</opcodename> ifilename, iskipframes, iformat, kin1 [, kin2] [, kin3] [,...]</synopsis></opcode>
<opcode><desc>Opens a file in a specific mode.</desc><synopsis>ihandle <opcodename>fiopen</opcodename> ifilename, imode</synopsis></opcode>
<opcode><desc>Outputs a-rate signals to an arbitrary number of channels.</desc><synopsis><opcodename>fout</opcodename> ifilename, iformat, aout1 [, aout2, aout3,...,aoutN]</synopsis><synopsis><opcodename>fout</opcodename> ifilename, iformat, array[]</synopsis></opcode>
<opcode><desc>Outputs i-rate signals of an arbitrary number of channels to a specified file.</desc><synopsis><opcodename>fouti</opcodename> ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]</synopsis></opcode>
<opcode><desc>Outputs i-rate signals from an arbitrary number of channels to a specified file.</desc><synopsis><opcodename>foutir</opcodename> ihandle, iformat, iflag, iout1 [, iout2, iout3,....,ioutN]</synopsis></opcode>
<opcode><desc>Outputs k-rate signals of an arbitrary number of channels to a specified file, in raw (headerless) format.</desc><synopsis><opcodename>foutk</opcodename> ifilename, iformat, kout1 [, kout2, kout3,....,koutN]</synopsis></opcode>
<opcode><desc>Similar to printks but prints to a file.</desc><synopsis><opcodename>fprintks</opcodename> &quot;filename&quot;, &quot;string&quot;, [, kval1] [, kval2] [...]</synopsis></opcode>
<opcode><desc>Similar to prints but prints to a file.</desc><synopsis><opcodename>fprints</opcodename> &quot;filename&quot;, &quot;string&quot; [, ival1] [, ival2] [...]</synopsis></opcode>
<opcode><desc>Read signals and arrays from an hdf5 file.</desc><synopsis>xout1[, xout2, xout3, ..., xoutN] <opcodename>hdf5read</opcodename> ifilename, ivariablename1[, ivariablename2, ivariablename3, ..., ivariablenameN]</synopsis></opcode>
<opcode><desc>Write signals and arrays to an hdf5 file.</desc><synopsis><opcodename>hdf5write</opcodename> ifilename, xout1[, xout2, xout3, ..., xoutN]</synopsis></opcode>
<opcode><desc>Read a line of text from an external file.</desc><synopsis>Sres, kline <opcodename>readf</opcodename> ifilname</synopsis></opcode>
<opcode><desc>Read a line of text from an external file.</desc><synopsis>Sres, iline <opcodename>readfi</opcodename> ifilname</synopsis></opcode>
<opcode><desc>Periodically reads an orchestra control-signal value from an external file.</desc><synopsis>kres <opcodename>readk</opcodename> ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Periodically reads two orchestra control-signal values from an external file.</desc><synopsis>kr1, kr2 <opcodename>readk2</opcodename> ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Periodically reads three orchestra control-signal values from an external file.</desc><synopsis>kr1, kr2, kr3 <opcodename>readk3</opcodename> ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Periodically reads four orchestra control-signal values from an external file.</desc><synopsis>kr1, kr2, kr3, kr4 <opcodename>readk4</opcodename> ifilname, iformat, iprd</synopsis></opcode>
<opcode><desc>Read and write signals and arrays using a websocket connection.</desc><synopsis>xout1[, xout2, xout3, ..., xoutN] <opcodename>websocket</opcodename> iport, xin</synopsis></opcode>
</category>
<category name="Signal I/O:Signal Input">
<opcode><desc>Reads audio data from an external device or stream and can alter its pitch.</desc><synopsis>ar1 [, ar2 [, ar3 [, ... arN]]] <opcodename>diskin</opcodename> ifilcod[, kpitch[, iskiptim \
      [, iwraparound[, iformat[, iskipinit]]]]]</synopsis><synopsis>ar1[] <opcodename>diskin</opcodename> ifilcod[, kpitch[, iskiptim \
      [, iwraparound[, iformat[, iskipinit]]]]]</synopsis></opcode>
<opcode><desc>Reads audio data from a file, and can alter its pitch using one of several
      available interpolation types, as well as convert the sample rate to match
      the orchestra sr setting.</desc><synopsis>a1[, a2[, ... aN]] <opcodename>diskin2</opcodename> ifilcod[, kpitch[, iskiptim \
      [, iwrap[, iformat[, iwsize[, ibufsize[, iskipinit]]]]]]]</synopsis><synopsis>ar1[] <opcodename>diskin2</opcodename> ifilcod[, kpitch[, iskiptim \
      [, iwrap[, iformat[, iwsize[, ibufsize[, iskipinit]]]]]]]</synopsis></opcode>
<opcode><desc>Reads mono audio data from an external device or stream.</desc><synopsis>ar1 <opcodename>in</opcodename></synopsis><synopsis>aarray <opcodename>in</opcodename></synopsis></opcode>
<opcode><desc>Reads a 32-channel audio signal from an external device or stream.</desc><synopsis>ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, ar13, ar14, \
      ar15, ar16, ar17, ar18, ar19, ar20, ar21, ar22, ar23, ar24, ar25, ar26, \
      ar27, ar28, ar29, ar30, ar31, ar32 <opcodename>in32</opcodename></synopsis></opcode>
<opcode><desc>Reads from numbered channels in an external audio signal or stream.</desc><synopsis>ain1[, ...] <opcodename>inch</opcodename> kchan1[,...]</synopsis></opcode>
<opcode><desc>Reads six-channel audio data from an external device or stream.</desc><synopsis>ar1, ar2, ar3, ar4, ar5, ar6 <opcodename>inh</opcodename></synopsis></opcode>
<opcode><desc>Reads eight-channel audio data from an external device or stream.</desc><synopsis>ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8 <opcodename>ino</opcodename></synopsis></opcode>
<opcode><desc>Reads quad audio data from an external device or stream.</desc><synopsis>ar1, ar2,  ar3, a4 <opcodename>inq</opcodename></synopsis></opcode>
<opcode><desc>Allow input from a range of adjacent audio channels from the audio input device</desc><synopsis><opcodename>inrg</opcodename> kstart, ain1 [,ain2, ain3, ..., ainN]</synopsis></opcode>
<opcode><desc>Reads stereo audio data from an external device or stream.</desc><synopsis>ar1, ar2 <opcodename>ins</opcodename></synopsis></opcode>
<opcode><desc>Reads a k-rate signal from a user-defined channel.</desc><synopsis>ivalue <opcodename>invalue</opcodename> &quot;channel name&quot;</synopsis><synopsis>kvalue <opcodename>invalue</opcodename> &quot;channel name&quot;</synopsis><synopsis>Sname <opcodename>invalue</opcodename> &quot;channel name&quot;</synopsis></opcode>
<opcode><desc>Reads a 16-channel audio signal from an external device or stream.</desc><synopsis>ar1, ar2, ar3, ar4, ar5, ar6, ar7, ar8, ar9, ar10, ar11, ar12, \
      ar13, ar14, ar15, ar16 <opcodename>inx</opcodename></synopsis></opcode>
<opcode><desc>Reads multi-channel audio samples into a ZAK array from an external device or stream.</desc><synopsis><opcodename>inz</opcodename> ksig1</synopsis></opcode>
<opcode><desc>Reads mono or stereo audio data from an external MP3 file.</desc><synopsis>ar1, ar2 <opcodename>mp3in</opcodename> ifilcod[, iskptim, iformat, iskipinit, ibufsize]</synopsis><synopsis>ar1 <opcodename>mp3in</opcodename> ifilcod[, iskptim, iformat, iskipinit, ibufsize]</synopsis></opcode>
<opcode><desc>Reads audio data from an external device or stream.</desc><synopsis>ar1[, ar2[, ar3[, ... a24]]] <opcodename>soundin</opcodename> ifilcod [, iskptim] [, iformat] \
      [, iskipinit] [, ibufsize]</synopsis></opcode>
</category>
<category name="Signal I/O:Signal Output">
<opcode><desc>A MIDI delay opcode.</desc><synopsis><opcodename>mdelay</opcodename> kstatus, kchan, kd1, kd2, kdelay</synopsis></opcode>
<opcode><desc>Returns the audio spout frame.</desc><synopsis>aout1 [,aout2 ... aoutX] <opcodename>monitor</opcodename></synopsis><synopsis>aarra <opcodename>monitor</opcodename></synopsis></opcode>
<opcode><desc>Writes audio data to an external device or stream.</desc><synopsis><opcodename>out</opcodename> asig1[, asig2,....]</synopsis><synopsis><opcodename>out</opcodename> aarray</synopsis></opcode>
<opcode><desc>Writes 32-channel audio data to an external device or stream.</desc><synopsis><opcodename>out32</opcodename> asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, asig10, \
      asig11, asig12, asig13, asig14, asig15, asig16, asig17, asig18, \
      asig19, asig20, asig21, asig22, asig23, asig24, asig25, asig26, \
      asig27, asig28, asig29, asig30, asig31, asig32</synopsis></opcode>
<opcode><desc>Writes audio data with an arbitrary number of channels to an external device or stream.</desc><synopsis><opcodename>outc</opcodename> asig1 [, asig2] [...]</synopsis></opcode>
<opcode><desc>Writes multi-channel audio data, with user-controllable channels, to an external device or stream.</desc><synopsis><opcodename>outch</opcodename> kchan1, asig1 [, kchan2] [, asig2] [...]</synopsis></opcode>
<opcode><desc>Writes 6-channel audio data to an external device or stream.</desc><synopsis><opcodename>outh</opcodename> asig1, asig2, asig3, asig4, asig5, asig6</synopsis></opcode>
<opcode><desc>Writes 8-channel audio data to an external device or stream.</desc><synopsis><opcodename>outo</opcodename> asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8</synopsis></opcode>
<opcode><desc>Writes 4-channel audio data to an external device or stream.</desc><synopsis><opcodename>outq</opcodename> asig1, asig2, asig3, asig4</synopsis></opcode>
<opcode><desc>Writes samples to quad channel 1 of an external device or stream.</desc><synopsis><opcodename>outq1</opcodename> asig</synopsis></opcode>
<opcode><desc>Writes samples to quad channel 2 of an external device or stream.</desc><synopsis><opcodename>outq2</opcodename> asig</synopsis></opcode>
<opcode><desc>Writes samples to quad channel 3 of an external device or stream.</desc><synopsis><opcodename>outq3</opcodename> asig</synopsis></opcode>
<opcode><desc>Writes samples to quad channel 4 of an external device or stream.</desc><synopsis><opcodename>outq4</opcodename> asig</synopsis></opcode>
<opcode><desc>Allow output to a range of adjacent audio channels on the audio output device</desc><synopsis><opcodename>outrg</opcodename> kstart, aout1 [,aout2, aout3, ..., aoutN]</synopsis></opcode>
<opcode><desc>Writes stereo audio data to an external device or stream.</desc><synopsis><opcodename>outs</opcodename> asig1, asig2</synopsis></opcode>
<opcode><desc>Writes samples to stereo channel 1 of an external device or stream.</desc><synopsis><opcodename>outs1</opcodename> asig</synopsis></opcode>
<opcode><desc>Writes samples to stereo channel 2 of an external device or stream.</desc><synopsis><opcodename>outs2</opcodename> asig</synopsis></opcode>
<opcode><desc>Sends an i-rate or k-rate signal or string to a user-defined channel.</desc><synopsis><opcodename>outvalue</opcodename> &quot;channel name&quot;, ivalue</synopsis><synopsis><opcodename>outvalue</opcodename> &quot;channel name&quot;, kvalue</synopsis><synopsis><opcodename>outvalue</opcodename> &quot;channel name&quot;, &quot;string&quot;</synopsis></opcode>
<opcode><desc>Writes 16-channel audio data to an external device or stream.</desc><synopsis><opcodename>outx</opcodename> asig1, asig2, asig3, asig4, asig5, asig6, asig7, asig8, \
      asig9, asig10, asig11, asig12, asig13, asig14, asig15, asig16</synopsis></opcode>
<opcode><desc>Writes multi-channel audio data from a ZAK array to an external device or stream.</desc><synopsis><opcodename>outz</opcodename> ksig1</synopsis></opcode>
<opcode><desc>Deprecated. Writes audio output to a disk file.</desc><synopsis><opcodename>soundout</opcodename>  asig1, ifilcod [, iformat]</synopsis></opcode>
<opcode><desc>Deprecated. Writes audio output to a disk file.</desc><synopsis><opcodename>soundouts</opcodename>  asigl, asigr, ifilcod [, iformat]</synopsis></opcode>
</category>
<category name="Signal I/O:Software Bus">
<opcode><desc>Reads data from the software bus</desc><synopsis>kval <opcodename>chani</opcodename> kchan</synopsis><synopsis>aval <opcodename>chani</opcodename> kchan</synopsis></opcode>
<opcode><desc>Send data to the outwards software bus</desc><synopsis><opcodename>chano</opcodename> kval, kchan</synopsis><synopsis><opcodename>chano</opcodename> aval, kchan</synopsis></opcode>
<opcode><desc>Declare a channel of the named software bus.</desc><synopsis> <opcodename>chn_k</opcodename> Sname, imode[, itype, idflt, imin, ima, ix, iy, iwidth, iheight, Sattributes]</synopsis><synopsis> <opcodename>chn_a</opcodename> Sname, imode</synopsis><synopsis> <opcodename>chn_S</opcodename> Sname, imode</synopsis></opcode>
<opcode><desc>Clears a number of audio output channel of the named software bus.</desc><synopsis><opcodename>chnclear</opcodename> Sname1[, Sname2,...]</synopsis></opcode>
<opcode><desc>Export a global variable as a channel of the bus.</desc><synopsis>gival <opcodename>chnexport</opcodename> Sname, imode[, itype, idflt, imin, imax]</synopsis><synopsis>gkval <opcodename>chnexport</opcodename> Sname, imode[, itype, idflt, imin, imax]</synopsis><synopsis>gaval <opcodename>chnexport</opcodename> Sname, imode</synopsis><synopsis>gSval <opcodename>chnexport</opcodename> Sname, imode</synopsis></opcode>
<opcode><desc>Reads data from the software bus.</desc><synopsis>ival <opcodename>chnget</opcodename> Sname</synopsis><synopsis>kval <opcodename>chnget</opcodename> Sname</synopsis><synopsis>aval <opcodename>chnget</opcodename> Sname</synopsis><synopsis>Sval <opcodename>chnget</opcodename> Sname</synopsis><synopsis>Sval <opcodename>chngetks</opcodename> Sname</synopsis></opcode>
<opcode><desc>Writes audio data to the named software bus, mixing to the previous
      output.</desc><synopsis><opcodename>chnmix</opcodename> aval, Sname</synopsis></opcode>
<opcode><desc>Query parameters of a channel.</desc><synopsis>itype, imode, ictltype, idflt, imin, imax <opcodename>chnparams</opcodename> Sname</synopsis></opcode>
<opcode><desc>Writes data to the named software bus.</desc><synopsis><opcodename>chnset</opcodename> ival, Sname</synopsis><synopsis><opcodename>chnset</opcodename> kval, Sname</synopsis><synopsis><opcodename>chnset</opcodename> aval, Sname</synopsis><synopsis><opcodename>chnset</opcodename> Sval, Sname</synopsis><synopsis><opcodename>chnsetks</opcodename> Sval, Sname</synopsis></opcode>
<opcode><desc>Sets the local ksmps value in an instrument or user-defined opcode block</desc><synopsis><opcodename>setksmps</opcodename> iksmps</synopsis></opcode>
<opcode><desc>Passes variables to a user-defined opcode block,</desc><synopsis>xinarg1 [, xinarg2] ... [xinargN] <opcodename>xin</opcodename></synopsis></opcode>
<opcode><desc>Retrieves variables from a user-defined opcode block,</desc><synopsis><opcodename>xout</opcodename> xoutarg1 [, xoutarg2] ... [, xoutargN]</synopsis></opcode>
</category>
<category name="Signal I/O:Printing and Display">
<opcode><desc>Displays the Fourier Transform of an audio or control signal.</desc><synopsis><opcodename>dispfft</opcodename> xsig, iprd, iwsiz [, iwtyp] [, idbout] [, iwtflg] [,imin] [,imax]</synopsis></opcode>
<opcode><desc>Displays the audio or control signals as an amplitude vs. time graph.</desc><synopsis><opcodename>display</opcodename> xsig, iprd [, inprds] [, iwtflg]</synopsis></opcode>
<opcode><desc>Allows text to be displayed from instruments like sliders</desc><synopsis><opcodename>flashtxt</opcodename>  iwhich, String</synopsis></opcode>
<opcode><desc>Displays the values init (i-rate) variables.</desc><synopsis><opcodename>print</opcodename> iarg [, iarg1] [, iarg2] [...]</synopsis></opcode>
<opcode><desc>printf-style formatted output</desc><synopsis><opcodename>printf_i</opcodename> Sfmt, itrig, [iarg1[, iarg2[, ... ]]]</synopsis><synopsis><opcodename>printf</opcodename> Sfmt, ktrig, [xarg1[, xarg2[, ... ]]]</synopsis></opcode>
<opcode><desc>Prints one k-rate value at specified intervals.</desc><synopsis><opcodename>printk</opcodename> itime, kval [, ispace] [, inamed]</synopsis></opcode>
<opcode><desc>Prints a new value every time a control variable changes.</desc><synopsis><opcodename>printk2</opcodename> kvar [, inumspaces] [, inamed]</synopsis></opcode>
<opcode><desc>Prints at k-rate using a printf() style syntax.</desc><synopsis><opcodename>printks</opcodename> &quot;string&quot;, itime [, xval1] [, xval2] [...]</synopsis></opcode>
<opcode><desc>Prints a new value every time a control variable changes using a
      printf() style syntax.</desc><synopsis><opcodename>printks2</opcodename> &quot;string&quot;, kval</synopsis></opcode>
<opcode><desc>Prints at init-time using a printf() style syntax.</desc><synopsis><opcodename>prints</opcodename> &quot;string&quot; [, xval1] [, xval2] [...]</synopsis></opcode>
</category>
<category name="Signal I/O:Soundfile Queries">
<opcode><desc>Returns the number of bits in each sample in a sound file.</desc><synopsis>ir <opcodename>filebit</opcodename> ifilcod [, iallowraw]</synopsis></opcode>
<opcode><desc>Returns the length of a sound file.</desc><synopsis>ir <opcodename>filelen</opcodename> ifilcod, [iallowraw]</synopsis></opcode>
<opcode><desc>Returns the number of channels in a sound file.</desc><synopsis>ir <opcodename>filenchnls</opcodename> ifilcod [, iallowraw]</synopsis></opcode>
<opcode><desc>Returns the peak absolute value of a sound file.</desc><synopsis>ir <opcodename>filepeak</opcodename> ifilcod [, ichnl]</synopsis></opcode>
<opcode><desc>Returns the sample rate of a sound file.</desc><synopsis>ir <opcodename>filesr</opcodename> ifilcod [, iallowraw]</synopsis></opcode>
<opcode><desc>Checks that a file can be read.</desc><synopsis>ir <opcodename>filevalid</opcodename> ifilcod</synopsis></opcode>
<opcode><desc>Returns the length of an MP3 sound file.</desc><synopsis>ir <opcodename>mp3len</opcodename> ifilcod</synopsis></opcode>
</category>
<category name="Signal Modifiers:Amplitude Modifiers">
<opcode><desc>Adjust one audio signal according to the values of another.</desc><synopsis>ares <opcodename>balance</opcodename> asig, acomp [, ihp] [, iskip]</synopsis></opcode>
<opcode><desc>Adjust one audio signal according to the values of another.</desc><synopsis>ares <opcodename>balance2</opcodename> asig, acomp [, ihp] [, iskip]</synopsis></opcode>
<opcode><desc>Clips a signal to a predefined limit.</desc><synopsis>ares <opcodename>clip</opcodename> asig, imeth, ilimit [, iarg]</synopsis></opcode>
<opcode><desc>Compress, limit, expand, duck or gate an audio signal.</desc><synopsis>ar <opcodename>compress</opcodename> aasig, acsig, kthresh, kloknee, khiknee, kratio, katt, krel, ilook</synopsis></opcode>
<opcode><desc>Compress, limit, expand, duck or gate an audio signal.</desc><synopsis>ar <opcodename>compress2</opcodename> aasig, acsig, kthresh, kloknee, khiknee, kratio, katt, krel, ilook</synopsis></opcode>
<opcode><desc>A dynamic compressor/expander.</desc><synopsis>ares <opcodename>dam</opcodename> asig, kthreshold, icomp1, icomp2, irtime, iftime</synopsis></opcode>
<opcode><desc>Adjusts the amplitude audio signal according to a root-mean-square value.</desc><synopsis>ares <opcodename>gain</opcodename> asig, krms [, ihp] [, iskip]</synopsis></opcode>
</category>
<category name="Signal Modifiers:Convolution and Morphing">
<opcode><desc>Convolves a signal and an impulse response.</desc><synopsis>ar1 [, ar2] [, ar3] [, ar4] <opcodename>convolve</opcodename> ain, ifilcod [, ichannel]</synopsis></opcode>
<opcode><desc>Cross synthesis using FFT's.</desc><synopsis>ares <opcodename>cross2</opcodename> ain1, ain2, isize, ioverlap, iwin, kbias</synopsis></opcode>
<opcode><desc>A direct convolution opcode.</desc><synopsis>ares <opcodename>dconv</opcodename> asig, isize, ifn</synopsis></opcode>
<opcode><desc>Low latency multichannel convolution, using a function table as impulse
	response source.</desc><synopsis>a1[, a2[, a3[, ... a8]]] <opcodename>ftconv</opcodename> ain, ift, iplen[, iskipsamples \
      [, iirlen[, iskipinit]]]</synopsis></opcode>
<opcode><desc>Morphs between multiple ftables as specified in a list.</desc><synopsis><opcodename>ftmorf</opcodename> kftndx, iftfn, iresfn</synopsis></opcode>
<opcode><desc>Partitioned convolution with dynamically reloadable impulse response</desc><synopsis>ares <opcodename>liveconv</opcodename> ain, ift, iplen, kupdate, kclear</synopsis></opcode>
<opcode><desc>Convolution based on a uniformly partitioned overlap-save algorithm</desc><synopsis>ar1 [, ar2] [, ar3] [, ar4] <opcodename>pconvolve</opcodename> ain, ifilcod [, ipartitionsize, ichannel]</synopsis></opcode>
<opcode><desc>A time-varying convolution (FIR filter) opcode.</desc><synopsis>ares <opcodename>tvconv</opcodename> asig1, asig2, xfreez1,
    xfreez2, iparts, ifils</synopsis></opcode>
</category>
<category name="Signal Modifiers:Delay">
<opcode><desc>Delays an input signal by some time interval.</desc><synopsis>ares <opcodename>delay</opcodename> asig, idlt [, iskip]</synopsis></opcode>
<opcode><desc>Delays an input signal by one sample.</desc><synopsis>ares <opcodename>delay1</opcodename> asig [, iskip]</synopsis></opcode>
<opcode><desc>Delays an input signal by some time interval.</desc><synopsis>kr <opcodename>delayk </opcodename>  ksig, idel[, imode]</synopsis><synopsis>kr <opcodename>vdel_k </opcodename>  ksig, kdel, imdel[, imode]</synopsis></opcode>
<opcode><desc>Reads from an automatically established digital delay line.</desc><synopsis>ares <opcodename>delayr</opcodename> idlt [, iskip]</synopsis></opcode>
<opcode><desc>Writes the audio signal to a digital delay line.</desc><synopsis><opcodename>delayw</opcodename> asig</synopsis></opcode>
<opcode><desc>Taps a delay line at variable offset times.</desc><synopsis>ares <opcodename>deltap</opcodename> kdlt</synopsis></opcode>
<opcode><desc>Taps a delay line at variable offset times, uses cubic interpolation.</desc><synopsis>ares <opcodename>deltap3</opcodename> xdlt</synopsis></opcode>
<opcode><desc>Taps a delay line at variable offset times, uses interpolation.</desc><synopsis>ares <opcodename>deltapi</opcodename> xdlt</synopsis></opcode>
<opcode><desc>Taps a delay line at variable offset times.</desc><synopsis>ares <opcodename>deltapn</opcodename> xnumsamps</synopsis></opcode>
<opcode><desc>Read from or write to a delay line with interpolation.</desc><synopsis>aout <opcodename>deltapx</opcodename> adel, iwsize</synopsis></opcode>
<opcode><desc>Mixes the input signal to a delay line.</desc><synopsis><opcodename>deltapxw</opcodename> ain, adel, iwsize</synopsis></opcode>
<opcode><desc>Multitap delay line implementation.</desc><synopsis>ares <opcodename>multitap</opcodename> asig [, itime1, igain1] [, itime2, igain2] [...]</synopsis></opcode>
<opcode><desc>Short description. Single line for opcode listing.</desc><synopsis>outarg1, outarg2 <opcodename>newopcodename</opcodename> inarg1, inarg2</synopsis></opcode>
<opcode><desc>An interpolating variable time delay.</desc><synopsis>ares <opcodename>vdelay</opcodename> asig, adel, imaxdel [, iskip]</synopsis></opcode>
<opcode><desc>A variable time delay with cubic interpolation.</desc><synopsis>ares <opcodename>vdelay3</opcodename> asig, adel, imaxdel [, iskip]</synopsis></opcode>
<opcode><desc>A variable delay opcode with high quality interpolation.</desc><synopsis>aout <opcodename>vdelayx</opcodename> ain, adl, imd, iws [, ist]</synopsis></opcode>
<opcode><desc>A 4-channel variable delay opcode with high quality interpolation.</desc><synopsis>aout1, aout2, aout3, aout4 <opcodename>vdelayxq</opcodename> ain1, ain2, ain3, ain4, adl, imd, iws [, ist]</synopsis></opcode>
<opcode><desc>A stereo variable delay opcode with high quality interpolation.</desc><synopsis>aout1, aout2 <opcodename>vdelayxs</opcodename> ain1, ain2, adl, imd, iws [, ist]</synopsis></opcode>
<opcode><desc>Variable delay opcodes with high quality interpolation.</desc><synopsis>aout <opcodename>vdelayxw</opcodename> ain, adl, imd, iws [, ist]</synopsis></opcode>
<opcode><desc>Variable delay opcodes with high quality interpolation.</desc><synopsis>aout1, aout2, aout3, aout4 <opcodename>vdelayxwq</opcodename> ain1, ain2, ain3, ain4, adl, \
      imd, iws [, ist]</synopsis></opcode>
<opcode><desc>Variable delay opcodes with high quality interpolation.</desc><synopsis>aout1, aout2 <opcodename>vdelayxws</opcodename> ain1, ain2, adl, imd, iws [, ist]</synopsis></opcode>
</category>
<category name="Signal Modifiers:Panning and Spatialization">
<opcode><desc>Deprecated. Decodes an ambisonic B format signal.</desc><synopsis>ao1, ao2 <opcodename>bformdec</opcodename> isetup, aw, ax, ay, az [, ar, as, at, au, av \
      [, abk, al, am, an, ao, ap, aq]]</synopsis><synopsis>ao1, ao2, ao3, ao4 <opcodename>bformdec</opcodename> isetup, aw, ax, ay, az [, ar, as, at, \
      au, av [, abk, al, am, an, ao, ap, aq]]</synopsis><synopsis>ao1, ao2, ao3, ao4, ao5 <opcodename>bformdec</opcodename> isetup, aw, ax, ay, az [, ar, as, \
      at, au, av [, abk, al, am, an, ao, ap, aq]]</synopsis><synopsis>ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8 <opcodename>bformdec</opcodename> isetup, aw, ax, ay, az \
      [, ar, as, at, au, av [, abk, al, am, an, ao, ap, aq]]]</synopsis></opcode>
<opcode><desc>Decodes an ambisonic B format signal</desc><synopsis>ao1, ao2 <opcodename>bformdec1</opcodename> isetup, aw, ax, ay, az [, ar, as, at, au, av \
      [, abk, al, am, an, ao, ap, aq]]</synopsis><synopsis>ao1, ao2, ao3, ao4 <opcodename>bformdec1</opcodename> isetup, aw, ax, ay, az [, ar, as, at, \
      au, av [, abk, al, am, an, ao, ap, aq]]</synopsis><synopsis>ao1, ao2, ao3, ao4, ao5 <opcodename>bformdec1</opcodename> isetup, aw, ax, ay, az [, ar, as, \
      at, au, av [, abk, al, am, an, ao, ap, aq]]</synopsis><synopsis>ao1, ao2, ao3, ao4, ao5, ao6, ao7, ao8 <opcodename>bformdec1</opcodename> isetup, aw, ax, ay, az \
      [, ar, as, at, au, av [, abk, al, am, an, ao, ap,
    aq]]]</synopsis><synopsis>aout[] <opcodename>bformdec1</opcodename> isetup, abform[]</synopsis></opcode>
<opcode><desc>Deprecated. Codes a signal into the ambisonic B format.</desc><synopsis>aw, ax, ay, az <opcodename>bformenc</opcodename> asig, kalpha, kbeta, kord0, kord1</synopsis><synopsis>aw, ax, ay, az, ar, as, at, au, av <opcodename>bformenc</opcodename> asig, kalpha, kbeta, \
      kord0, kord1 , kord2</synopsis><synopsis>aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq <opcodename>bformenc</opcodename> \
      asig, kalpha, kbeta, kord0, kord1, kord2, kord3</synopsis></opcode>
<opcode><desc>Codes a signal into the ambisonic B format.</desc><synopsis>aw, ax, ay, az <opcodename>bformenc1</opcodename> asig, kalpha, kbeta</synopsis><synopsis>aw, ax, ay, az, ar, as, at, au, av <opcodename>bformenc1</opcodename> asig, kalpha, kbeta</synopsis><synopsis>aw, ax, ay, az, ar, as, at, au, av, ak, al, am, an, ao, ap, aq <opcodename>bformenc1</opcodename> \
      asig, kalpha, kbeta</synopsis><synopsis>aarray[] <opcodename>bformenc1</opcodename> asig, kalpha, kbeta</synopsis></opcode>
<opcode><desc>Generates 3D binaural audio with high-fidelity early reflections in a parametric room using a Phase Truncation algorithm.</desc><synopsis>aleft, aright, irt60low, irt60high, imfp <opcodename>hrtfearly</opcodename> asrc, ksrcx, ksrcy, ksrcz, klstnrx, klstnry, klstnrz, \
      ifilel, ifiler, idefroom [,ifade, isr, iorder, ithreed, kheadrot, iroomx, iroomy, iroomz, iwallhigh, \
      iwalllow, iwallgain1, iwallgain2, iwallgain3, ifloorhigh, ifloorlow, ifloorgain1, ifloorgain2, \
      ifloorgain3, iceilinghigh, iceilinglow, iceilinggain1, iceilinggain2, iceilinggain3]</synopsis></opcode>
<opcode><desc>Creates 3D audio for two speakers.</desc><synopsis>aleft, aright <opcodename>hrtfer</opcodename> asig, kaz, kelev, <quote>HRTFcompact</quote></synopsis></opcode>
<opcode><desc>Generates dynamic 3d binaural audio for headphones using magnitude interpolation and phase truncation.</desc><synopsis>aleft, aright <opcodename>hrtfmove</opcodename> asrc, kAz, kElev, ifilel, ifiler [, imode, ifade, isr]</synopsis></opcode>
<opcode><desc>Generates dynamic 3d binaural audio for headphones using a Woodworth based spherical head model
      with improved low frequency phase accuracy.</desc><synopsis>aleft, aright <opcodename>hrtfmove2</opcodename> asrc, kAz, kElev, ifilel, ifiler [,ioverlap, iradius, isr]</synopsis></opcode>
<opcode><desc>A binaural, dynamic FDN based diffuse-field reverberator. The opcode works independently as an efficient, flexible reverberator.</desc><synopsis>aleft, aright, idel <opcodename>hrtfreverb</opcodename> asrc, ilowrt60, ihighrt60, ifilel, ifiler [,isr, imfp, iorder]</synopsis></opcode>
<opcode><desc>Generates static 3d binaural audio for headphones using a
      Woodworth based spherical head model with improved low frequency
      phase accuracy.</desc><synopsis>
      aleft, aright <opcodename>hrtfstat</opcodename> asrc, iAz, iElev, ifilel, ifiler [,iradius, isr]
    </synopsis></opcode>
<opcode><desc>Distributes the audio signals of a previous</desc><synopsis>a1, a2 <opcodename>locsend</opcodename></synopsis><synopsis>a1, a2,  a3, a4 <opcodename>locsend</opcodename></synopsis></opcode>
<opcode><desc>Takes an input signal and distributes between 2 or 4 channels.</desc><synopsis>a1, a2 <opcodename>locsig</opcodename> asig, kdegree, kdistance, kreverbsend</synopsis><synopsis>a1, a2,  a3, a4 <opcodename>locsig</opcodename> asig, kdegree, kdistance, kreverbsend</synopsis></opcode>
<opcode><desc>Distribute an audio signal amongst four channels.</desc><synopsis>a1, a2, a3, a4 <opcodename>pan</opcodename> asig, kx, ky, ifn [, imode] [, ioffset]</synopsis></opcode>
<opcode><desc>Distribute an audio signal across two channels.</desc><synopsis>a1, a2 <opcodename>pan2</opcodename> asig, xp [, imode]</synopsis></opcode>
<opcode><desc>Distributes an input signal among 4 channels using cartesian coordinates.</desc><synopsis>a1, a2, a3, a4  <opcodename>space</opcodename> asig, ifn, ktime, kreverbsend, kx, ky</synopsis></opcode>
<opcode><desc>Positions the input sound in a 3D space and allows moving the sound at k-rate.</desc><synopsis>aW, aX, aY, aZ <opcodename>spat3d</opcodename> ain, kX, kY, kZ, idist, ift, imode, imdel, iovr [, istor]</synopsis></opcode>
<opcode><desc>Positions the input sound in a 3D space with the sound source position set at i-time.</desc><synopsis>aW, aX, aY, aZ <opcodename>spat3di</opcodename> ain, iX, iY, iZ, idist, ift, imode [, istor]</synopsis></opcode>
<opcode><desc>Can be used to render an impulse response for a 3D space at i-time.</desc><synopsis><opcodename>spat3dt</opcodename> ioutft, iX, iY, iZ, idist, ift, imode, irlen [, iftnocl]</synopsis></opcode>
<opcode><desc>Calculates distance values from xy coordinates.</desc><synopsis>k1 <opcodename>spdist</opcodename> ifn, ktime, kx, ky</synopsis></opcode>
<opcode><desc>Generates output signals based on a previously defined</desc><synopsis>a1, a2, a3, a4 <opcodename>spsend</opcodename></synopsis></opcode>
<opcode><desc>Distributes an audio signal among many channels.</desc><synopsis>ar1[, ar2...] <opcodename>vbap</opcodename> asig, kazim [,
    kelev] [, kspread] [, ilayout]</synopsis><synopsis>array[] <opcodename>vbap</opcodename> asig, kazim [,
    kelev] [, kspread] [, ilayout]</synopsis></opcode>
<opcode><desc>Distributes an audio signal among 16 channels.</desc><synopsis>ar1, ..., ar16 <opcodename>vbap16</opcodename> asig, kazim [, kelev] [, kspread]</synopsis></opcode>
<opcode><desc>Distribute an audio signal among 16 channels with moving virtual sources.</desc><synopsis>ar1, ..., ar16 <opcodename>vbap16move</opcodename> asig, idur, ispread, ifldnum, ifld1 \
      [, ifld2] [...]</synopsis></opcode>
<opcode><desc>Distributes an audio signal among 4 channels.</desc><synopsis>ar1, ar2, ar3, ar4 <opcodename>vbap4</opcodename> asig, kazim [, kelev] [, kspread]</synopsis></opcode>
<opcode><desc>Distributes an audio signal among 4 channels with moving virtual sources.</desc><synopsis>ar1, ar2, ar3, ar4 <opcodename>vbap4move</opcodename> asig, idur, ispread, ifldnum, ifld1 \
      [, ifld2] [...]</synopsis></opcode>
<opcode><desc>Distributes an audio signal among 8 channels.</desc><synopsis>ar1, ..., ar8 <opcodename>vbap8</opcodename> asig, kazim [, kelev] [, kspread]</synopsis></opcode>
<opcode><desc>Distributes an audio signal among 8 channels with moving virtual sources.</desc><synopsis>ar1, ..., ar8 <opcodename>vbap8move</opcodename> asig, idur, ispread, ifldnum, ifld1 \
      [, ifld2] [...]</synopsis></opcode>
<opcode><desc>Calculates the gains for a sound location between multiple channels.</desc><synopsis>k1[, k2...] <opcodename>vbapg</opcodename> kazim [,kelev] [, kspread] [, ilayout]</synopsis><synopsis>karray[] <opcodename>vbapg</opcodename> kazim [,kelev] [, kspread] [, ilayout]</synopsis></opcode>
<opcode><desc>Calculates the gains for a sound location between multiple
      channels with moving virtual sources.</desc><synopsis>kr1[, kr2...] <opcodename>vbapgmove</opcodename> idur, ispread, ifldnum, ifld1 \
      [, ifld2] [...]</synopsis><synopsis>karray[] <opcodename>vbapgmove</opcodename> idur, ispread, ifldnum, ifld1 \
      [, ifld2] [...]</synopsis></opcode>
<opcode><desc>Configures VBAP output according to loudspeaker parameters.</desc><synopsis><opcodename>vbaplsinit</opcodename> idim, ilsnum [, idir1] [, idir2] [...] [, idir32]</synopsis><synopsis><opcodename>vbaplsinit</opcodename> idim, ilsnum, ilsarray</synopsis></opcode>
<opcode><desc>Distributes an audio signal among many channels with moving virtual sources.</desc><synopsis>ar1[, ar2...] <opcodename>vbapmove</opcodename> asig, idur, ispread, ifldnum, ifld1 \
      [, ifld2] [...]</synopsis><synopsis>aarray[] <opcodename>vbapmove</opcodename> asig, idur, ispread, ifldnum, ifld1 \
      [, ifld2] [...]</synopsis></opcode>
<opcode><desc>Writes a multi-channel audio signal to a ZAK array.</desc><synopsis><opcodename>vbapz</opcodename> inumchnls, istartndx, asig, kazim [, kelev] [, kspread]</synopsis></opcode>
<opcode><desc>Writes a multi-channel audio signal to a ZAK array with moving virtual sources.</desc><synopsis><opcodename>vbapzmove</opcodename> inumchnls, istartndx, asig, idur, ispread, ifldnum, ifld1, \
      ifld2, [...]</synopsis></opcode>
</category>
<category name="Signal Modifiers:Reverberation">
<opcode><desc>Reverberates an input signal with a flat frequency response.</desc><synopsis>ares <opcodename>alpass</opcodename> asig, xrvt, ilpt [, iskip] [, insmps]</synopsis></opcode>
<opcode><desc>A physical model reverberator.</desc><synopsis>a1, a2 <opcodename>babo</opcodename> asig, ksrcx, ksrcy, ksrcz, irx, iry, irz [, idiff] [, ifno]</synopsis></opcode>
<opcode><desc>Reverberates an input signal with a</desc><synopsis>ares <opcodename>comb</opcodename> asig, krvt, ilpt [, iskip] [, insmps]</synopsis></opcode>
<opcode><desc>Reverberates an input signal with a</desc><synopsis>ares <opcodename>combinv</opcodename> asig, krvt, ilpt [, iskip] [, insmps]</synopsis></opcode>
<opcode><desc>Opcode version of Jezar's Freeverb</desc><synopsis>aoutL, aoutR <opcodename>freeverb</opcodename> ainL, ainR, kRoomSize, kHFDamp[, iSRate[, iSkip]] </synopsis></opcode>
<opcode><desc>Three different nested all-pass filters.</desc><synopsis>ares <opcodename>nestedap</opcodename> asig, imode, imaxdel, idel1, igain1 [, idel2] [, igain2] \
      [, idel3] [, igain3] [, istor]</synopsis></opcode>
<opcode><desc>A reverberator consisting of 6 parallel comb-lowpass filters.</desc><synopsis>ares <opcodename>nreverb</opcodename> asig, ktime, khdif [, iskip] [,inumCombs] [, ifnCombs] \
      [, inumAlpas] [, ifnAlpas]</synopsis></opcode>
<opcode><desc>Models the reverberation of a metal plate.</desc><synopsis>a1[, a2, ...] <opcodename>platerev</opcodename> itabexcite. itabouts, kbndry, iaspect, istiff, idecay, iloss, aexcite1[, aexcite2, ...]</synopsis></opcode>
<opcode><desc>Reverberates an input signal with a</desc><synopsis>ares <opcodename>reverb</opcodename> asig, krvt [, iskip]</synopsis></opcode>
<opcode><desc>Same as the nreverb opcode.</desc><synopsis>ares <opcodename>reverb2</opcodename> asig, ktime, khdif [, iskip] [,inumCombs] \
      [, ifnCombs] [, inumAlpas] [, ifnAlpas]</synopsis></opcode>
<opcode><desc>8 delay line stereo FDN reverb, based on work by Sean Costello</desc><synopsis>aoutL, aoutR <opcodename>reverbsc</opcodename> ainL, ainR, kfblvl, kfco[, israte[, ipitchm[, iskip]]] </synopsis></opcode>
<opcode><desc>Variably reverberates an input signal with a flat frequency response.</desc><synopsis>ares <opcodename>valpass</opcodename> asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]</synopsis></opcode>
<opcode><desc>Variably reverberates an input signal with a</desc><synopsis>ares <opcodename>vcomb</opcodename> asig, krvt, xlpt, imaxlpt [, iskip] [, insmps]</synopsis></opcode>
</category>
<category name="Signal Modifiers:Sample Level Operators">
<opcode><desc>Mixes low level noise to a list of a-rate signals</desc><synopsis><opcodename>denorm</opcodename> a1[, a2[, a3[, ... ]]]</synopsis></opcode>
<opcode><desc>Modify a signal by differentiation.</desc><synopsis>ares <opcodename>diff</opcodename> asig [, iskip]</synopsis><synopsis>kres <opcodename>diff</opcodename> ksig [, iskip]</synopsis></opcode>
<opcode><desc>Modify a signal by down-sampling.</desc><synopsis>kres <opcodename>downsamp</opcodename> asig [, iwlen]</synopsis></opcode>
<opcode><desc>Adds artificial foldover to an audio signal.</desc><synopsis>ares <opcodename>fold</opcodename> asig, kincr</synopsis></opcode>
<opcode><desc>Modify a signal by integration.</desc><synopsis>ares <opcodename>integ</opcodename> asig [, iskip]</synopsis><synopsis>kres <opcodename>integ</opcodename> ksig [, iskip]</synopsis></opcode>
<opcode><desc>Converts a control signal to an audio signal using linear interpolation.</desc><synopsis>ares <opcodename>interp</opcodename> ksig [, iskip] [, imode]
    [, ivalue]</synopsis></opcode>
<opcode><desc>Calculates the weighted mean value of two input signals.</desc><synopsis>ares <opcodename>ntrpol</opcodename> asig1, asig2, kpoint [, imin] [, imax]</synopsis><synopsis>ires <opcodename>ntrpol</opcodename> isig1, isig2, ipoint [, imin] [, imax]</synopsis><synopsis>kres <opcodename>ntrpol</opcodename> ksig1, ksig2, kpoint [, imin] [, imax]</synopsis></opcode>
<opcode><desc>Converts a k-rate parameter to an a-rate value with interpolation.</desc><synopsis><opcodename>a</opcodename>(x) (control-rate args only)</synopsis></opcode>
<opcode><desc>Returns an init-type equivalent of a k-rate argument, or directly returns an i-rate argument.</desc><synopsis><opcodename>i</opcodename>(x) (control-rate or init-rate arg)</synopsis><synopsis><opcodename>i</opcodename>(karray,index1, ...) (k-array with indices)</synopsis></opcode>
<opcode><desc>Converts a i-rate parameter to an k-rate value.
      Or converts an a-rate value to a k-rate value by down-sampling.</desc><synopsis><opcodename>k</opcodename>(x) (i-rate args only)</synopsis><synopsis><opcodename>k</opcodename>(x) (a-rate args only)</synopsis></opcode>
<opcode><desc>Returns an S-type equivalent of an init-time or k-rate argument.</desc><synopsis><opcodename>S</opcodename>(x) (control-rate or init-rate arg)</synopsis></opcode>
<opcode><desc>Performs a sample-and-hold operation on its input.</desc><synopsis>ares <opcodename>samphold</opcodename> asig, agate [, ival] [, ivstor]</synopsis><synopsis>kres <opcodename>samphold</opcodename> ksig, kgate [, ival] [, ivstor]</synopsis></opcode>
<opcode><desc>Modify a signal by up-sampling.</desc><synopsis>ares <opcodename>upsamp</opcodename> ksig</synopsis></opcode>
<opcode><desc>Access values of the current buffer of an a-rate variable by indexing.</desc><synopsis>kval <opcodename>vaget</opcodename> kndx, avar</synopsis></opcode>
<opcode><desc>Write value of into the current buffer of an a-rate variable by index.</desc><synopsis><opcodename>vaset</opcodename> kval, kndx, avar</synopsis></opcode>
</category>
<category name="Signal Modifiers:Signal Limiters">
<opcode><desc>Sets the lower and upper limits of the value it processes.</desc><synopsis>ares <opcodename>limit</opcodename> asig, klow, khigh</synopsis><synopsis>ires <opcodename>limit</opcodename> isig, ilow, ihigh</synopsis><synopsis>kres <opcodename>limit</opcodename> ksig, klow, khigh</synopsis><synopsis>ires[] <opcodename>limit</opcodename> isig[], ilow, ihigh</synopsis><synopsis>kres[] <opcodename>limit</opcodename> ksig[], klow, khigh</synopsis></opcode>
<opcode><desc>Reflects the signal that exceeds the low and high thresholds.</desc><synopsis>ares <opcodename>mirror</opcodename> asig, klow, khigh</synopsis><synopsis>ires <opcodename>mirror</opcodename> isig, ilow, ihigh</synopsis><synopsis>kres <opcodename>mirror</opcodename> ksig, klow, khigh</synopsis></opcode>
<opcode><desc>Wraps-around the signal that exceeds the low and high thresholds.</desc><synopsis>ares <opcodename>wrap</opcodename> asig, klow, khigh</synopsis><synopsis>ires <opcodename>wrap</opcodename> isig, ilow, ihigh</synopsis><synopsis>kres <opcodename>wrap</opcodename> ksig, klow, khigh</synopsis></opcode>
</category>
<category name="Signal Modifiers:Special Effects">
<opcode><desc>Distort an audio signal via waveshaping and optional clipping.</desc><synopsis>ar <opcodename>distort</opcodename> asig, kdist, ifn[, ihp, istor]</synopsis></opcode>
<opcode><desc>Modified hyperbolic tangent distortion.</desc><synopsis>ares <opcodename>distort1</opcodename> asig, kpregain, kpostgain, kshape1, kshape2[, imode]</synopsis></opcode>
<opcode><desc>A user controlled flanger.</desc><synopsis>ares <opcodename>flanger</opcodename> asig, adel, kfeedback [, imaxd]</synopsis></opcode>
<opcode><desc>Analyze an audio input and generate harmonizing voices in synchrony.</desc><synopsis>ares <opcodename>harmon</opcodename> asig, kestfrq, kmaxvar, kgenfreq1, kgenfreq2, imode, \
      iminfrq, iprd</synopsis></opcode>
<opcode><desc>Analyze an audio input and generate harmonizing voices in
      synchrony with formants preserved.</desc><synopsis>ares <opcodename>harmon2</opcodename> asig, koct, kfrq1, kfrq2, icpsmode, ilowest[, ipolarity]</synopsis><synopsis>ares <opcodename>harmon3</opcodename> asig, koct, kfrq1, \
    kfrq2, kfrq3, icpsmode, ilowest[, ipolarity]</synopsis><synopsis>ares <opcodename>harmon4</opcodename> asig, koct, kfrq1, \
    kfrq2, kfrq3, kfrq4, icpsmode, ilowest[, ipolarity]</synopsis></opcode>
<opcode><desc>First-order allpass filters arranged in a series.</desc><synopsis>ares <opcodename>phaser1</opcodename> asig, kfreq, kord, kfeedback [, iskip]</synopsis></opcode>
<opcode><desc>Second-order allpass filters arranged in a series.</desc><synopsis>ares <opcodename>phaser2</opcodename> asig, kfreq, kq, kord, kmode, ksep, kfeedback</synopsis></opcode>
</category>
<category name="Signal Modifiers:Standard Filters">
<opcode><desc>A hi-pass filter whose transfer functions are the complements of the</desc><synopsis>ares <opcodename>atone</opcodename> asig, khp [, iskip]</synopsis></opcode>
<opcode><desc>Emulates a stack of filters using the atone opcode.</desc><synopsis>ares <opcodename>atonex</opcodename> asig, khp [, inumlayer] [, iskip]</synopsis><synopsis>ares <opcodename>atonex</opcodename> asig, ahp [, inumlayer] [, iskip]</synopsis></opcode>
<opcode><desc>A sweepable general purpose biquadratic digital filter.</desc><synopsis>ares <opcodename>biquad</opcodename> asig, kb0, kb1, kb2, ka0, ka1, ka2 [, iskip]</synopsis></opcode>
<opcode><desc>A sweepable general purpose biquadratic digital filter with a-rate parameters.</desc><synopsis>ares <opcodename>biquada</opcodename> asig, ab0, ab1, ab2, aa0, aa1, aa2 [, iskip]</synopsis></opcode>
<opcode><desc>Same as the butterbp opcode.</desc><synopsis>ares <opcodename>butbp</opcodename> asig, kfreq, kband [, iskip]</synopsis></opcode>
<opcode><desc>Same as the butterbr opcode.</desc><synopsis>ares <opcodename>butbr</opcodename> asig, kfreq, kband [, iskip]</synopsis></opcode>
<opcode><desc>Same as the butterhp opcode.</desc><synopsis>ares <opcodename>buthp</opcodename> asig, kfreq [, iskip]</synopsis><synopsis>ares <opcodename>buthp</opcodename> asig, afreq [, iskip]</synopsis></opcode>
<opcode><desc>Same as the butterlp opcode.</desc><synopsis>ares <opcodename>butlp</opcodename> asig, kfreq [, iskip]</synopsis><synopsis>ares <opcodename>butlp</opcodename> asig, afreq [, iskip]</synopsis></opcode>
<opcode><desc>A band-pass Butterworth filter.</desc><synopsis>ares <opcodename>butterbp</opcodename> asig, xfreq, xband [, iskip]</synopsis></opcode>
<opcode><desc>A band-reject Butterworth filter.</desc><synopsis>ares <opcodename>butterbr</opcodename> asig, xfreq, xband [, iskip]</synopsis></opcode>
<opcode><desc>A high-pass Butterworth filter.</desc><synopsis>ares <opcodename>butterhp</opcodename> asig, kfreq [, iskip]</synopsis><synopsis>ares <opcodename>butterhp</opcodename> asig, afreq [, iskip]</synopsis></opcode>
<opcode><desc>A low-pass Butterworth filter.</desc><synopsis>ares <opcodename>butterlp</opcodename> asig, kfreq [, iskip]</synopsis><synopsis>ares <opcodename>butterlp</opcodename> asig, afreq [, iskip]</synopsis></opcode>
<opcode><desc>Implements low-pass and high-pass filters of different styles.</desc><synopsis>ares <opcodename>clfilt</opcodename> asig, kfreq, itype, inpol [, ikind] [, ipbr] [, isba] [, iskip]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of 4 pole diode ladder filter.</desc><synopsis>asig <opcodename>diode_ladder</opcodename> ain, xcf, xk [, inlp, isaturation, istor]</synopsis></opcode>
<opcode><desc>A fast and robust method for approximating sound propagation, achieving convincing Doppler shifts without having to solve equations.</desc><synopsis>ashifted <opcodename>doppler</opcodename> asource, ksourceposition, kmicposition [, isoundspeed, ifiltercutoff]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of Korg35 resonant high-pass filter.</desc><synopsis>asig <opcodename>K35_hpf</opcodename> ain, xcf, xQ [, inlp, isaturation, istor]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of Korg35 resonant low-pass filter.</desc><synopsis>asig <opcodename>K35_lpf</opcodename> ain, xcf, xQ [, inlp, isaturation, istor]</synopsis></opcode>
<opcode><desc>A median filter, a variant FIR lowpass filter.</desc><synopsis>ares <opcodename>median</opcodename> asig, ksize, imaxsize [, iskip]</synopsis></opcode>
<opcode><desc>A median filter, a variant FIR lowpass filter.</desc><synopsis>kres <opcodename>mediank</opcodename> kin, ksize, imaxsize [, iskip]</synopsis></opcode>
<opcode><desc>A filter that simulates a mass-spring-damper system</desc><synopsis>aout <opcodename>mode</opcodename> ain, xfreq, xQ [, iskip]</synopsis></opcode>
<opcode><desc>A first-order recursive low-pass filter with variable frequency response.</desc><synopsis>ares <opcodename>tone</opcodename> asig, khp [, iskip]</synopsis></opcode>
<opcode><desc>Emulates a stack of filters using the tone opcode.</desc><synopsis>ares <opcodename>tonex</opcodename>  asig, khp [, inumlayer] [, iskip]</synopsis><synopsis>ares <opcodename>tonex</opcodename>  asig, ahp [, inumlayer] [, iskip]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of 1 pole filter.</desc><synopsis>asig <opcodename>zdf_1pole</opcodename> ain, xcf [, kmode, istor]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of 1 pole filter with multimode output.</desc><synopsis>alp, ahp <opcodename>zdf_1pole_mode</opcodename> ain, xcf [, istor]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of 2 pole filter.</desc><synopsis>asig <opcodename>zdf_2pole</opcodename> ain, xcf, xQ [, kmode, istor]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of 2 pole filter with multimode output.</desc><synopsis>alp, abp, ahp <opcodename>zdf_2pole_mode</opcodename> ain, xcf, Q [, istor]</synopsis></opcode>
<opcode><desc>Zero-delay feedback implementation of 4 pole ladder filter.</desc><synopsis>asig <opcodename>zdf_ladder</opcodename> ain, xcf, xQ [, istor]</synopsis></opcode>
</category>
<category name="Signal Modifiers:Standard Filters:Resonant">
<opcode><desc>A notch filter whose transfer functions are the complements of
      the reson opcode.</desc><synopsis>ares <opcodename>areson</opcodename> asig, kcf, kbw [, iscl] [, iskip]</synopsis><synopsis>ares <opcodename>areson</opcodename> asig, acf, kbw [, iscl] [, iskip]</synopsis><synopsis>ares <opcodename>areson</opcodename> asig, kcf, abw [, iscl] [, iskip]</synopsis><synopsis>ares <opcodename>areson</opcodename> asig, acf, abw [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>A second-order multi-mode filter.</desc><synopsis>ares <opcodename>bqrez</opcodename> asig, xfco, xres [, imode] [, iskip]</synopsis></opcode>
<opcode><desc>A resonant lowpass filter.</desc><synopsis>ares <opcodename>lowpass2</opcodename> asig, kcf, kq [, iskip]</synopsis></opcode>
<opcode><desc>Another resonant lowpass filter.</desc><synopsis>ares <opcodename>lowres</opcodename> asig, xcutoff, xresonance [, iskip]</synopsis></opcode>
<opcode><desc>Simulates layers of serially connected resonant lowpass filters.</desc><synopsis>ares <opcodename>lowresx</opcodename> asig, xcutoff, xresonance [, inumlayer] [, iskip]</synopsis></opcode>
<opcode><desc>A 3-pole sweepable resonant lowpass filter.</desc><synopsis>ares <opcodename>lpf18</opcodename> asig, xfco, xres, xdist [, iskip]</synopsis></opcode>
<opcode><desc>Moog ladder lowpass filter.</desc><synopsis>asig <opcodename>moogladder</opcodename> ain, kcf, kres[, istor]</synopsis><synopsis>asig <opcodename>moogladder</opcodename> ain, acf, kres[, istor]</synopsis><synopsis>asig <opcodename>moogladder</opcodename> ain, kcf, ares[, istor]</synopsis><synopsis>asig <opcodename>moogladder</opcodename> ain, acf, ares[, istor]</synopsis></opcode>
<opcode><desc>Moog ladder lowpass filter.</desc><synopsis>asig <opcodename>moogladder2</opcodename> ain, kcf, kres[, istor]</synopsis><synopsis>asig <opcodename>moogladder2</opcodename> ain, acf, kres[, istor]</synopsis><synopsis>asig <opcodename>moogladder2</opcodename> ain, kcf, ares[, istor]</synopsis><synopsis>asig <opcodename>moogladder2</opcodename> ain, acf, ares[, istor]</synopsis></opcode>
<opcode><desc>A digital emulation of the Moog diode ladder filter configuration.</desc><synopsis>ares <opcodename>moogvcf</opcodename> asig, xfco, xres [,iscale, iskip]</synopsis></opcode>
<opcode><desc>A digital emulation of the Moog diode ladder filter configuration.</desc><synopsis>ares <opcodename>moogvcf2</opcodename> asig, xfco, xres [,iscale, iskip]</synopsis></opcode>
<opcode><desc>Moog voltage-controlled highpass filter emulation.</desc><synopsis>asig <opcodename>mvchpf</opcodename> ain, xcf[, istor]</synopsis></opcode>
<opcode><desc>Moog voltage-controlled lowpass filter emulation.</desc><synopsis>asig <opcodename>mvclpf1</opcodename> ain, xcf, xres[,istor]</synopsis></opcode>
<opcode><desc>Moog voltage-controlled lowpass filter emulation.</desc><synopsis>asig <opcodename>mvclpf2</opcodename> ain, xcf, xres[, istor]</synopsis></opcode>
<opcode><desc>Moog voltage-controlled lowpass filter emulation.</desc><synopsis>asig <opcodename>mvclpf3</opcodename> ain, xcf, xres[, istor]</synopsis></opcode>
<opcode><desc>Moog voltage-controlled lowpass filter emulation.</desc><synopsis>asig1,asig2,asig3,asig4 <opcodename>mvclpf4</opcodename> ain, xcf, xres[, istor]</synopsis></opcode>
<opcode><desc>A second-order resonant filter.</desc><synopsis>ares <opcodename>reson</opcodename> asig, xcf, xbw [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>A bandpass filter with variable frequency response.</desc><synopsis>ares <opcodename>resonr</opcodename> asig, xcf, xbw [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>Emulates a stack of filters using the reson opcode.</desc><synopsis>ares <opcodename>resonx</opcodename> asig, xcf, xbw [, inumlayer] [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>A bank of second-order bandpass filters, connected in parallel.</desc><synopsis>ares <opcodename>resony</opcodename> asig, kbf, kbw, inum, ksep [, isepmode] [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>A bandpass filter with variable frequency response.</desc><synopsis>ares <opcodename>resonz</opcodename> asig, xcf, xbw [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>A resonant low-pass filter.</desc><synopsis>ares <opcodename>rezzy</opcodename> asig, xfco, xres [, imode, iskip]</synopsis></opcode>
<opcode><desc>State-variable filter.</desc><synopsis>ahp,alp,abp,abr <opcodename>statevar</opcodename> ain, xcf, xq [, iosamps, istor]</synopsis></opcode>
<opcode><desc>A resonant second order filter, with simultaneous lowpass, highpass and bandpass outputs.</desc><synopsis>alow, ahigh, aband <opcodename>svfilter</opcodename>  asig, kcf, kq [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>Models some of the filter characteristics of a Roland TB303 voltage-controlled filter.</desc><synopsis>ares <opcodename>tbvcf</opcodename> asig, xfco, xres, kdist, kasym [, iskip]</synopsis></opcode>
<opcode><desc>A bank of filters in which the cutoff frequency can be separated under user control.</desc><synopsis>ares <opcodename>vlowres</opcodename> asig, kfco, kres, iord, ksep</synopsis></opcode>
</category>
<category name="Signal Modifiers:Standard Filters:Control">
<opcode><desc>A notch filter whose transfer functions are the complements of the reson opcode.</desc><synopsis>kres <opcodename>aresonk</opcodename> ksig, kcf, kbw [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>A hi-pass filter whose transfer functions are the complements of the</desc><synopsis>kres <opcodename>atonek</opcodename> ksig, khp [, iskip]</synopsis></opcode>
<opcode><desc>Generate glissandos starting from a control signal.</desc><synopsis>kres <opcodename>lineto</opcodename> ksig, ktime</synopsis></opcode>
<opcode><desc>Applies portamento to a step-valued control signal.</desc><synopsis>kres <opcodename>port</opcodename> ksig, ihtim [, isig]</synopsis></opcode>
<opcode><desc>Applies portamento to a step-valued control signal.</desc><synopsis>kres <opcodename>portk</opcodename> ksig, khtim [, isig]</synopsis></opcode>
<opcode><desc>A second-order resonant filter.</desc><synopsis>kres <opcodename>resonk</opcodename> ksig, kcf, kbw [, iscl] [, iskip]</synopsis></opcode>
<opcode><desc>Control signal resonant filter stack.</desc><synopsis>kres <opcodename>resonxk</opcodename> ksig, kcf, kbw[, inumlayer, iscl, istor]</synopsis></opcode>
<opcode><desc>Exponential Lag</desc><synopsis>aout <opcodename>sc_lag</opcodename> ain, klagtime [, initialvalue=0]</synopsis><synopsis>kout <opcodename>sc_lag</opcodename> kin, klagtime [, initialvalue=0]</synopsis></opcode>
<opcode><desc>Exponential Lag</desc><synopsis>aout <opcodename>sc_lagud</opcodename> ain, klagup, klagdown</synopsis><synopsis>kout <opcodename>sc_lagud</opcodename> kin, klagup, klagdown</synopsis></opcode>
<opcode><desc>Timed trigger</desc><synopsis>aout <opcodename>sc_trig</opcodename> ain, kdur</synopsis><synopsis>kout <opcodename>sc_trig</opcodename> kin, kdur</synopsis></opcode>
<opcode><desc>Generate glissandos starting from a control signal.</desc><synopsis>kres <opcodename>tlineto</opcodename> ksig, ktime, ktrig</synopsis></opcode>
<opcode><desc>A first-order recursive low-pass filter with variable frequency response.</desc><synopsis>kres <opcodename>tonek</opcodename> ksig, khp [, iskip]</synopsis></opcode>
</category>
<category name="Signal Modifiers:Specialized Filters">
<opcode><desc>A DC blocking filter.</desc><synopsis>ares <opcodename>dcblock</opcodename> ain [, igain]</synopsis></opcode>
<opcode><desc>A DC blocking filter.</desc><synopsis>ares <opcodename>dcblock2</opcodename> ain [, iorder] [, iskip]</synopsis></opcode>
<opcode><desc>Equalizer filter</desc><synopsis>asig <opcodename>eqfil</opcodename> ain, kcf, kbw, kgain[, istor]</synopsis></opcode>
<opcode><desc>A non-linear filter system to excite the signal.</desc><synopsis>ares <opcodename>exciter</opcodename> asig, kfreq, kceil, kharmonics, kblend</synopsis></opcode>
<opcode><desc>Performs filtering using a transposed form-II digital filter lattice with no time-varying control.</desc><synopsis>ares <opcodename>filter2</opcodename> asig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN</synopsis><synopsis>kres <opcodename>filter2</opcodename> ksig, iM, iN, ib0, ib1, ..., ibM, ia1, ia2, ..., iaN</synopsis></opcode>
<opcode><desc>AM/FM analysis from quadrature signal.</desc><synopsis>am, af <opcodename>fmanal</opcodename> are, aim</synopsis></opcode>
<opcode><desc>Formant filter.</desc><synopsis>asig <opcodename>fofilter</opcodename> ain, xcf, xris, xdec[, istor]</synopsis></opcode>
<opcode><desc>A Hilbert transformer.</desc><synopsis>ar1, ar2 <opcodename>hilbert</opcodename> asig</synopsis></opcode>
<opcode><desc>A Hilbert rransformer.</desc><synopsis>ar1, ar2 <opcodename>hilbert2</opcodename> asig, ifftsize, ihopsize</synopsis></opcode>
<opcode><desc>A filter with a non-linear effect.</desc><synopsis>ares <opcodename>nlfilt</opcodename> ain, ka, kb, kd, kC, kL</synopsis></opcode>
<opcode><desc>A filter with a non-linear effect and blowup protection.</desc><synopsis>ares <opcodename>nlfilt2</opcodename> ain, ka, kb, kd, kC, kL</synopsis></opcode>
<opcode><desc>Implementation of Zoelzer's parametric equalizer filters.</desc><synopsis>ares <opcodename>pareq</opcodename> asig, kc, kv, kq [, imode] [, iskip]</synopsis></opcode>
<opcode><desc>Parametric equalizer and filter opcode with 7 filter types, based
      on algorithm by Robert Bristow-Johnson.</desc><synopsis>ar <opcodename>rbjeq</opcodename> asig, kfco, klvl, kQ, kS[, imode]</synopsis></opcode>
<opcode><desc>Performs filtering using a transposed form-II digital filter lattice with radial pole-shearing and angular pole-warping.</desc><synopsis>ares <opcodename>zfilter2</opcodename> asig, kdamp, kfreq, iM, iN, ib0, ib1, ..., ibM, \
      ia1,ia2, ..., iaN</synopsis></opcode>
</category>
<category name="Signal Modifiers:Waveguides">
<opcode><desc>A simple waveguide model consisting of one delay-line and one first-order lowpass filter.</desc><synopsis>ares <opcodename>wguide1</opcodename> asig, xfreq, kcutoff, kfeedback</synopsis></opcode>
<opcode><desc>A model of beaten plate consisting of two parallel delay-lines and two first-order lowpass filters.</desc><synopsis>ares <opcodename>wguide2</opcodename> asig, xfreq1, xfreq2, kcutoff1, kcutoff2, \
      kfeedback1, kfeedback2</synopsis></opcode>
</category>
<category name="Signal Modifiers:Waveshaping">
<opcode><desc>Efficiently evaluates the sum of Chebyshev polynomials of arbitrary order.</desc><synopsis>aout <opcodename>chebyshevpoly</opcodename> ain, k0 [, k1 [, k2 [...]]]</synopsis></opcode>
<opcode><desc>Performs linear clipping on an audio signal or a phasor.</desc><synopsis>aout <opcodename>pdclip</opcodename> ain, kWidth, kCenter [, ibipolar [, ifullscale]]</synopsis></opcode>
<opcode><desc>Distorts a phasor for reading the two halves of a table at different rates.</desc><synopsis>aout <opcodename>pdhalf</opcodename> ain, kShapeAmount [, ibipolar [, ifullscale]]</synopsis></opcode>
<opcode><desc>Distorts a phasor for reading two unequal portions of a table in equal periods.</desc><synopsis>aout <opcodename>pdhalfy</opcodename> ain, kShapeAmount [, ibipolar [, ifullscale]]</synopsis></opcode>
<opcode><desc>Waveshapes a signal by raising it to a variable exponent.</desc><synopsis>aout <opcodename>powershape</opcodename> ain, kShapeAmount [, ifullscale]</synopsis></opcode>
</category>
<category name="Signal Modifiers:Comparators and Accumulators">
<opcode><desc>Compares audio signals or arrays</desc><synopsis>aout <opcodename>cmp</opcodename> a1, S_operator, a2</synopsis><synopsis>aout <opcodename>cmp</opcodename> a1, S_operator, kx</synopsis><synopsis>kOut[] <opcodename>cmp</opcodename> kA, S_operator, kB</synopsis><synopsis>kOut[] <opcodename>cmp</opcodename> k1, S_operator1, kIn[], S_operator2, k2</synopsis></opcode>
<opcode><desc>Produces a signal that is the maximum of any number of input signals.</desc><synopsis>amax <opcodename>max</opcodename> ain1, ain2 [, ain3] [, ain4] [...]</synopsis><synopsis>kmax <opcodename>max</opcodename> kin1, kin2 [, kin3] [, kin4] [...]</synopsis><synopsis>imax <opcodename>max</opcodename> iin1, iin2 [, iin3] [, iin4] [...]</synopsis></opcode>
<opcode><desc>Local maximum (or minimum) value of an incoming asig signal</desc><synopsis>knumkout <opcodename>max_k</opcodename> asig, ktrig, itype</synopsis></opcode>
<opcode><desc>Produces a signal that is the maximum of the absolute values of any number of input signals.</desc><synopsis>amax <opcodename>maxabs</opcodename> ain1, ain2 [, ain3] [, ain4] [...]</synopsis><synopsis>kmax <opcodename>maxabs</opcodename> kin1, kin2 [, kin3] [, kin4] [...]</synopsis></opcode>
<opcode><desc>Accumulates the maximum of the absolute values of audio signals.</desc><synopsis><opcodename>maxabsaccum</opcodename> aAccumulator, aInput</synopsis></opcode>
<opcode><desc>Accumulates the maximum value of audio signals.</desc><synopsis><opcodename>maxaccum</opcodename> aAccumulator, aInput</synopsis></opcode>
<opcode><desc>Produces a signal that is the minimum of any number of input signals.</desc><synopsis>amin <opcodename>min</opcodename> ain1, ain2 [, ain3] [, ain4] [...]</synopsis><synopsis>kmin <opcodename>min</opcodename> kin1, kin2 [, kin3] [, kin4] [...]</synopsis><synopsis>imin <opcodename>min</opcodename> iin1, iin2 [, iin3] [, iin4] [...]</synopsis></opcode>
<opcode><desc>Produces a signal that is the minimum of the absolute values of any number of input signals.</desc><synopsis>amin <opcodename>minabs</opcodename> ain1, ain2 [, ain3] [, ain4] [...]</synopsis><synopsis>kmin <opcodename>minabs</opcodename> kin1, kin2 [, kin3] [, kin4] [...]</synopsis></opcode>
<opcode><desc>Accumulates the minimum of the absolute values of audio signals.</desc><synopsis><opcodename>minabsaccum</opcodename> aAccumulator, aInput</synopsis></opcode>
<opcode><desc>Accumulates the minimum value of audio signals.</desc><synopsis><opcodename>minaccum</opcodename> aAccumulator, aInput</synopsis></opcode>
</category>
<category name="Instrument Control:Clock Control">
<opcode><desc>Stops one of a number of internal clocks.</desc><synopsis><opcodename>clockoff</opcodename> inum</synopsis></opcode>
<opcode><desc>Starts one of a number of internal clocks.</desc><synopsis><opcodename>clockon</opcodename> inum</synopsis></opcode>
</category>
<category name="Instrument Control:Conditional Values">
<opcode><desc>Compares two values for equality.</desc><synopsis>(a <opcodename>==</opcodename> b <opcodename>?</opcodename> v1 <opcodename>:</opcodename> v2)</synopsis></opcode>
<opcode><desc>Determines if one value is greater than or equal to another.</desc><synopsis>(a <opcodename>&gt;=</opcodename> b <opcodename>?</opcodename> v1 <opcodename>:</opcodename> v2)</synopsis></opcode>
<opcode><desc>Determines if one value is greater than another.</desc><synopsis>(a <opcodename>&gt;</opcodename>  b <opcodename>?</opcodename> v1 <opcodename>:</opcodename> v2)</synopsis></opcode>
<opcode><desc>Determines if one value is less than or equal to another.</desc><synopsis>(a <opcodename>&lt;=</opcodename> b <opcodename>?</opcodename> v1 <opcodename>:</opcodename> v2)</synopsis></opcode>
<opcode><desc>Determines if one value is less than another.</desc><synopsis>(a <opcodename>&lt;</opcodename>  b <opcodename>?</opcodename> v1 <opcodename>:</opcodename> v2)</synopsis></opcode>
<opcode><desc>Determines if one value is not equal to another.</desc><synopsis>(a <opcodename>!=</opcodename> b <opcodename>?</opcodename> v1 <opcodename>:</opcodename> v2)</synopsis></opcode>
</category>
<category name="Instrument Control:Compilation">
<opcode><desc>compiles a new orchestra from an ASCII file</desc><synopsis>ires <opcodename>compilecsd</opcodename> Sfilename</synopsis></opcode>
<opcode><desc>compiles a new orchestra from an ASCII file</desc><synopsis>ires <opcodename>compileorc</opcodename> Sfilename</synopsis></opcode>
<opcode><desc>compiles a new orchestra passed in as an ASCII string</desc><synopsis>ires <opcodename>compilestr</opcodename> Sorch</synopsis></opcode>
<opcode><desc>Evalstrs evaluates a string containing Csound code, returning a value.</desc><synopsis>ires <opcodename>evalstr</opcodename> Scode </synopsis><synopsis>kres <opcodename>evalstr</opcodename> Scode, ktrig </synopsis></opcode>
<opcode><desc>Returns a value from an instrument.</desc><synopsis><opcodename>return</opcodename> ival </synopsis></opcode>
</category>
<category name="Instrument Control:Duration Control">
<opcode><desc>Creates a held note.</desc><synopsis><opcodename>ihold</opcodename></synopsis></opcode>
<opcode><desc>Enables an instrument to turn itself off or to turn an instance of another instrument off.</desc><synopsis><opcodename>turnoff</opcodename></synopsis><synopsis><opcodename>turnoff</opcodename> inst</synopsis><synopsis><opcodename>turnoff</opcodename> knst</synopsis></opcode>
<opcode><desc>Turn off instance(s) of other instruments at performance time.</desc><synopsis><opcodename>turnoff2</opcodename> kinsno, kmode, krelease
    </synopsis></opcode>
<opcode><desc>Activate an instrument for an indefinite time.</desc><synopsis><opcodename>turnon</opcodename> insnum [, itime]</synopsis></opcode>
</category>
<category name="Instrument Control:Invocation">
<opcode><desc>Generates a score event from an instrument.</desc><synopsis><opcodename>event</opcodename> &quot;scorechar&quot;, kinsnum, kdelay, kdur, [, kp4] [, kp5] [, ...]</synopsis><synopsis><opcodename>event</opcodename> &quot;scorechar&quot;, &quot;insname&quot;, kdelay, kdur, [, kp4] [, kp5] [, ...]</synopsis></opcode>
<opcode><desc>Generates a score event from an instrument.</desc><synopsis><opcodename>event_i</opcodename> &quot;scorechar&quot;, iinsnum, idelay, idur, [, ip4] [, ip5] [, ...]</synopsis><synopsis><opcodename>event_i</opcodename> &quot;scorechar&quot;, &quot;insname&quot;, idelay, idur, [, ip4] [, ip5] [, ...]</synopsis></opcode>
<opcode><desc>Mutes/unmutes new instances of a given instrument.</desc><synopsis><opcodename>mute</opcodename> insnum [, iswitch]</synopsis><synopsis><opcodename>mute</opcodename> &quot;insname&quot; [, iswitch]</synopsis></opcode>
<opcode><desc>Schedules a new instrument instance, storing the instance handle in a variable.</desc><synopsis>iHandle <opcodename>nstance</opcodename> insnum, iwhen, idur [, ip4] [, ip5] [...]</synopsis><synopsis>iHandle <opcodename>nstance</opcodename> &quot;insname&quot;, iwhen, idur [, ip4] [, ip5] [...]</synopsis></opcode>
<opcode><desc>Read, preprocess and schedule a score from an input string.</desc><synopsis><opcodename>readscore</opcodename> Sin </synopsis></opcode>
<opcode><desc>Removes the definition of an instrument.</desc><synopsis><opcodename>remove</opcodename> insnum</synopsis></opcode>
<opcode><desc>Adds a new score event generated by a k-rate trigger.</desc><synopsis><opcodename>schedkwhen</opcodename> ktrigger, kmintim, kmaxnum, kinsnum, kwhen, kdur \
      [, ip4] [, ip5] [...]</synopsis><synopsis><opcodename>schedkwhen</opcodename> ktrigger, kmintim, kmaxnum, &quot;insname&quot;, kwhen, kdur \
      [, ip4] [, ip5] [...]</synopsis></opcode>
<opcode><desc>Similar to schedkwhen but uses a named instrument at init-time.</desc><synopsis><opcodename>schedkwhennamed</opcodename> ktrigger, kmintim, kmaxnum, &quot;name&quot;, kwhen, kdur \
      [, ip4] [, ip5] [...]</synopsis></opcode>
<opcode><desc>Adds a new score event.</desc><synopsis><opcodename>schedule</opcodename> insnum, iwhen, idur [, ip4] [, ip5] [...]</synopsis><synopsis><opcodename>schedule</opcodename> &quot;insname&quot;, iwhen, idur [, ip4] [, ip5] [...]</synopsis></opcode>
<opcode><desc>Adds a new score event.</desc><synopsis><opcodename>schedwhen</opcodename> ktrigger, kinsnum, kwhen, kdur [, ip4] [, ip5] [...]</synopsis><synopsis><opcodename>schedwhen</opcodename> ktrigger, &quot;insname&quot;, kwhen, kdur [, ip4] [, ip5] [...]</synopsis></opcode>
<opcode><desc>Issues one or more score line events from an instrument.</desc><synopsis><opcodename>scoreline</opcodename> Sin, ktrig</synopsis></opcode>
<opcode><desc>Issues one or more score line events from an instrument at i-time.</desc><synopsis><opcodename>scoreline_i</opcodename> Sin</synopsis></opcode>
</category>
<category name="Instrument Control:Program Flow Control">
<opcode><desc>Conditionally transfer control on every pass.</desc><synopsis><opcodename>cggoto</opcodename> condition, label</synopsis></opcode>
<opcode><desc>Conditionally transfer control during the i-time pass.</desc><synopsis><opcodename>cigoto</opcodename> condition, label</synopsis></opcode>
<opcode><desc>Conditionally transfer control during the p-time passes.</desc><synopsis><opcodename>ckgoto</opcodename> condition, label</synopsis></opcode>
<opcode><desc>Transfers control on every pass when a condition is not true.</desc><synopsis><opcodename>cngoto</opcodename> condition, label</synopsis></opcode>
<opcode><desc>Executes a block of code when an &quot;if...then&quot; condition is false.</desc><synopsis><opcodename>else</opcodename></synopsis></opcode>
<opcode><desc>Defines another &quot;if...then&quot; condition when a &quot;if...then&quot; condition is false.</desc><synopsis><opcodename>elseif</opcodename> xa R xb <opcodename>then</opcodename></synopsis></opcode>
<opcode><desc>Closes a block of code that begins with an &quot;if...then&quot; statement.</desc><synopsis><opcodename>endif</opcodename></synopsis></opcode>
<opcode><desc>Transfer control on every pass.</desc><synopsis><opcodename>goto</opcodename> label</synopsis></opcode>
<opcode><desc>Branches conditionally at initialization or during performance time.</desc><synopsis><opcodename>if</opcodename> ia R ib <opcodename>igoto</opcodename> label</synopsis><synopsis><opcodename>if</opcodename> ka R kb <opcodename>kgoto</opcodename> label</synopsis><synopsis><opcodename>if</opcodename> xa R xb <opcodename>goto</opcodename> label</synopsis><synopsis><opcodename>if</opcodename> xa R xb <opcodename>then</opcodename></synopsis></opcode>
<opcode><desc>Transfer control during the i-time pass.</desc><synopsis><opcodename>igoto</opcodename> label</synopsis></opcode>
<opcode><desc>Transfer control during the performance-time passes.</desc><synopsis><opcodename>kgoto</opcodename> label</synopsis></opcode>
<opcode><desc>Looping constructions.</desc><synopsis><opcodename>loop_ge</opcodename>  indx, idecr, imin, label</synopsis><synopsis><opcodename>loop_ge</opcodename>  kndx, kdecr, kmin, label</synopsis></opcode>
<opcode><desc>Looping constructions.</desc><synopsis><opcodename>loop_gt</opcodename>  indx, idecr, imin, label</synopsis><synopsis><opcodename>loop_gt</opcodename>  kndx, kdecr, kmin, label</synopsis></opcode>
<opcode><desc>Looping constructions.</desc><synopsis><opcodename>loop_le</opcodename>  indx, incr, imax, label</synopsis><synopsis><opcodename>loop_le</opcodename>  kndx, kncr, kmax, label</synopsis></opcode>
<opcode><desc>Looping constructions.</desc><synopsis><opcodename>loop_lt</opcodename>  indx, incr, imax, label</synopsis><synopsis><opcodename>loop_lt</opcodename>  kndx, kncr, kmax, label</synopsis></opcode>
<opcode><desc>Transfer control at i-time when a new note is being tied onto a previously held note</desc><synopsis><opcodename>tigoto</opcodename> label</synopsis></opcode>
<opcode><desc>Conditional branch during p-time depending on elapsed note time.</desc><synopsis><opcodename>timout</opcodename> istrt, idur, label</synopsis></opcode>
<opcode><desc>A syntactic looping construction.</desc><synopsis><opcodename>until</opcodename>  condition <opcodename>do</opcodename>
    ... <opcodename>od</opcodename></synopsis></opcode>
<opcode><desc>A syntactic looping construction.</desc><synopsis><opcodename>while</opcodename>  condition <opcodename>do</opcodename>
    ... <opcodename>od</opcodename></synopsis></opcode>
</category>
<category name="Instrument Control:Realtime Performance Control">
<opcode><desc>Returns the number of active instances of an instrument.</desc><synopsis>ir <opcodename>active</opcodename> insnum [,iopt [,inorel]]</synopsis><synopsis>ir <opcodename>active</opcodename> Sinsname [,iopt [,inorel]]</synopsis><synopsis>kres <opcodename>active</opcodename> kinsnum [,iopt [,inorel]]</synopsis></opcode>
<opcode><desc>Reports the usage of cpu either total or per core.</desc><synopsis>ktot[,kcpu1, kcpu2,...]<opcodename>cpumeter</opcodename> ifreq</synopsis></opcode>
<opcode><desc>Control allocation of cpu resources on a per-instrument basis, to optimize realtime output.</desc><synopsis><opcodename>cpuprc</opcodename> insnum, ipercent</synopsis><synopsis><opcodename>cpuprc</opcodename> Sinsname, ipercent</synopsis></opcode>
<opcode><desc>Exit Csound as fast as possible, with no cleaning up.</desc><synopsis><opcodename>exitnow</opcodename> [ivalue]</synopsis></opcode>
<opcode><desc>Start/stop jack_transport and can optionally relocate the playback head.</desc><synopsis><opcodename>jacktransport</opcodename> icommand [, ilocation]</synopsis></opcode>
<opcode><desc>Limits the number of allocations of an instrument.</desc><synopsis><opcodename>maxalloc</opcodename> insnum, icount</synopsis><synopsis><opcodename>maxalloc</opcodename> Sinsname, icount</synopsis></opcode>
<opcode><desc>Creates space for instruments but does not run them.</desc><synopsis><opcodename>prealloc</opcodename> insnum, icount</synopsis><synopsis><opcodename>prealloc</opcodename> &quot;insname&quot;, icount</synopsis></opcode>
</category>
<category name="Instrument Control:Initialization and Reinitialization">
<opcode><desc>Performs a simple assignment.</desc><synopsis>ares <opcodename>=</opcodename> xarg</synopsis><synopsis>ires <opcodename>=</opcodename> iarg</synopsis><synopsis>kres <opcodename>=</opcodename> karg</synopsis><synopsis>ires, ... <opcodename>=</opcodename> iarg, ...</synopsis><synopsis>kres, ... <opcodename>=</opcodename> karg, ...</synopsis><synopsis>table [ kval] <opcodename>=</opcodename> karg</synopsis></opcode>
<opcode><desc>Puts the value of the i-time expression into a k-, a-rate or t- variable.</desc><synopsis>ares <opcodename>init</opcodename> iarg</synopsis><synopsis>ires <opcodename>init</opcodename> iarg</synopsis><synopsis>kres <opcodename>init</opcodename> iarg</synopsis><synopsis>ares, ...  <opcodename>init</opcodename> iarg, ...</synopsis><synopsis>ires, ... <opcodename>init</opcodename> iarg, ...</synopsis><synopsis>kres, ... <opcodename>init</opcodename> iarg, ...</synopsis><synopsis>tab <opcodename>init</opcodename> isize[, ival]</synopsis></opcode>
<opcode><desc>Returns the number of a named instrument.</desc><synopsis>insno <opcodename>nstrnum</opcodename> &quot;name&quot;</synopsis></opcode>
<opcode><desc>Show the value in a given p-field.</desc><synopsis><opcodename>p</opcodename>(x) </synopsis></opcode>
<opcode><desc>Assigns a range of p-fields to ivariables.</desc><synopsis> ivar1, ... <opcodename>passign</opcodename> [istart][, iend</synopsis><synopsis> iarray <opcodename>passign</opcodename> [istart][, iend</synopsis><synopsis> karray <opcodename>passign</opcodename> [istart][, iend</synopsis></opcode>
<opcode><desc>Performs add and assignment.</desc><synopsis>ares <opcodename>+=</opcodename> xarg</synopsis><synopsis>ires <opcodename>+=</opcodename> iarg</synopsis><synopsis>kres <opcodename>+=</opcodename> karg</synopsis><synopsis>table [ kval] <opcodename>+=</opcodename> karg</synopsis></opcode>
<opcode><desc>Defines and initializes numeric arrays at orchestra load time.</desc><synopsis><opcodename>pset</opcodename> icon1 [, icon2] [...]</synopsis></opcode>
<opcode><desc>Suspends a performance while a special initialization pass is executed.</desc><synopsis><opcodename>reinit</opcodename> label</synopsis></opcode>
<opcode><desc>Transfers control during a reinit pass.</desc><synopsis><opcodename>rigoto</opcodename> label</synopsis></opcode>
<opcode><desc>Terminates a reinit pass.</desc><synopsis><opcodename>rireturn</opcodename></synopsis></opcode>
<opcode><desc>Puts the value of the instrument's internal</desc><synopsis>ir <opcodename>tival</opcodename></synopsis></opcode>
</category>
<category name="Instrument Control:Sensing and Control">
<opcode><desc>Sense on-screen controls.</desc><synopsis>kres <opcodename>button</opcodename> knum</synopsis></opcode>
<opcode><desc>k-rate signal change detector.</desc><synopsis>ktrig <opcodename>changed</opcodename> kvar1 [, kvar2,..., kvarN]</synopsis></opcode>
<opcode><desc>k-rate signal change detector.</desc><synopsis>ktrig <opcodename>changed2</opcodename> kvar1 [, kvar2,..., kvarN]</synopsis><synopsis>ktrig <opcodename>changed2</opcodename> karr[]</synopsis><synopsis>ktrig <opcodename>changed2</opcodename> aarr[]</synopsis></opcode>
<opcode><desc>Sense on-screen controls.</desc><synopsis>kres <opcodename>checkbox</opcodename> knum</synopsis></opcode>
<opcode><desc>Configurable slider controls for realtime user input.</desc><synopsis>kres <opcodename>control</opcodename> knum</synopsis></opcode>
<opcode><desc>Envelope follower unit generator.</desc><synopsis>ares <opcodename>follow</opcodename> asig, idt</synopsis></opcode>
<opcode><desc>Another controllable envelope extractor.</desc><synopsis>ares <opcodename>follow2</opcodename> asig, katt, krel</synopsis></opcode>
<opcode><desc>Return Csound settings.</desc><synopsis>Svalue <opcodename>getcfg</opcodename> iopt</synopsis></opcode>
<opcode><desc>Reads data from a joystick controller.</desc><synopsis>kres <opcodename>joystick</opcodename> kdevice ktab</synopsis></opcode>
<opcode><desc>Trigger Metronome</desc><synopsis>ktrig  <opcodename>metro</opcodename>  kfreq [, initphase]</synopsis></opcode>
<opcode><desc>Returns the playback status of MIDI file input.</desc><synopsis>ksig  <opcodename>midifilestatus</opcodename></synopsis></opcode>
<opcode><desc>Returns the current tempo at k-rate, of either the MIDI file (if available) or the score</desc><synopsis>ksig  <opcodename>miditempo</opcodename></synopsis></opcode>
<opcode><desc>Reads data from a P5 Glove controller.</desc><synopsis><opcodename>p5gconnect</opcodename></synopsis></opcode>
<opcode><desc>Reads data fields from an external P5 Glove.</desc><synopsis>kres <opcodename>p5gdata</opcodename> kcontrol</synopsis></opcode>
<opcode><desc>Returns the number of pfields belonging to a note event.</desc><synopsis>icount <opcodename>pcount</opcodename></synopsis></opcode>
<opcode><desc>Maintains the output equal to the highest absolute value received.</desc><synopsis>kres <opcodename>peak</opcodename> asig</synopsis><synopsis>kres <opcodename>peak</opcodename> ksig</synopsis></opcode>
<opcode><desc>Returns the value of a specified pfield.</desc><synopsis>ivalue <opcodename>pindex</opcodename> ipfieldIndex</synopsis></opcode>
<opcode><desc>Tracks the pitch of a signal.</desc><synopsis>koct, kamp <opcodename>pitch</opcodename> asig, iupdte, ilo, ihi, idbthresh [, ifrqs] [, iconf] \
      [, istrt] [, iocts] [, iq] [, inptls] [, irolloff] [, iskip]</synopsis></opcode>
<opcode><desc>Follows the pitch of a signal based on the AMDF method.</desc><synopsis>kcps, krms <opcodename>pitchamdf</opcodename> asig, imincps, imaxcps [, icps] [, imedi] \
      [, idowns] [, iexcps] [, irmsmedi]</synopsis></opcode>
<opcode><desc>Tracks the pitch of a signal.</desc><synopsis>acps, alock <opcodename>plltrack</opcodename> asig, kd [, kloopf, kloopq, klf, khf, kthresh]</synopsis></opcode>
<opcode><desc>Tracks the pitch of a signal.</desc><synopsis>kcps, kamp <opcodename>ptrack</opcodename> asig, ihopsize[,ipeaks]</synopsis></opcode>
<opcode><desc>returns a value stored in the instance of an instrument.</desc><synopsis>ival <opcodename>readscratch</opcodename>[index]</synopsis></opcode>
<opcode><desc>Rewinds the playback position of the current score performance.</desc><synopsis> <opcodename>rewindscore</opcodename></synopsis></opcode>
<opcode><desc>Determines the root-mean-square amplitude of an audio signal.</desc><synopsis>kres <opcodename>rms</opcodename> asig [, ihp] [, iskip]</synopsis></opcode>
<opcode><desc>Returns the ASCII code of a key that has been pressed.</desc><synopsis>kres[, kkeydown] <opcodename>sensekey</opcodename></synopsis></opcode>
<opcode><desc>Generates a trigger signal according to the values stored in a table.</desc><synopsis>ktrig_out <opcodename>seqtime</opcodename> ktime_unit, kstart, kloop, kinitndx, kfn_times</synopsis></opcode>
<opcode><desc>Generates a trigger signal according to the values stored in a table.</desc><synopsis>ktrig_out <opcodename>seqtime2</opcodename> ktrig_in, ktime_unit, kstart, kloop, kinitndx, kfn_times</synopsis></opcode>
<opcode><desc>Configurable slider controls for realtime user input.</desc><synopsis><opcodename>setctrl</opcodename> inum, ival, itype</synopsis></opcode>
<opcode><desc>Sets the playback position of the current score performance to a given position.</desc><synopsis> <opcodename>setscorepos</opcodename> ipos</synopsis></opcode>
<opcode><desc>Split a trigger signal</desc><synopsis><opcodename>splitrig</opcodename> ktrig, kndx, imaxtics, ifn, kout1 [,kout2,...,koutN]</synopsis></opcode>
<opcode><desc>Estimate the tempo of beat patterns in a control signal.</desc><synopsis>ktemp <opcodename>tempest</opcodename> kin, iprd, imindur, imemdur, ihp, ithresh, ihtim, ixfdbak, \
      istartempo, ifn [, idisprd] [, itweek]</synopsis></opcode>
<opcode><desc>Apply tempo control to an uninterpreted score.</desc><synopsis><opcodename>tempo</opcodename> ktempo, istartempo</synopsis></opcode>
<opcode><desc>Reads the current value of the tempo.</desc><synopsis>kres <opcodename>tempoval</opcodename></synopsis></opcode>
<opcode><desc>Time Variant Sequencer</desc><synopsis>ktrig  <opcodename>timedseq</opcodename>  ktimpnt, ifn, kp1 [,kp2, kp3, ...,kpN]</synopsis></opcode>
<opcode><desc>Informs when a krate signal crosses a threshold.</desc><synopsis>kout <opcodename>trigger</opcodename> ksig, kthreshold, kmode</synopsis></opcode>
<opcode><desc>Accepts a trigger signal as input and outputs a group of values.</desc><synopsis><opcodename>trigseq</opcodename> ktrig_in, kstart, kloop, kinitndx, kfn_values, kout1 [, kout2] [...]</synopsis></opcode>
<opcode><desc>Envelope follower unit generator.</desc><synopsis>ares <opcodename>vactrol</opcodename> asig [iup, idown]</synopsis></opcode>
<opcode><desc>Reads data from a number of external Nintendo Wiimote controllers.</desc><synopsis>ires <opcodename>wiiconnect</opcodename> [itimeout, imaxnum]</synopsis></opcode>
<opcode><desc>Reads data fields from a number of external Nintendo Wiimote controllers.</desc><synopsis>kres <opcodename>wiidata</opcodename> kcontrol[, knum]</synopsis></opcode>
<opcode><desc>Sets scaling and range limits for certain Wiimote fields.</desc><synopsis> <opcodename>wiirange</opcodename> icontrol, iminimum, imaximum[, inum]</synopsis></opcode>
<opcode><desc>Sends data to one of a number of external Nintendo Wiimote controllers.</desc><synopsis>kres <opcodename>wiisend</opcodename> kcontrol, kvalue[, knum]</synopsis></opcode>
<opcode><desc>writes a value into the scratchpad of the instance of an instrument.</desc><synopsis><opcodename>writescratch</opcodename>ival[, index]</synopsis></opcode>
<opcode><desc>Sense the cursor position in an output window</desc><synopsis>kx, ky <opcodename>xyin</opcodename> iprd, ixmin, ixmax, iymin, iymax [, ixinit] [, iyinit]</synopsis></opcode>
</category>
<category name="Instrument Control:Stacks">
<opcode><desc>Pops values from the global stack.  Deprecated.</desc><synopsis>xval1, [xval2, ... , xval31] <opcodename>pop</opcodename></synopsis><synopsis>ival1, [ival2, ... , ival31] <opcodename>pop</opcodename></synopsis></opcode>
<opcode><desc>Pops an f-sig frame from the global stack.  Deprecated.</desc><synopsis>fsig <opcodename>pop_f</opcodename></synopsis></opcode>
<opcode><desc>Pushes a value into the global stack.  Deprecated.</desc><synopsis><opcodename>push</opcodename>  xval1, [xval2, ... , xval31]</synopsis><synopsis><opcodename>push</opcodename>  ival1, [ival2, ... , ival31]</synopsis></opcode>
<opcode><desc>Pushes an f-sig frame into the global stack.  Deprecated.</desc><synopsis><opcodename>push_f</opcodename>  fsig</synopsis></opcode>
<opcode><desc>Initializes the stack.  Deprecated.</desc><synopsis><opcodename>stack</opcodename>  iStackSize</synopsis></opcode>
</category>
<category name="Instrument Control:Subinstrument Control">
<opcode><desc>Creates and runs a numbered instrument instance.</desc><synopsis>a1, [...] [, a8] <opcodename>subinstr</opcodename> instrnum [, p4] [, p5] [...]</synopsis><synopsis>a1, [...] [, a8] <opcodename>subinstr</opcodename> &quot;insname&quot; [, p4] [, p5] [...]</synopsis></opcode>
<opcode><desc>Creates and runs a numbered instrument instance at init-time.</desc><synopsis><opcodename>subinstrinit</opcodename> instrnum [, p4] [, p5] [...]</synopsis><synopsis><opcodename>subinstrinit</opcodename> &quot;insname&quot; [, p4] [, p5] [...]</synopsis></opcode>
</category>
<category name="Instrument Control:Time Reading">
<opcode><desc>Returns the number seconds since a base date.</desc><synopsis>ir[, inano] <opcodename>date</opcodename></synopsis><synopsis>kr[, knano] <opcodename>date</opcodename></synopsis></opcode>
<opcode><desc>Returns as a string the date and time specified.</desc><synopsis>Sir <opcodename>dates</opcodename> [ itime]</synopsis></opcode>
<opcode><desc>Reads the value of an internal clock.</desc><synopsis>ir <opcodename>readclock</opcodename> inum</synopsis></opcode>
<opcode><desc>Read the real time clock from the operating system.</desc><synopsis>ires <opcodename>rtclock</opcodename></synopsis><synopsis>kres <opcodename>rtclock</opcodename></synopsis></opcode>
<opcode><desc>Read absolute time in k-rate cycles.</desc><synopsis>kres <opcodename>timeinstk</opcodename></synopsis></opcode>
<opcode><desc>Read absolute time in seconds.</desc><synopsis>kres <opcodename>timeinsts</opcodename></synopsis></opcode>
<opcode><desc>Read absolute time in k-rate cycles.</desc><synopsis>ires <opcodename>timek</opcodename></synopsis><synopsis>kres <opcodename>timek</opcodename></synopsis></opcode>
<opcode><desc>Read absolute time in seconds.</desc><synopsis>ires <opcodename>times</opcodename></synopsis><synopsis>kres <opcodename>times</opcodename></synopsis></opcode>
</category>
<category name="Jacko Opcodes">
<opcode><desc>Receives an audio signal from a Jack port.</desc><synopsis>asignal <opcodename>JackoAudioIn </opcodename>ScsoundPortName</synopsis></opcode>
<opcode><desc>Creates an audio connection from a Jack port to Csound.</desc><synopsis><opcodename>JackoAudioInConnect </opcodename>SexternalPortName, ScsoundPortName</synopsis></opcode>
<opcode><desc>Sends an audio signal to a Jack port.</desc><synopsis><opcodename>JackoAudioOut </opcodename> ScsoundPortName, asignal</synopsis></opcode>
<opcode><desc>Creates an audio connection from Csound to a Jack port.</desc><synopsis><opcodename>JackoAudioOutConnect </opcodename>ScsoundPortName, SexternalPortName</synopsis></opcode>
<opcode><desc>Turns Jack's freewheeling mode on or off.</desc><synopsis><opcodename>JackoFreewheel </opcodename>[ienabled]</synopsis></opcode>
<opcode><desc>Prints information about the Jack system.</desc><synopsis><opcodename>JackoInfo </opcodename></synopsis></opcode>
<opcode><desc>Initializes Csound as a Jack client.</desc><synopsis><opcodename>JackoInit </opcodename>ServerName, SclientName</synopsis></opcode>
<opcode><desc>Creates a MIDI  connection from a Jack port to Csound.</desc><synopsis><opcodename>JackoMidiInConnect </opcodename>SexternalPortName, ScsoundPortName</synopsis></opcode>
<opcode><desc>Sends a MIDI channel message to a Jack port.</desc><synopsis><opcodename>JackoMidiOut </opcodename> ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]</synopsis></opcode>
<opcode><desc>Creates a MIDI connection from Csound to a Jack port.</desc><synopsis><opcodename>JackoMidiOutConnect </opcodename>ScsoundPortName, SexternalPortName</synopsis></opcode>
<opcode><desc>Sends a MIDI channel message to a Jack port.</desc><synopsis><opcodename>JackoNoteOut </opcodename> ScsoundPortName, kstatus, kchannel, kdata1[, kdata2]</synopsis></opcode>
<opcode><desc>Enables or disables all Jack ports.</desc><synopsis><opcodename>JackoOn </opcodename>[iactive] </synopsis></opcode>
<opcode><desc>Control the Jack transport.</desc><synopsis><opcodename>JackoTransport </opcodename> kcommand, [kposition]</synopsis></opcode>
</category>
<category name="Lua Opcodes">
<opcode><desc>Executes an arbitrary block of Lua code from the Csound orchestra.</desc><synopsis><opcodename>lua_exec</opcodename> Sluacode</synopsis></opcode>
<opcode><desc>Calls a Lua opcode at i-rate only. Any number of output and/or 
            input arguments may be passed. All arguments must be passed on 
            the right-hand side. Outputs are returned in the argument.</desc><synopsis><opcodename>lua_iopcall</opcodename> Sname, ...</synopsis><synopsis><opcodename>lua_ikopcall</opcodename> Sname, ...</synopsis><synopsis><opcodename>lua_iaopcall</opcodename> Sname, ...</synopsis><synopsis><opcodename>lua_iopcall_off</opcodename> Sname, ...</synopsis><synopsis><opcodename>lua_ikopcall_off</opcodename> Sname, ...</synopsis><synopsis><opcodename>lua_iaopcall_off</opcodename> Sname, ...</synopsis></opcode>
<opcode><desc>Define an opcode in Lua at i-rate. The opcode can take any 
             number of output and/or input arguments of any type.</desc><synopsis><opcodename>lua_opdef</opcodename> Sname, Sluacode</synopsis></opcode>
</category>
<category name="Serial I/O">
<opcode><desc>Open a serial port.</desc><synopsis>iPort <opcodename>serialBegin</opcodename> SPortName [, ibaudRate]</synopsis></opcode>
<opcode><desc>Close a serial port.</desc><synopsis> <opcodename>serialEnd</opcodename> iPort</synopsis></opcode>
<opcode><desc>Flush data from a serial port.</desc><synopsis> <opcodename>serialFlush</opcodename> iPort</synopsis></opcode>
<opcode><desc>Print data from a serial port.</desc><synopsis> <opcodename>serialPrint</opcodename> iPort</synopsis></opcode>
<opcode><desc>Read data from a serial port.</desc><synopsis>kByte <opcodename>serialRead</opcodename> iPort</synopsis></opcode>
<opcode><desc>Write data to a serial port.</desc><synopsis> <opcodename>serialWrite</opcodename> iPort, iByte</synopsis><synopsis> <opcodename>serialWrite</opcodename> iPort, kByte</synopsis><synopsis> <opcodename>serialWrite</opcodename> iPort, SBytes</synopsis></opcode>
<opcode><desc>Write data to a serial port.</desc><synopsis> <opcodename>serialWrite_i</opcodename> iPort, iByte</synopsis><synopsis> <opcodename>serialWrite_i</opcodename> iPort, SBytes</synopsis></opcode>
</category>
<category name="Table Control">
<opcode><desc>Deletes function table.</desc><synopsis><opcodename>ftfree</opcodename> ifno, iwhen</synopsis></opcode>
<opcode><desc>Generate a score function table from within the orchestra.</desc><synopsis>gir <opcodename>ftgen</opcodename> ifn, itime, isize, igen, iarga [, iargb ] [...]</synopsis><synopsis>gir <opcodename>ftgen</opcodename> ifn, itime, isize, igen, iarray</synopsis></opcode>
<opcode><desc>Generate a score function table from within the orchestra, which is deleted at the end of the note.</desc><synopsis>ifno <opcodename>ftgentmp</opcodename> ip1, ip2dummy, isize, igen, iarga, iargb, ...</synopsis></opcode>
<opcode><desc>Fill a string variable with the arguments used to create a function table at k-rate.</desc><synopsis>Sdst <opcodename>getftargs</opcodename> iftno, ktrig</synopsis></opcode>
<opcode><desc>Loads a sound file into memory for use by</desc><synopsis><opcodename>sndload</opcodename> Sfname[, ifmt[, ichns[, isr[, ibas[, iamp[, istrt   \
      [, ilpmod[, ilps[, ilpe]]]]]]]]]</synopsis></opcode>
</category>
<category name="Table Control:Table Queries">
<opcode><desc>Deprecated.</desc><synopsis>karray[] <opcodename>array</opcodename> ival1, ival2,.....ivaln</synopsis></opcode>
<opcode><desc>Generate a vector with initial values.</desc><synopsis>karray[] <opcodename>fillarray</opcodename> ival1, ival2,.....ivaln</synopsis><synopsis>karray <opcodename>fillarray</opcodename> ival1, ival2,.....ivaln</synopsis><synopsis>karray <opcodename>fillarray</opcodename> kval1, kval2,.....kvaln</synopsis></opcode>
<opcode><desc>Returns the number of channels in a stored function table.</desc><synopsis><opcodename>ftchnls</opcodename>(x) (init-rate args only)</synopsis></opcode>
<opcode><desc>Returns the base frequency of a stored function table in Hz.</desc><synopsis><opcodename>ftcps</opcodename>(x) (init-rate args only)</synopsis></opcode>
<opcode><desc>Returns the size of a stored function table.</desc><synopsis><opcodename>ftlen</opcodename>(x) (init-rate args only)</synopsis></opcode>
<opcode><desc>Returns the loop segment start-time of a stored function table number.</desc><synopsis><opcodename>ftlptim</opcodename>(x) (init-rate args only)</synopsis></opcode>
<opcode><desc>Returns the sampling-rate of a stored function table.</desc><synopsis><opcodename>ftsr</opcodename>(x) (init-rate args only)</synopsis></opcode>
<opcode><desc>Generate a vector with an arithmetic sequence.</desc><synopsis>karray <opcodename>genarray</opcodename> kstart, kens[, inc]</synopsis><synopsis>iarray <opcodename>genarray</opcodename> istart, iens[, inc]</synopsis></opcode>
<opcode><desc>Generate a vector with an arithmetic sequence.</desc><synopsis>karray <opcodename>genarray_i</opcodename> istart, iend [,inc]</synopsis></opcode>
<opcode><desc>Evaluates the size or shape length of an array.</desc><synopsis>ir <opcodename>lenarray</opcodename> karray[, iwhich]</synopsis><synopsis>kr <opcodename>lenarray</opcodename> karray[, iwhich]</synopsis></opcode>
<opcode><desc>Apply a function to every element of a vector.</desc><synopsis>karray <opcodename>maparray</opcodename> kinarray, String</synopsis><synopsis>karray <opcodename>maparray_i</opcodename> kinarray, String</synopsis></opcode>
<opcode><desc>Returns the number of samples loaded into a stored function table number.</desc><synopsis><opcodename>nsamp</opcodename>(x) (init-rate args only)</synopsis></opcode>
<opcode><desc>Take a slice of a vector.</desc><synopsis>karray <opcodename>slicearray</opcodename> kinarray, istart, iend [,istride]</synopsis></opcode>
<opcode><desc>Interrogates a function table for length.</desc><synopsis>ires <opcodename>tableng</opcodename> ifn</synopsis><synopsis>kres <opcodename>tableng</opcodename> kfn</synopsis></opcode>
<opcode><desc>Adding values in a range of a table.</desc><synopsis>kr <opcodename>tabsum</opcodename> ifn[[, kmin] [, kmax]]</synopsis></opcode>
<opcode><desc>Table Read Access inside expressions.</desc><synopsis><opcodename>tb0_init</opcodename> ifn</synopsis><synopsis><opcodename>tb1_init</opcodename> ifn</synopsis><synopsis><opcodename>tb2_init</opcodename> ifn</synopsis><synopsis><opcodename>tb3_init</opcodename> ifn</synopsis><synopsis><opcodename>tb4_init</opcodename> ifn</synopsis><synopsis><opcodename>tb5_init</opcodename> ifn</synopsis><synopsis><opcodename>tb6_init</opcodename> ifn</synopsis><synopsis><opcodename>tb7_init</opcodename> ifn</synopsis><synopsis><opcodename>tb8_init</opcodename> ifn</synopsis><synopsis><opcodename>tb9_init</opcodename> ifn</synopsis><synopsis><opcodename>tb10_init</opcodename> ifn</synopsis><synopsis><opcodename>tb11_init</opcodename> ifn</synopsis><synopsis><opcodename>tb12_init</opcodename> ifn</synopsis><synopsis><opcodename>tb13_init</opcodename> ifn</synopsis><synopsis><opcodename>tb14_init</opcodename> ifn</synopsis><synopsis><opcodename>tb15_init</opcodename> ifn</synopsis><synopsis>iout = <opcodename>tb0</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb0</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb1</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb1</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb2</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb2</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb3</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb3</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb4</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb4</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb5</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb5</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb6</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb6</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb7</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb7</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb8</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb8</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb9</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb9</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb10</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb10</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb11</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb11</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb12</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb12</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb13</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb13</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb14</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb14</opcodename>(kIndex)</synopsis><synopsis>iout = <opcodename>tb15</opcodename>(iIndex)</synopsis><synopsis>kout = <opcodename>tb15</opcodename>(kIndex)</synopsis></opcode>
</category>
<category name="Table Control:Dynamic Selection">
<opcode><desc>Provides k-rate control over table numbers.</desc><synopsis>ares <opcodename>tableikt</opcodename> xndx, kfn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>tableikt</opcodename> kndx, kfn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
<opcode><desc>Provides k-rate control over table numbers.</desc><synopsis>ares <opcodename>tablekt</opcodename> xndx, kfn [, ixmode] [, ixoff] [, iwrap]</synopsis><synopsis>kres <opcodename>tablekt</opcodename> kndx, kfn [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
<opcode><desc>Reads function tables with linear, cubic, or sinc interpolation.</desc><synopsis>ares <opcodename>tablexkt</opcodename> xndx, kfn, kwarp, iwsize [, ixmode] [, ixoff] [, iwrap]</synopsis></opcode>
</category>
<category name="Table Control:Read/Write Opreations">
<opcode><desc>Write a previously-allocated table to an audio file.</desc><synopsis>ians <opcodename>ftaudio</opcodename> ifn, &quot;filename&quot;, iformat</synopsis><synopsis>kans <opcodename>ftaudio</opcodename> ktrig, kfn, &quot;filename&quot;, kformat [, isync]</synopsis></opcode>
<opcode><desc>Load a set of previously-allocated tables from a file.</desc><synopsis><opcodename>ftload</opcodename> Sfilename, iflag, ifn1 [, ifn2] [...]</synopsis></opcode>
<opcode><desc>Load a set of previously-allocated tables from a file.</desc><synopsis><opcodename>ftloadk</opcodename> Sfilename, ktrig, iflag, ifn1 [, ifn2] [...]</synopsis></opcode>
<opcode><desc>Reads a directory for sound files.</desc><synopsis>iNumberOfFile <opcodename>ftsamplebank</opcodename> SDirectory, iFirstTableNumber, iSkipTime, iFormat, iChannel,</synopsis><synopsis>kNumberOfFile <opcodename>ftsamplebank</opcodename> SDirectory, kFirstTableNumber, kTrigger, kSkipTime, kFormat, kChannel,</synopsis></opcode>
<opcode><desc>Save a set of previously-allocated tables to a file.</desc><synopsis><opcodename>ftsave</opcodename> &quot;filename&quot;, iflag, ifn1 [, ifn2] [...]</synopsis></opcode>
<opcode><desc>Save a set of previously-allocated tables to a file.</desc><synopsis><opcodename>ftsavek</opcodename> &quot;filename&quot;, ktrig, iflag, ifn1 [, ifn2] [...]</synopsis></opcode>
<opcode><desc>Change the contents of existing function tables of any length.</desc><synopsis><opcodename>ptablew</opcodename> asig, andx, ifn [, ixmode] [, ixoff] [, iwgmode]</synopsis><synopsis><opcodename>ptablew</opcodename> isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]</synopsis><synopsis><opcodename>ptablew</opcodename> ksig, kndx, ifn [, ixmode] [, ixoff] [, iwgmode]</synopsis></opcode>
<opcode><desc>Simple, fast table copy opcode.</desc><synopsis><opcodename>tablecopy</opcodename> kdft, ksft</synopsis></opcode>
<opcode><desc>Filters a source table and writes result into a destination table.</desc><synopsis>knumpassed <opcodename>tablefilter</opcodename> kouttable, kintatble, kmode, kparam</synopsis></opcode>
<opcode><desc>Filters a source table and writes result into a destination table.</desc><synopsis>inumpassed <opcodename>tablefilteri</opcodename> iouttable, iintatble, imode, iparam</synopsis></opcode>
<opcode><desc>Writes a table's guard point.</desc><synopsis><opcodename>tablegpw</opcodename> kfn</synopsis></opcode>
<opcode><desc>Simple, fast table copy opcode.</desc><synopsis><opcodename>tableicopy</opcodename> idft, isft</synopsis></opcode>
<opcode><desc>Writes a table's guard point.</desc><synopsis><opcodename>tableigpw</opcodename> ifn</synopsis></opcode>
<opcode><desc>Mixes two tables.</desc><synopsis><opcodename>tableimix</opcodename> idft, idoff, ilen, is1ft, is1off, is1g, is2ft, is2off, is2g</synopsis></opcode>
<opcode><desc>Change the contents of existing function tables.</desc><synopsis><opcodename>tableiw</opcodename> isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]</synopsis></opcode>
<opcode><desc>Mixes two tables.</desc><synopsis><opcodename>tablemix</opcodename> kdft, kdoff, klen, ks1ft, ks1off, ks1g, ks2ft, ks2off, ks2g</synopsis></opcode>
<opcode><desc>Reads tables in sequential locations.</desc><synopsis>ares <opcodename>tablera</opcodename> kfn, kstart, koff</synopsis></opcode>
<opcode><desc>Change the contents of existing function tables.</desc><synopsis><opcodename>tablew</opcodename> asig, andx, ifn [, ixmode] [, ixoff] [, iwgmode]</synopsis><synopsis><opcodename>tablew</opcodename> isig, indx, ifn [, ixmode] [, ixoff] [, iwgmode]</synopsis><synopsis><opcodename>tablew</opcodename> ksig, kndx, ifn [, ixmode] [, ixoff] [, iwgmode]</synopsis></opcode>
<opcode><desc>Writes tables in sequential locations.</desc><synopsis>kstart <opcodename>tablewa</opcodename> kfn, asig, koff</synopsis></opcode>
<opcode><desc>Change the contents of existing function tables.</desc><synopsis><opcodename>tablewkt</opcodename> asig, andx, kfn [, ixmode] [, ixoff] [, iwgmode]</synopsis><synopsis><opcodename>tablewkt</opcodename> ksig, kndx, kfn [, ixmode] [, ixoff] [, iwgmode]</synopsis></opcode>
<opcode><desc>Allow morphing between a set of tables.</desc><synopsis>kout <opcodename>tabmorph</opcodename> kindex, kweightpoint, ktabnum1, ktabnum2, \
      ifn1, ifn2 [, ifn3, ifn4, ...,ifnN]</synopsis></opcode>
<opcode><desc>Allow morphing between a set of tables at audio rate with interpolation.</desc><synopsis>aout <opcodename>tabmorpha</opcodename> aindex, aweightpoint, atabnum1, atabnum2, \
      ifn1, ifn2 [, ifn3, ifn4, ... ifnN]</synopsis></opcode>
<opcode><desc>Allow morphing between a set of tables at audio rate with interpolation.</desc><synopsis>aout <opcodename>tabmorphak</opcodename> aindex, kweightpoint, ktabnum1, ktabnum2, \
      ifn1, ifn2 [, ifn3, ifn4, ... ifnN]</synopsis></opcode>
<opcode><desc>Allow morphing between a set of tables with interpolation.</desc><synopsis>kout <opcodename>tabmorphi</opcodename> kindex, kweightpoint, ktabnum1, ktabnum2, \
      ifn1, ifn2 [, ifn3, ifn4, ..., ifnN]</synopsis></opcode>
<opcode><desc>Playing-back control signals.</desc><synopsis><opcodename>tabplay</opcodename>  ktrig, knumtics, kfn, kout1 [,kout2,..., koutN]</synopsis></opcode>
<opcode><desc>Recording of control signals.</desc><synopsis><opcodename>tabrec</opcodename>   ktrig_start, ktrig_stop, knumtics, kfn, kin1 [,kin2,...,kinN]</synopsis></opcode>
</category>
<category name="FLTK:Containers">
<opcode><desc>A FLTK container opcode that groups child widgets.</desc><synopsis><opcodename>FLgroup</opcodename> &quot;label&quot;, iwidth, iheight, ix, iy [, iborder] [, image]</synopsis></opcode>
<opcode><desc>Marks the end of a group of FLTK child widgets.</desc><synopsis><opcodename>FLgroupEnd</opcodename></synopsis></opcode>
<opcode><desc>Provides the functionality of compressing and aligning FLTK widgets.</desc><synopsis><opcodename>FLpack</opcodename> iwidth, iheight, ix, iy, itype, ispace, iborder</synopsis></opcode>
<opcode><desc>Marks the end of a group of compressed or aligned FLTK widgets.</desc><synopsis><opcodename>FLpackEnd</opcodename></synopsis></opcode>
<opcode><desc>Creates a window that contains FLTK widgets.</desc><synopsis><opcodename>FLpanel</opcodename> &quot;label&quot;, iwidth, iheight [, ix] [, iy] [, iborder] [, ikbdcapture] [, iclose]</synopsis></opcode>
<opcode><desc>Marks the end of a group of FLTK widgets contained inside of a window (panel).</desc><synopsis><opcodename>FLpanelEnd</opcodename></synopsis></opcode>
<opcode><desc>A FLTK opcode that adds scroll bars to an area.</desc><synopsis><opcodename>FLscroll</opcodename> iwidth, iheight [, ix] [, iy]</synopsis></opcode>
<opcode><desc>A FLTK opcode that marks the end of an area with scrollbars.</desc><synopsis><opcodename>FLscrollEnd</opcodename></synopsis></opcode>
<opcode><desc>Creates a tabbed FLTK interface.</desc><synopsis><opcodename>FLtabs</opcodename> iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>Marks the end of a tabbed FLTK interface.</desc><synopsis><opcodename>FLtabsEnd</opcodename></synopsis></opcode>
</category>
<category name="FLTK:Valuators">
<opcode><desc>A FLTK widget opcode that creates a counter.</desc><synopsis>kout, ihandle <opcodename>FLcount</opcodename> &quot;label&quot;, imin, imax, istep1, istep2, itype, \
      iwidth, iheight, ix, iy, iopcode [, kp1] [, kp2] [, kp3] [...] [, kpN]</synopsis></opcode>
<opcode><desc>A FLTK opcode that acts like a joystick.</desc><synopsis>koutx, kouty, ihandlex, ihandley <opcodename>FLjoy</opcodename> &quot;label&quot;, iminx, imaxx, iminy, \
      imaxy, iexpx, iexpy, idispx, idispy, iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>A FLTK widget opcode that creates a knob.</desc><synopsis>kout, ihandle <opcodename>FLknob</opcodename> &quot;label&quot;, imin, imax, iexp, itype, idisp, iwidth, \
      ix, iy [, icursorsize]</synopsis></opcode>
<opcode><desc>A FLTK widget that creates a transversal knob.</desc><synopsis>kout, ihandle <opcodename>FLroller</opcodename> &quot;label&quot;, imin, imax, istep, iexp, itype, idisp, \
      iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>Puts a slider into the corresponding FLTK container.</desc><synopsis>kout, ihandle <opcodename>FLslider</opcodename> &quot;label&quot;, imin, imax, iexp, itype, idisp, iwidth, \
      iheight, ix, iy</synopsis></opcode>
<opcode><desc>A FLTK widget opcode that creates a textbox.</desc><synopsis>kout, ihandle <opcodename>FLtext</opcodename> &quot;label&quot;, imin, imax, istep, itype, iwidth, \
      iheight, ix, iy</synopsis></opcode>
</category>
<category name="FLTK:Other">
<opcode><desc>A FLTK widget that displays text inside of a box.</desc><synopsis>ihandle <opcodename>FLbox</opcodename> &quot;label&quot;, itype, ifont, isize, iwidth, iheight, ix, iy [, image]</synopsis><synopsis>ihandle <opcodename>FLbox</opcodename> istr, itype, ifont, isize, iwidth, iheight, ix, iy [, image]</synopsis></opcode>
<opcode><desc>A FLTK widget opcode that creates a bank of buttons.</desc><synopsis>kout, ihandle <opcodename>FLbutBank</opcodename> itype, inumx, inumy, iwidth, iheight, ix, iy, \
      iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]</synopsis></opcode>
<opcode><desc>A FLTK widget opcode that creates a button.</desc><synopsis>kout, ihandle <opcodename>FLbutton</opcodename> &quot;label&quot;, ion, ioff, itype, iwidth, iheight, ix, \
      iy, iopcode [, kp1] [, kp2] [, kp3] [, kp4] [, kp5] [....] [, kpN]</synopsis></opcode>
<opcode><desc>A FLTK widget opcode that creates a button that will close the panel
      window it is a part of.</desc><synopsis>ihandle <opcodename>FLcloseButton</opcodename> &quot;label&quot;, iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>A FLTK widget opcode that creates a button that executes a command.</desc><synopsis>ihandle <opcodename>FLexecButton</opcodename> &quot;command&quot;, iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>Retrieves a previously stored FLTK snapshot.</desc><synopsis>inumsnap <opcodename>FLgetsnap</opcodename> index [, igroup]</synopsis></opcode>
<opcode><desc>Displays a box with a grid useful for visualizing two-dimensional Hyper Vectorial Synthesis.</desc><synopsis>ihandle <opcodename>FLhvsBox</opcodename> inumlinesX, inumlinesY, iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>Sets the cursor position of a previously-declared FLhvsBox widget.</desc><synopsis><opcodename>FLhvsBox</opcodename> kx, ky, ihandle</synopsis></opcode>
<opcode><desc>Reports keys pressed (on alphanumeric keyboard) when an FLTK panel has focus.</desc><synopsis>kascii <opcodename>FLkeyIn</opcodename> [ifn]</synopsis></opcode>
<opcode><desc>Loads all snapshots into the memory bank of the current orchestra.</desc><synopsis><opcodename>FLloadsnap</opcodename> &quot;filename&quot; [, igroup]</synopsis></opcode>
<opcode><desc>Returns the mouse position and the state of the three mouse buttons.</desc><synopsis>kx, ky, kb1, kb2, kb3 <opcodename>FLmouse</opcodename> [imode]</synopsis></opcode>
<opcode><desc>A FLTK opcode that prints a k-rate value at specified intervals.</desc><synopsis><opcodename>FLprintk</opcodename> itime, kval, idisp</synopsis></opcode>
<opcode><desc>A FLTK opcode that prints a new value every time a control-rate variable changes.</desc><synopsis><opcodename>FLprintk2</opcodename> kval, idisp</synopsis></opcode>
<opcode><desc>Starts the FLTK widget thread.</desc><synopsis><opcodename>FLrun</opcodename></synopsis></opcode>
<opcode><desc>Saves all snapshots currently created into a file.</desc><synopsis><opcodename>FLsavesnap</opcodename> &quot;filename&quot; [, igroup]</synopsis></opcode>
<opcode><desc>Stores the current status of all FLTK valuators into a snapshot location.</desc><synopsis>inumsnap, inumval <opcodename>FLsetsnap</opcodename> index [, ifn, igroup]</synopsis></opcode>
<opcode><desc>Determines the snapshot group for FL valuators.</desc><synopsis><opcodename>FLsetSnapGroup</opcodename> igroup</synopsis></opcode>
<opcode><desc>Sets the value of a FLTK valuator at control-rate.</desc><synopsis><opcodename>FLsetVal</opcodename> ktrig, kvalue, ihandle</synopsis></opcode>
<opcode><desc>Sets the value of a FLTK valuator to a number provided by the user.</desc><synopsis><opcodename>FLsetVal_i</opcodename> ivalue, ihandle</synopsis></opcode>
<opcode><desc>A FLTK widget containing a bank of horizontal sliders.</desc><synopsis><opcodename>FLslidBnk</opcodename> &quot;names&quot;, inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] \
      [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]</synopsis></opcode>
<opcode><desc>A FLTK widget containing a bank of horizontal sliders.</desc><synopsis><opcodename>FLslidBnk2</opcodename> &quot;names&quot;, inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index] </synopsis><synopsis><opcodename>FLslidBnk2</opcodename> istring, inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index] </synopsis></opcode>
<opcode><desc>modify the values of a slider bank.</desc><synopsis><opcodename>FLslidBnk2Set</opcodename> ihandle, ifn [, istartIndex, istartSlid, inumSlid]</synopsis></opcode>
<opcode><desc>modify the values of a slider bank.</desc><synopsis><opcodename>FLslidBnk2Setk</opcodename>  ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]</synopsis></opcode>
<opcode><desc>gets the handle of last slider bank created.</desc><synopsis>ihandle <opcodename>FLslidBnkGetHandle</opcodename></synopsis></opcode>
<opcode><desc>modify the values of a slider bank.</desc><synopsis><opcodename>FLslidBnkSet</opcodename> ihandle, ifn [, istartIndex, istartSlid, inumSlid]</synopsis></opcode>
<opcode><desc>modify the values of a slider bank.</desc><synopsis><opcodename>FLslidBnkSetk</opcodename>  ktrig, ihandle, ifn [, istartIndex, istartSlid, inumSlid]</synopsis></opcode>
<opcode><desc>Same as the FLrun opcode.</desc><synopsis><opcodename>FLupdate</opcodename></synopsis></opcode>
<opcode><desc>Shows the current value of a FLTK valuator.</desc><synopsis>ihandle <opcodename>FLvalue</opcodename> &quot;label&quot;, iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>An FLTK widget opcode that creates a virtual keyboard widget.</desc><synopsis><opcodename>FLvkeybd</opcodename> &quot;keyboard.map&quot;, iwidth, iheight, ix, iy</synopsis></opcode>
<opcode><desc>A FLTK widget containing a bank of vertical sliders.</desc><synopsis><opcodename>FLvslidBnk</opcodename> &quot;names&quot;, inumsliders [, ioutable] [, iwidth] [, iheight] [, ix] \
      [, iy] [, itypetable] [, iexptable] [, istart_index] [, iminmaxtable]</synopsis></opcode>
<opcode><desc>A FLTK widget containing a bank of vertical sliders.</desc><synopsis><opcodename>FLvslidBnk2</opcodename> &quot;names&quot;, inumsliders, ioutable, iconfigtable [,iwidth, iheight, ix, iy, istart_index]</synopsis></opcode>
<opcode><desc>Senses the mouse cursor position in a user-defined area inside an FLpanel.</desc><synopsis>koutx, kouty, kinside  <opcodename>FLxyin</opcodename> ioutx_min, ioutx_max, iouty_min, iouty_max, \
      iwindx_min, iwindx_max, iwindy_min, iwindy_max [, iexpx, iexpy, ioutx, iouty]</synopsis></opcode>
<opcode><desc>Allows one-dimensional HVS (Hyper-Vectorial Synthesis).</desc><synopsis><opcodename>vphaseseg</opcodename> kphase, ioutab, ielems, itab1,idist1,itab2 \
      [,idist2,itab3, ... ,idistN-1,itabN]</synopsis></opcode>
</category>
<category name="FLTK:Appearance">
<opcode><desc>A FLTK opcode that sets the primary colors.</desc><synopsis><opcodename>FLcolor</opcodename> ired, igreen, iblue [, ired2, igreen2, iblue2]</synopsis></opcode>
<opcode><desc>A FLTK opcode that sets the secondary (selection) color.</desc><synopsis><opcodename>FLcolor2</opcodename> ired, igreen, iblue</synopsis></opcode>
<opcode><desc>Hides the target FLTK widget.</desc><synopsis><opcodename>FLhide</opcodename> ihandle</synopsis></opcode>
<opcode><desc>A FLTK opcode that modifies the appearance of a text label.</desc><synopsis><opcodename>FLlabel</opcodename> isize, ifont, ialign, ired, igreen, iblue</synopsis></opcode>
<opcode><desc>Sets the text alignment of a label of a FLTK widget.</desc><synopsis><opcodename>FLsetAlign</opcodename> ialign, ihandle</synopsis></opcode>
<opcode><desc>Sets the appearance of a box surrounding a FLTK widget.</desc><synopsis><opcodename>FLsetBox</opcodename> itype, ihandle</synopsis></opcode>
<opcode><desc>Sets the primary color of a FLTK widget.</desc><synopsis><opcodename>FLsetColor</opcodename> ired, igreen, iblue, ihandle</synopsis></opcode>
<opcode><desc>Sets the secondary (or selection) color of a FLTK widget.</desc><synopsis><opcodename>FLsetColor2</opcodename> ired, igreen, iblue, ihandle</synopsis></opcode>
<opcode><desc>Sets the font type of a FLTK widget.</desc><synopsis><opcodename>FLsetFont</opcodename> ifont, ihandle</synopsis></opcode>
<opcode><desc>Sets the position of a FLTK widget.</desc><synopsis><opcodename>FLsetPosition</opcodename> ix, iy, ihandle</synopsis></opcode>
<opcode><desc>Resizes a FLTK widget.</desc><synopsis><opcodename>FLsetSize</opcodename> iwidth, iheight, ihandle</synopsis></opcode>
<opcode><desc>Sets the label of a FLTK widget.</desc><synopsis><opcodename>FLsetText</opcodename> &quot;itext&quot;, ihandle</synopsis><synopsis><opcodename>FLsetText</opcodename> istr, ihandle</synopsis></opcode>
<opcode><desc>Sets the color of the text label of a FLTK widget.</desc><synopsis><opcodename>FLsetTextColor</opcodename> ired, iblue, igreen, ihandle</synopsis></opcode>
<opcode><desc>Sets the size of the text label of a FLTK widget.</desc><synopsis><opcodename>FLsetTextSize</opcodename> isize, ihandle</synopsis></opcode>
<opcode><desc>Sets some font attributes of the text label of a FLTK widget.</desc><synopsis><opcodename>FLsetTextType</opcodename> itype, ihandle</synopsis></opcode>
<opcode><desc>Restores the visibility of a previously hidden FLTK widget.</desc><synopsis><opcodename>FLshow</opcodename> ihandle</synopsis></opcode>
</category>
<category name="Mathematical Operations:Arithmetic and Logic Operations">
<opcode><desc>Addition operator</desc><synopsis>a <opcodename>+</opcodename> b  (no rate restriction)</synopsis>
</opcode>
<opcode><desc>Division operator.</desc><synopsis>a <opcodename>/</opcodename> b  (no rate restriction)</synopsis>
</opcode>
<opcode><desc>Modulus operator.</desc><synopsis>a <opcodename>%</opcodename> b  (no rate restriction)</synopsis>
</opcode>
<opcode><desc>Multiplication operator.</desc><synopsis>a <opcodename>*</opcodename> b  (no rate restriction)</synopsis>
</opcode>
<opcode><desc>Logical AND operator.</desc><synopsis>a <opcodename>&amp;&amp;</opcodename> b  (logical AND; not audio-rate)</synopsis></opcode>
<opcode><desc>Bitwise AND operator.</desc><synopsis>a <opcodename>&amp;</opcodename> b  (bitwise AND)</synopsis></opcode>
<opcode><desc>Bitwise NOT operator.</desc><synopsis><opcodename>~</opcodename> a  (bitwise NOT)</synopsis></opcode>
<opcode><desc>Bitwise OR operator.</desc><synopsis>a <opcodename>|</opcodename> b  (bitwise OR)</synopsis>
</opcode>
<opcode><desc>Bitshift left operator.</desc><synopsis>a <opcodename>&lt;&lt;</opcodename> b  (bitshift left)</synopsis></opcode>
<opcode><desc>Bitshift right operator.</desc><synopsis>a <opcodename>&gt;&gt;</opcodename> b  (bitshift left)</synopsis></opcode>
<opcode><desc>Bitwise NON EQUIVALENCE operator.</desc><synopsis>a <opcodename>#</opcodename> b  (bitwise NON EQUIVALENCE)</synopsis></opcode>
<opcode><desc>Logical NOT operator.</desc><synopsis><opcodename>!</opcodename> a  (logical NOT; not audio-rate)</synopsis></opcode>
<opcode><desc>Logical OR operator.</desc><synopsis>a <opcodename>||</opcodename> b  (logical OR; not audio-rate)</synopsis>
</opcode>
<opcode><desc></desc><synopsis>a <opcodename>^</opcodename> b  (b not audio-rate)</synopsis>
</opcode>
<opcode><desc>Subtraction operator.</desc><synopsis>a <opcodename>-</opcodename> b (no rate restriction)</synopsis>
</opcode>
</category>
<category name="Mathematical Operations:Arrays">
<opcode><desc>Cubic root function.</desc><synopsis>ires[] <opcodename>cbrt</opcodename> iarg</synopsis><synopsis>kres[] <opcodename>cbrt</opcodename> karg</synopsis></opcode>
<opcode><desc>Maximum value function.</desc><synopsis>ires[] <opcodename>fmax</opcodename> iarg1[], iarg2[] </synopsis><synopsis>kres[] <opcodename>fmax</opcodename> karg1[], karg2[]</synopsis><synopsis>ires[] <opcodename>fmax</opcodename> iarg1[], iarg2 </synopsis><synopsis>kres[] <opcodename>fmax</opcodename> karg[], karg2 </synopsis></opcode>
<opcode><desc>Minimum value function.</desc><synopsis>ires[] <opcodename>fmin</opcodename> iarg1[], iarg2[] </synopsis><synopsis>kres[] <opcodename>fmin</opcodename> karg1[], karg2[]</synopsis><synopsis>ires[] <opcodename>fmin</opcodename> iarg1[], iarg2 </synopsis><synopsis>kres[] <opcodename>fmin</opcodename> karg[], karg2 </synopsis></opcode>
<opcode><desc>Compute the floating point remainder operation.</desc><synopsis>ires[] <opcodename>fmod</opcodename> iarg1[], iarg2[] </synopsis><synopsis>kres[] <opcodename>fmod</opcodename> karg1[], karg2[]</synopsis><synopsis>ires[] <opcodename>fmod</opcodename> iarg1[], iarg2 </synopsis><synopsis>kres[] <opcodename>fmod</opcodename> karg[], karg2 </synopsis></opcode>
<opcode><desc>Euclidean distance function.</desc><synopsis>ires[] <opcodename>hypot</opcodename> iarg1[], iarg2[] </synopsis><synopsis>kres[] <opcodename>hypot</opcodename> karg1[], karg2[]</synopsis></opcode>
<opcode><desc>Limiting function</desc><synopsis>ires[] <opcodename>limit1</opcodename> iarg</synopsis><synopsis>kres[] <opcodename>limit1</opcodename> karg</synopsis></opcode>
</category>
<category name="Mathematical Operations:Comparators and Accumulators">
<opcode><desc>Zeroes a list of audio signals.</desc><synopsis><opcodename>clear</opcodename> avar1 [, avar2] [, avar3] [...]</synopsis></opcode>
<opcode><desc>Accumulates audio signals.</desc><synopsis><opcodename>vincr</opcodename> accum, aincr</synopsis></opcode>
</category>
<category name="Mathematical Operations:Mathematical Functions">
<opcode><desc>Returns an absolute value.</desc><synopsis><opcodename>abs</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>abs</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Returns the smallest integer not less than</desc><synopsis><opcodename>ceil</opcodename>(x) (init-, control-, or audio-rate arg allowed)</synopsis><synopsis><opcodename>ceil</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Returns e raised to the x-th power.</desc><synopsis><opcodename>exp</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>exp</opcodename>(k/i[]) (k- or i-arrays)</synopsis></opcode>
<opcode><desc>Returns the largest integer not greater than</desc><synopsis><opcodename>floor</opcodename>(x) (init-, control-, or audio-rate arg allowed)</synopsis><synopsis><opcodename>floor</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Returns the fractional part of a decimal number.</desc><synopsis><opcodename>frac</opcodename>(x) (init-rate or control-rate args; also works at audio rate in Csound5)</synopsis><synopsis><opcodename>frac</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Extracts an integer from a decimal number.</desc><synopsis><opcodename>int</opcodename>(x)  (init-rate or control-rate; also works at audio rate in Csound5)</synopsis></opcode>
<opcode><desc>Returns a natural log of a number, or an array (with optional arbitrary base).</desc><synopsis><opcodename>log</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>log</opcodename>(k/i[]) (k- or i-arrays )</synopsis><synopsis>kout[]<opcodename>log</opcodename> kin[],ibas</synopsis></opcode>
<opcode><desc>Returns a base 10 log.</desc><synopsis><opcodename>log10</opcodename>(x) (no rate restriction)</synopsis><synopsis><opcodename>log10</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Returns a base 2 log.</desc><synopsis><opcodename>log2</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>log2</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs a logarithmic base two calculation.</desc><synopsis><opcodename>logbtwo</opcodename>(x)  (init-rate or control-rate args only)</synopsis></opcode>
<opcode><desc>Performs a  power-of-two calculation.</desc><synopsis><opcodename>powoftwo</opcodename>(x)  (init-rate or control-rate args only)</synopsis></opcode>
<opcode><desc>Questions whether the argument is a infinite number</desc><synopsis><opcodename>qinf</opcodename>(x) (no rate restriction)</synopsis></opcode>
<opcode><desc>Questions whether the argument is not a number</desc><synopsis><opcodename>qnan</opcodename>(x) (no rate restriction)</synopsis></opcode>
<opcode><desc>Returns the integer value nearest to</desc><synopsis><opcodename>round</opcodename>(x) (init-, control-, or audio-rate arg allowed)</synopsis><synopsis><opcodename>round</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Returns a square root value.</desc><synopsis><opcodename>sqrt</opcodename>(x) (no rate restriction)</synopsis><synopsis><opcodename>sqrt</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
</category>
<category name="Mathematical Operations:Trigonometric Functions">
<opcode><desc>Performs a cosine function.</desc><synopsis><opcodename>cos</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>cos</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs a hyperbolic cosine function.</desc><synopsis><opcodename>cosh</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>cosh</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs a arccosine function.</desc><synopsis><opcodename>cosinv</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>cosinv</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs a signum function.</desc><synopsis><opcodename>signum</opcodename>(x) (no rate restriction)</synopsis></opcode>
<opcode><desc>Performs a sine function.</desc><synopsis><opcodename>sin</opcodename>(x) (no rate restriction)</synopsis><synopsis><opcodename>sin</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs a hyperbolic sine function.</desc><synopsis><opcodename>sinh</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>sinh</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs an arcsine function.</desc><synopsis><opcodename>sininv</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>sininv</opcodename>(k/i[]) (k- or i-arrays)</synopsis></opcode>
<opcode><desc>Performs a tangent function.</desc><synopsis><opcodename>tan</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>tan</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs a hyperbolic tangent function.</desc><synopsis><opcodename>tanh</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>tanh</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Performs an arctangent function.</desc><synopsis><opcodename>taninv</opcodename>(x) (no rate
    restriction)</synopsis><synopsis><opcodename>taninv</opcodename>(k/i[]) (k- or i-arrays )</synopsis></opcode>
</category>
<category name="Mathematical Operations:Amplitude Functions">
<opcode><desc>Returns the amplitude equivalent of the decibel value x.</desc><synopsis><opcodename>ampdb</opcodename>(x)  (no rate restriction)</synopsis></opcode>
<opcode><desc>Returns the amplitude equivalent (in 16-bit signed integer scale) of the full scale decibel (dB FS) value</desc><synopsis><opcodename>ampdbfs</opcodename>(x)  (no rate restriction)</synopsis></opcode>
<opcode><desc>Returns the amplitude equivalent for a given decibel amount.</desc><synopsis><opcodename>db</opcodename>(x)</synopsis></opcode>
<opcode><desc>Returns the decibel equivalent of the raw amplitude</desc><synopsis><opcodename>dbamp</opcodename>(x)  (init-rate or control-rate args only)</synopsis></opcode>
<opcode><desc>Returns the decibel equivalent of the raw amplitude</desc><synopsis><opcodename>dbfsamp</opcodename>(x)  (init-rate or control-rate args only)</synopsis></opcode>
</category>
<category name="Mathematical Operations:Random Functions">
<opcode><desc>Returns a random number in a bi-polar range.</desc><synopsis><opcodename>birnd</opcodename>(x) (init- or control-rate only)</synopsis></opcode>
<opcode><desc>Returns a random number in a unipolar range at the rate given by the input argument.</desc><synopsis><opcodename>rnd</opcodename>(x) (init- or control-rate only)</synopsis></opcode>
</category>
<category name="Mathematical Operations:Opcode Equivalents of Functions">
<opcode><desc>Safely divides two numbers.</desc><synopsis>ares <opcodename>divz</opcodename> xa, xb, ksubst</synopsis><synopsis>ires <opcodename>divz</opcodename> ia, ib, isubst</synopsis><synopsis>kres <opcodename>divz</opcodename> ka, kb, ksubst</synopsis><synopsis>...<opcodename>divz</opcodename>(ka, kb, ksubst)... (no rate restriction)</synopsis></opcode>
<opcode><desc>Multiplies and accumulates a- and k-rate signals.</desc><synopsis>ares <opcodename>mac</opcodename> ksig1, asig1 [, ksig2] [, asig2] [, ksig3] [, asig3] [...]</synopsis></opcode>
<opcode><desc>Multiply and accumulate a-rate signals only.</desc><synopsis>ares <opcodename>maca</opcodename> asig1 , asig2 [, asig3] [, asig4] [, asig5] [...]</synopsis></opcode>
<opcode><desc>Efficiently evaluates a polynomial of arbitrary order.</desc><synopsis>aout <opcodename>polynomial</opcodename> ain, k0 [, k1 [, k2 [...]]]</synopsis></opcode>
<opcode><desc>Computes one argument to the power of another argument.</desc><synopsis>ares <opcodename>pow</opcodename> aarg, kpow [, inorm]</synopsis><synopsis>ires <opcodename>pow</opcodename> iarg, ipow [, inorm]</synopsis><synopsis>kres <opcodename>pow</opcodename> karg, kpow [, inorm]</synopsis><synopsis>ires[] <opcodename>pow</opcodename> iarg[], ipow[] </synopsis><synopsis>kres[] <opcodename>pow</opcodename> karg[], kpow[]</synopsis><synopsis>ires[] <opcodename>pow</opcodename> iarg[], ipow </synopsis><synopsis>kres[] <opcodename>pow</opcodename> karg[], kpow </synopsis></opcode>
<opcode><desc>Multiplies any number of a-rate signals.</desc><synopsis>ares <opcodename>product</opcodename> asig1, asig2 [, asig3] [...]</synopsis></opcode>
<opcode><desc>Sums any number of a-rate signals, or array elements.</desc><synopsis>ares <opcodename>sum</opcodename> asig1 [, asig2] [, asig3] [...]</synopsis><synopsis>kres <opcodename>sum</opcodename> karr</synopsis><synopsis>ires <opcodename>sum</opcodename> iarr</synopsis></opcode>
<opcode><desc>Returns an arctangent.</desc><synopsis>ares <opcodename>taninv2</opcodename> ay, ax</synopsis><synopsis>ires <opcodename>taninv2</opcodename> iy, ix</synopsis><synopsis>kres <opcodename>taninv2</opcodename> ky, kx</synopsis><synopsis>...<opcodename>taninv2</opcodename>(ky, kx)... (no rate restriction)</synopsis></opcode>
</category>
<category name="Pitch Converters:Functions">
<opcode><desc>Calculates a factor to raise/lower a frequency by a given amount of cents.</desc><synopsis><opcodename>cent</opcodename>(x) </synopsis></opcode>
<opcode><desc>Converts a Midi note number value to cycles-per-second.</desc><synopsis><opcodename>cpsmidinn</opcodename> (MidiNoteNumber)  (init- or control-rate args only)</synopsis></opcode>
<opcode><desc>Converts an octave-point-decimal value to cycles-per-second.</desc><synopsis><opcodename>cpsoct</opcodename> (oct)  (no rate restriction)</synopsis></opcode>
<opcode><desc>Converts a pitch-class value to cycles-per-second.</desc><synopsis><opcodename>cpspch</opcodename> (pch)  (init- or control-rate args only)</synopsis></opcode>
<opcode><desc>Convert frequency to midi</desc><synopsis>imidi <opcodename>ftom</opcodename> ifreq [,irnd]</synopsis><synopsis>kmidi <opcodename>ftom</opcodename> kfreq [,irnd]</synopsis></opcode>
<opcode><desc>Convert a midi to frequency</desc><synopsis>ifreq <opcodename>mtof</opcodename> imidi</synopsis><synopsis>kfreq <opcodename>mtof</opcodename> kmidi</synopsis></opcode>
<opcode><desc>Convert midi note number to string note name</desc><synopsis>Snote <opcodename>mton</opcodename> kmidi</synopsis><synopsis>Snote <opcodename>mton</opcodename> imidi</synopsis></opcode>
<opcode><desc>Convert note name to midi note number</desc><synopsis>kmidi <opcodename>ntom</opcodename> Snote</synopsis><synopsis>imidi <opcodename>ntom</opcodename> Snote</synopsis></opcode>
<opcode><desc>Calculates a factor to raise/lower a frequency by a given amount of octaves.</desc><synopsis><opcodename>octave</opcodename>(x)</synopsis></opcode>
<opcode><desc>Converts a cycles-per-second value to octave-point-decimal.</desc><synopsis><opcodename>octcps</opcodename> (cps)  (init- or control-rate args only)</synopsis></opcode>
<opcode><desc>Converts a Midi note number value to octave-point-decimal.</desc><synopsis><opcodename>octmidinn</opcodename> (MidiNoteNumber)  (init- or control-rate args only)</synopsis></opcode>
<opcode><desc>Converts a pitch-class value to octave-point-decimal.</desc><synopsis><opcodename>octpch</opcodename> (pch)  (init- or control-rate args only)</synopsis></opcode>
<opcode><desc>Converts a Midi note number value to octave point pitch-class units.</desc><synopsis><opcodename>pchmidinn</opcodename> (MidiNoteNumber)  (init- or control-rate args only)</synopsis></opcode>
<opcode><desc>Converts an octave-point-decimal value to pitch-class.</desc><synopsis><opcodename>pchoct</opcodename> (oct)  (init- or control-rate args only)</synopsis></opcode>
<opcode><desc>Convert pch to midi note number</desc><synopsis>imidi <opcodename>pchtom</opcodename> ipch</synopsis><synopsis>kmidi <opcodename>pchtom</opcodename> kpch</synopsis></opcode>
<opcode><desc>Calculates a factor to raise/lower a frequency by a given amount of semitones.</desc><synopsis><opcodename>semitone</opcodename>(x)</synopsis></opcode>
</category>
<category name="Pitch Converters:Tuning Opcodes">
<opcode><desc>Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of the octave.</desc><synopsis>icps <opcodename>cps2pch</opcodename> ipch, iequal</synopsis></opcode>
<opcode><desc>Returns micro-tuning values at k-rate.</desc><synopsis>kcps <opcodename>cpstun</opcodename> ktrig, kindex, kfn</synopsis></opcode>
<opcode><desc>Returns micro-tuning values at init-rate.</desc><synopsis>icps <opcodename>cpstuni</opcodename> index, ifn</synopsis></opcode>
<opcode><desc>Converts a pitch-class value into cycles-per-second (Hz) for equal divisions of any interval.</desc><synopsis>icps <opcodename>cpsxpch</opcodename> ipch, iequal, irepeat, ibase</synopsis></opcode>
</category>
<category name="Real-time MIDI:Input">
<opcode><desc>Get the current after-touch value for this channel.</desc><synopsis>kaft <opcodename>aftouch</opcodename> [imin] [, imax]</synopsis></opcode>
<opcode><desc>Get the current value of a MIDI channel controller.</desc><synopsis>ival <opcodename>chanctrl</opcodename> ichnl, ictlno [, ilow] [, ihigh]</synopsis><synopsis>kval <opcodename>chanctrl</opcodename> ichnl, ictlno [, ilow] [, ihigh]</synopsis></opcode>
<opcode><desc>Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.</desc><synopsis>idest <opcodename>ctrl14</opcodename> ichan, ictlno1, ictlno2, imin, imax [, ifn]</synopsis><synopsis>kdest <opcodename>ctrl14</opcodename> ichan, ictlno1, ictlno2, kmin, kmax [, ifn]</synopsis></opcode>
<opcode><desc>Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.</desc><synopsis>idest <opcodename>ctrl21</opcodename> ichan, ictlno1, ictlno2, ictlno3, imin, imax [, ifn]</synopsis><synopsis>kdest <opcodename>ctrl21</opcodename> ichan, ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]</synopsis></opcode>
<opcode><desc>Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.</desc><synopsis>idest <opcodename>ctrl7</opcodename> ichan, ictlno, imin, imax [, ifn]</synopsis><synopsis>kdest <opcodename>ctrl7</opcodename> ichan, ictlno, kmin, kmax [, ifn]</synopsis><synopsis>adest <opcodename>ctrl7</opcodename> ichan, ictlno, kmin, kmax [, ifn] [, icutoff]</synopsis></opcode>
<opcode><desc>Sets the initial values for a set of MIDI controllers.</desc><synopsis><opcodename>ctrlinit</opcodename> ichnl, ictlno1, ival1 [, ictlno2] [, ival2] [, ictlno3] \
      [, ival3] [,...ival32]</synopsis></opcode>
<opcode><desc>Initializes the controllers used to create a 14-bit MIDI value.</desc><synopsis><opcodename>initc14</opcodename> ichan, ictlno1, ictlno2, ivalue</synopsis></opcode>
<opcode><desc>Initializes the controllers used to create a 21-bit MIDI value.</desc><synopsis><opcodename>initc21</opcodename> ichan, ictlno1, ictlno2, ictlno3, ivalue</synopsis></opcode>
<opcode><desc>Initializes the controller used to create a 7-bit MIDI value.</desc><synopsis><opcodename>initc7</opcodename> ichan, ictlno, ivalue</synopsis></opcode>
<opcode><desc>Assigns a MIDI channel number to a Csound instrument.</desc><synopsis><opcodename>massign</opcodename> ichnl, insnum[, ireset]</synopsis><synopsis><opcodename>massign</opcodename> ichnl, &quot;insname&quot;[, ireset]</synopsis></opcode>
<opcode><desc>Allows a floating-point 14-bit MIDI signal scaled with a minimum and a maximum range.</desc><synopsis>idest <opcodename>midic14</opcodename> ictlno1, ictlno2, imin, imax [, ifn]</synopsis><synopsis>kdest <opcodename>midic14</opcodename> ictlno1, ictlno2, kmin, kmax [, ifn]</synopsis></opcode>
<opcode><desc>Allows a floating-point 21-bit MIDI signal scaled with a minimum and a maximum range.</desc><synopsis>idest <opcodename>midic21</opcodename> ictlno1, ictlno2, ictlno3, imin, imax [, ifn]</synopsis><synopsis>kdest <opcodename>midic21</opcodename> ictlno1, ictlno2, ictlno3, kmin, kmax [, ifn]</synopsis></opcode>
<opcode><desc>Allows a floating-point 7-bit MIDI signal scaled with a minimum and a maximum range.</desc><synopsis>idest <opcodename>midic7</opcodename> ictlno, imin, imax [, ifn]</synopsis><synopsis>kdest <opcodename>midic7</opcodename> ictlno, kmin, kmax [, ifn]</synopsis></opcode>
<opcode><desc>Get the current value (0-127) of a specified MIDI controller.</desc><synopsis>ival <opcodename>midictrl</opcodename> inum [, imin] [, imax]</synopsis><synopsis>kval <opcodename>midictrl</opcodename> inum [, imin] [, imax]</synopsis></opcode>
<opcode><desc>Get a note number from a MIDI event.</desc><synopsis>ival <opcodename>notnum</opcodename></synopsis></opcode>
<opcode><desc>Get the current pitch-bend value for this channel.</desc><synopsis>ibend <opcodename>pchbend</opcodename> [imin] [, imax]</synopsis><synopsis>kbend <opcodename>pchbend</opcodename> [imin] [, imax]</synopsis></opcode>
<opcode><desc>Assigns an instrument number to a specified MIDI program.</desc><synopsis><opcodename>pgmassign</opcodename> ipgm, inst[, ichn]</synopsis><synopsis><opcodename>pgmassign</opcodename> ipgm, &quot;insname&quot;[, ichn]</synopsis></opcode>
<opcode><desc>Returns the polyphonic after-touch pressure of the selected note number.</desc><synopsis>ires <opcodename>polyaft</opcodename> inote [, ilow] [, ihigh]</synopsis><synopsis>kres <opcodename>polyaft</opcodename> inote [, ilow] [, ihigh]</synopsis></opcode>
<opcode><desc>Get the velocity from a MIDI event.</desc><synopsis>ival <opcodename>veloc</opcodename> [ilow] [, ihigh]</synopsis></opcode>
</category>
<category name="Real-time MIDI:Output">
<opcode><desc>Sends a Non-Registered Parameter Number to the MIDI OUT port.</desc><synopsis><opcodename>nrpn</opcodename> kchan, kparmnum, kparmvalue</synopsis></opcode>
<opcode><desc>Sends MIDI aftertouch messages at i-rate.</desc><synopsis><opcodename>outiat</opcodename> ichn, ivalue, imin, imax</synopsis></opcode>
<opcode><desc>Sends MIDI controller output at i-rate.</desc><synopsis><opcodename>outic</opcodename> ichn, inum, ivalue, imin, imax</synopsis></opcode>
<opcode><desc>Sends 14-bit MIDI controller output at i-rate.</desc><synopsis><opcodename>outic14</opcodename> ichn, imsb, ilsb, ivalue, imin, imax</synopsis></opcode>
<opcode><desc>Sends polyphonic MIDI aftertouch messages at i-rate.</desc><synopsis><opcodename>outipat</opcodename> ichn, inotenum, ivalue, imin, imax</synopsis></opcode>
<opcode><desc>Sends MIDI pitch-bend messages at i-rate.</desc><synopsis><opcodename>outipb</opcodename> ichn, ivalue, imin, imax</synopsis></opcode>
<opcode><desc>Sends MIDI program change messages at i-rate</desc><synopsis><opcodename>outipc</opcodename> ichn, iprog, imin, imax</synopsis></opcode>
<opcode><desc>Sends MIDI aftertouch messages at k-rate.</desc><synopsis><opcodename>outkat</opcodename> kchn, kvalue, kmin, kmax</synopsis></opcode>
<opcode><desc>Sends MIDI controller messages at k-rate.</desc><synopsis><opcodename>outkc</opcodename> kchn, knum, kvalue, kmin, kmax</synopsis></opcode>
<opcode><desc>Sends 14-bit MIDI controller output at k-rate.</desc><synopsis><opcodename>outkc14</opcodename> kchn, kmsb, klsb, kvalue, kmin, kmax</synopsis></opcode>
<opcode><desc>Sends polyphonic MIDI aftertouch messages at k-rate.</desc><synopsis><opcodename>outkpat</opcodename> kchn, knotenum, kvalue, kmin, kmax</synopsis></opcode>
<opcode><desc>Sends MIDI pitch-bend messages at k-rate.</desc><synopsis><opcodename>outkpb</opcodename> kchn, kvalue, kmin, kmax</synopsis></opcode>
<opcode><desc>Sends MIDI program change messages at k-rate.</desc><synopsis><opcodename>outkpc</opcodename> kchn, kprog, kmin, kmax</synopsis></opcode>
</category>
<category name="Real-time MIDI:Converters">
<opcode><desc>Get the velocity of the current MIDI event.</desc><synopsis>iamp <opcodename>ampmidi</opcodename> iscal [, ifn]</synopsis></opcode>
<opcode><desc>Musically map MIDI velocity to peak amplitude within a specified dynamic range in decibels.</desc><synopsis>iamplitude <opcodename>ampmidid</opcodename> ivelocity, idecibels</synopsis><synopsis>kamplitude <opcodename>ampmidid</opcodename> kvelocity, idecibels</synopsis></opcode>
<opcode><desc>Get the note number of the current MIDI event, expressed in cycles-per-second.</desc><synopsis>icps <opcodename>cpsmidi</opcodename></synopsis></opcode>
<opcode><desc>Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in cycles-per-second.</desc><synopsis>icps <opcodename>cpsmidib</opcodename> [irange]</synopsis><synopsis>kcps <opcodename>cpsmidib</opcodename> [irange]</synopsis></opcode>
<opcode><desc>Get a MIDI note number (allows customized micro-tuning scales).</desc><synopsis>icps <opcodename>cpstmid</opcodename> ifn</synopsis></opcode>
<opcode><desc>Get the note number, in octave-point-decimal units, of the current MIDI event.</desc><synopsis>ioct <opcodename>octmidi</opcodename></synopsis></opcode>
<opcode><desc>Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in octave-point-decimal.</desc><synopsis>ioct <opcodename>octmidib</opcodename> [irange]</synopsis><synopsis>koct <opcodename>octmidib</opcodename> [irange]</synopsis></opcode>
<opcode><desc>Get the note number of the current MIDI event, expressed in pitch-class units.</desc><synopsis>ipch <opcodename>pchmidi</opcodename></synopsis></opcode>
<opcode><desc>Get the note number of the current MIDI event and modify it by the current pitch-bend value, express it in pitch-class units.</desc><synopsis>ipch <opcodename>pchmidib</opcodename> [irange]</synopsis><synopsis>kpch <opcodename>pchmidib</opcodename> [irange]</synopsis></opcode>
</category>
<category name="Real-time MIDI:Generic I/O">
<opcode><desc>Returns a generic MIDI message received by the MIDI IN port.</desc><synopsis>kstatus, kchan, kdata1, kdata2 <opcodename>midiin</opcodename></synopsis></opcode>
<opcode><desc>Sends a generic MIDI message to the MIDI OUT port.</desc><synopsis><opcodename>midiout</opcodename> kstatus, kchan, kdata1, kdata2</synopsis></opcode>
<opcode><desc>Sends a generic MIDI message to the MIDI OUT port.</desc><synopsis><opcodename>midiout_i</opcodename> istatus, ichan, idata1, idata2</synopsis></opcode>
</category>
<category name="Real-time MIDI:Event Extenders">
<opcode><desc>Indicates whether a note is in its</desc><synopsis>kflag <opcodename>release</opcodename></synopsis></opcode>
<opcode><desc>Extend the duration of real-time generated events.</desc><synopsis><opcodename>xtratim</opcodename> iextradur</synopsis></opcode>
</category>
<category name="Real-time MIDI:Note Output">
<opcode><desc>Generates arpeggios based on currently held MIDI notes.</desc><synopsis>kMidiNoteNum, kCounter<opcodename>midiarp</opcodename> kRate[, kMode]</synopsis></opcode>
<opcode><desc>Generates MIDI note messages at k-rate.</desc><synopsis><opcodename>midion</opcodename> kchn, knum, kvel</synopsis></opcode>
<opcode><desc>Sends noteon and noteoff messages to the MIDI OUT port.</desc><synopsis><opcodename>midion2</opcodename> kchn, knum, kvel, ktrig</synopsis></opcode>
<opcode><desc>Sends a stream of the MIDI notes.</desc><synopsis><opcodename>moscil</opcodename> kchn, knum, kvel, kdur, kpause</synopsis></opcode>
<opcode><desc>Send a noteoff message to the MIDI OUT port.</desc><synopsis><opcodename>noteoff</opcodename> ichn, inum, ivel</synopsis></opcode>
<opcode><desc>Send a noteon message to the MIDI OUT port.</desc><synopsis><opcodename>noteon</opcodename> ichn, inum, ivel</synopsis></opcode>
<opcode><desc>Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.</desc><synopsis><opcodename>noteondur</opcodename> ichn, inum, ivel, idur</synopsis></opcode>
<opcode><desc>Sends a noteon and a noteoff MIDI message both with the same channel, number and velocity.</desc><synopsis><opcodename>noteondur2</opcodename> ichn, inum, ivel, idur</synopsis></opcode>
</category>
<category name="Real-time MIDI:MIDI/Score Interoperability">
<opcode><desc>Gets a MIDI channel's aftertouch value.</desc><synopsis><opcodename>midichannelaftertouch</opcodename> xchannelaftertouch [, ilow] [, ihigh]</synopsis></opcode>
<opcode><desc>Returns the MIDI channel number from which the note was activated.</desc><synopsis>ichn <opcodename>midichn</opcodename></synopsis></opcode>
<opcode><desc>Gets a MIDI control change value.</desc><synopsis><opcodename>midicontrolchange</opcodename> xcontroller, xcontrollervalue [, ilow] [, ihigh]</synopsis></opcode>
<opcode><desc>Changes values, depending on MIDI activation.</desc><synopsis><opcodename>mididefault</opcodename> xdefault, xvalue</synopsis></opcode>
<opcode><desc>Gets a MIDI noteoff value.</desc><synopsis><opcodename>midinoteoff</opcodename> xkey, xvelocity</synopsis></opcode>
<opcode><desc>Gets a MIDI note number as a cycles-per-second frequency.</desc><synopsis><opcodename>midinoteoncps</opcodename> xcps, xvelocity</synopsis></opcode>
<opcode><desc>Gets a MIDI note number value.</desc><synopsis><opcodename>midinoteonkey</opcodename> xkey, xvelocity</synopsis></opcode>
<opcode><desc>Gets a MIDI note number value as octave-point-decimal value.</desc><synopsis><opcodename>midinoteonoct</opcodename> xoct, xvelocity</synopsis></opcode>
<opcode><desc>Gets a MIDI note number as a pitch-class value.</desc><synopsis><opcodename>midinoteonpch</opcodename> xpch, xvelocity</synopsis></opcode>
<opcode><desc>Gets a MIDI pitchbend value.</desc><synopsis><opcodename>midipitchbend</opcodename> xpitchbend [, ilow] [, ihigh]</synopsis></opcode>
<opcode><desc>Gets a MIDI polyphonic aftertouch value.</desc><synopsis><opcodename>midipolyaftertouch</opcodename> xpolyaftertouch, xcontrollervalue [, ilow] [, ihigh]</synopsis></opcode>
<opcode><desc>Gets a MIDI program change value.</desc><synopsis><opcodename>midiprogramchange</opcodename> xprogram</synopsis></opcode>
</category>
<category name="Real-time MIDI:System Realtime">
<opcode><desc>Sends a MIDI CLOCK message.</desc><synopsis><opcodename>mclock</opcodename> ifreq</synopsis></opcode>
<opcode><desc>Send system real-time messages to the MIDI OUT port.</desc><synopsis><opcodename>mrtmsg</opcodename> imsgtype</synopsis></opcode>
</category>
<category name="Real-time MIDI:Slider Banks">
<opcode><desc>Creates a bank of 16 different 14-bit MIDI control message numbers.</desc><synopsis>i1,...,i16 <opcodename>s16b14</opcodename> ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, \
      initvalue1, ifn1,..., ictlno_msb16, ictlno_lsb16, imin16, imax16, initvalue16, ifn16</synopsis><synopsis>k1,...,k16 <opcodename>s16b14</opcodename> ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, \
      initvalue1, ifn1,..., ictlno_msb16, ictlno_lsb16, imin16, imax16, initvalue16, ifn16</synopsis></opcode>
<opcode><desc>Creates a bank of 32 different 14-bit MIDI control message numbers.</desc><synopsis>i1,...,i32 <opcodename>s32b14</opcodename> ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, \
      initvalue1, ifn1,..., ictlno_msb32, ictlno_lsb32, imin32, imax32, initvalue32, ifn32</synopsis><synopsis>k1,...,k32 <opcodename>s32b14</opcodename> ichan, ictlno_msb1, ictlno_lsb1, imin1, imax1, \
      initvalue1, ifn1,..., ictlno_msb32, ictlno_lsb32, imin32, imax32, initvalue32, ifn32</synopsis></opcode>
<opcode><desc>Creates a bank of 16 different MIDI control message numbers.</desc><synopsis>i1,...,i16 <opcodename>slider16</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum16, imin16, imax16, init16, ifn16</synopsis><synopsis>k1,...,k16 <opcodename>slider16</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum16, imin16, imax16, init16, ifn16</synopsis></opcode>
<opcode><desc>Creates a bank of 16 different MIDI control message numbers, filtered before output.</desc><synopsis>k1,...,k16 <opcodename>slider16f</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1, \
      icutoff1,..., ictlnum16, imin16, imax16, init16, ifn16, icutoff16</synopsis></opcode>
<opcode><desc>Stores a bank of 16 different MIDI control messages to a table.</desc><synopsis>kflag <opcodename>slider16table</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, \
      init1, ifn1, .... , ictlnum16, imin16, imax16, init16, ifn16</synopsis></opcode>
<opcode><desc>Stores a bank of 16 different MIDI control messages to a table, filtered before output.</desc><synopsis>kflag <opcodename>slider16tablef</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, \
      init1, ifn1, icutoff1, .... , ictlnum16, imin16, imax16, init16, ifn16, icutoff16</synopsis></opcode>
<opcode><desc>Creates a bank of 32 different MIDI control message numbers.</desc><synopsis>i1,...,i32 <opcodename>slider32</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum32, imin32, imax32, init32, ifn32</synopsis><synopsis>k1,...,k32 <opcodename>slider32</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum32, imin32, imax32, init32, ifn32</synopsis></opcode>
<opcode><desc>Creates a bank of 32 different MIDI control message numbers, filtered before output.</desc><synopsis>k1,...,k32 <opcodename>slider32f</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, \
      ..., ictlnum32, imin32, imax32, init32, ifn32, icutoff32</synopsis></opcode>
<opcode><desc>Stores a bank of 32 different MIDI control messages to a table.</desc><synopsis>kflag <opcodename>slider32table</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, \
      imax1, init1, ifn1, .... , ictlnum32, imin32, imax32, init32, ifn32</synopsis></opcode>
<opcode><desc>Stores a bank of 32 different MIDI control messages to a table, filtered before output.</desc><synopsis>kflag <opcodename>slider32tablef</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, \
      init1, ifn1, icutoff1, .... , ictlnum32, imin32, imax32, init32, ifn32, icutoff32</synopsis></opcode>
<opcode><desc>Creates a bank of 64 different MIDI control message numbers.</desc><synopsis>i1,...,i64 <opcodename>slider64</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum64, imin64, imax64, init64, ifn64</synopsis><synopsis>k1,...,k64 <opcodename>slider64</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum64, imin64, imax64, init64, ifn64</synopsis></opcode>
<opcode><desc>Creates a bank of 64 different MIDI control message numbers, filtered before output.</desc><synopsis>k1,...,k64 <opcodename>slider64f</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1, \
      icutoff1,..., ictlnum64, imin64, imax64, init64, ifn64, icutoff64</synopsis></opcode>
<opcode><desc>Stores a bank of 64 different MIDI control messages to a table.</desc><synopsis>kflag <opcodename>slider64table</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, \
      imax1, init1, ifn1, .... , ictlnum64, imin64, imax64, init64, ifn64</synopsis></opcode>
<opcode><desc>Stores a bank of 64 different MIDI control messages to a table, filtered before output.</desc><synopsis>kflag <opcodename>slider64tablef</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, \
      init1, ifn1, icutoff1, .... , ictlnum64, imin64, imax64, init64, ifn64, icutoff64</synopsis></opcode>
<opcode><desc>Creates a bank of 8 different MIDI control message numbers.</desc><synopsis>i1,...,i8 <opcodename>slider8</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum8, imin8, imax8, init8, ifn8</synopsis><synopsis>k1,...,k8 <opcodename>slider8</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1,..., \
      ictlnum8, imin8, imax8, init8, ifn8</synopsis></opcode>
<opcode><desc>Creates a bank of 8 different MIDI control message numbers, filtered before output.</desc><synopsis>k1,...,k8 <opcodename>slider8f</opcodename> ichan, ictlnum1, imin1, imax1, init1, ifn1, icutoff1, \
      ..., ictlnum8, imin8, imax8, init8, ifn8, icutoff8</synopsis></opcode>
<opcode><desc>Stores a bank of 8 different MIDI control messages to a table.</desc><synopsis>kflag <opcodename>slider8table</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, \
      init1, ifn1,..., ictlnum8, imin8, imax8, init8, ifn8</synopsis></opcode>
<opcode><desc>Stores a bank of 8 different MIDI control messages to a table, filtered before output.</desc><synopsis>kflag <opcodename>slider8tablef</opcodename> ichan, ioutTable, ioffset, ictlnum1, imin1, imax1, \
      init1, ifn1, icutoff1, .... , ictlnum8, imin8, imax8, init8, ifn8, icutoff8</synopsis></opcode>
<opcode><desc>Creates a bank of 16 different MIDI control message numbers from a KAWAI MM-16 midi mixer.</desc><synopsis>k1, k2, ...., k16 <opcodename>sliderKawai</opcodename> imin1, imax1, init1, ifn1, \
      imin2, imax2, init2, ifn2, ..., imin16, imax16, init16, ifn16</synopsis></opcode>
</category>
<category name="Signal Flow Graph Opcodes">
<opcode><desc>Activates the indicated instrument in the orchestra header,
      without need for an i statement.</desc><synopsis> <opcodename>alwayson</opcodename> Tinstrument [p4, ..., pn]</synopsis></opcode>
<opcode><desc>Connects a source outlet to a sink inlet.</desc><synopsis><opcodename>connect </opcodename>Tsource1, Soutlet1, Tsink1, Sinlet1</synopsis></opcode>
<opcode><desc>Generate a function table from within an instrument definition, without duplication of data.</desc><synopsis>ifno <opcodename>ftgenonce</opcodename> ip1, ip2dummy, isize, igen, iarga, iargb, ...</synopsis></opcode>
<opcode><desc>Receives an arate signal into an instrument through a named port.</desc><synopsis>asignal <opcodename>inleta </opcodename>Sname</synopsis></opcode>
<opcode><desc>Receives an frate signal (fsig) into an instrument from a named port.</desc><synopsis>fsignal <opcodename>inletf </opcodename>Sname</synopsis></opcode>
<opcode><desc>Receives a krate signal into an instrument from a named port.</desc><synopsis>ksignal <opcodename>inletk </opcodename>Sname</synopsis></opcode>
<opcode><desc>Receives a krate signal into an instrument from a named port.</desc><synopsis>ksignal <opcodename>inletkid </opcodename>Sname, SinstanceID</synopsis></opcode>
<opcode><desc>Receives an arate array signal into an instrument through a named port.</desc><synopsis>array <opcodename>inletv </opcodename>Sname</synopsis></opcode>
<opcode><desc>Sends an arate signal out from an instrument to a named port.</desc><synopsis><opcodename>outleta </opcodename>Sname, asignal</synopsis></opcode>
<opcode><desc>Sends a frate signal (fsig) out from an instrument to a named port.</desc><synopsis><opcodename>outletf </opcodename>Sname, fsignal</synopsis></opcode>
<opcode><desc>Sends a krate signal out from an instrument to a named port.</desc><synopsis><opcodename>outletk </opcodename>Sname, ksignal</synopsis></opcode>
<opcode><desc>Sends a krate signal out from an instrument to a named port.</desc><synopsis><opcodename>outletkid </opcodename>Sname, SinstanceID, ksignal</synopsis></opcode>
<opcode><desc>Sends an arate array signal out from an instrument to a named port.</desc><synopsis><opcodename>outletv </opcodename>Sname, array</synopsis></opcode>
</category>
<category name="Spectral Processing:STFT">
<opcode><desc>Deprecated.</desc><synopsis><opcodename>ktableseg</opcodename> ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]</synopsis></opcode>
<opcode><desc>Reads from a</desc><synopsis>ares <opcodename>pvadd</opcodename> ktimpnt, kfmod, ifilcod, ifn, ibins [, ibinoffset] \
      [, ibinincr] [, iextractmode] [, ifreqlim] [, igatefn]</synopsis></opcode>
<opcode><desc>Reads from a phase vocoder analysis file and makes the retrieved data available.</desc><synopsis><opcodename>pvbufread</opcodename> ktimpnt, ifile</synopsis></opcode>
<opcode><desc>Applies the amplitudes from one phase vocoder analysis file to the data from a second file.</desc><synopsis>ares <opcodename>pvcross</opcodename> ktimpnt, kfmod, ifile, kampscale1, kampscale2 [, ispecwp]</synopsis></opcode>
<opcode><desc>Interpolates between the amplitudes and frequencies of two phase vocoder analysis files.</desc><synopsis>ares <opcodename>pvinterp</opcodename> ktimpnt, kfmod, ifile, kfreqscale1, kfreqscale2, \
      kampscale1, kampscale2, kfreqinterp, kampinterp</synopsis></opcode>
<opcode><desc>Implements signal reconstruction using an fft-based phase vocoder.</desc><synopsis>ares <opcodename>pvoc</opcodename> ktimpnt, kfmod, ifilcod [, ispecwp] [, iextractmode] \
      [, ifreqlim] [, igatefn]</synopsis></opcode>
<opcode><desc>Reads from a phase vocoder analysis file and returns the frequency and amplitude from a single analysis channel or bin.</desc><synopsis>kfreq, kamp <opcodename>pvread</opcodename> ktimpnt, ifile, ibin</synopsis></opcode>
<opcode><desc>Creates a new function table by making linear segments between values in stored function tables.</desc><synopsis><opcodename>tableseg</opcodename> ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]</synopsis></opcode>
<opcode><desc>Creates a new function table by making exponential segments between values in stored function tables.</desc><synopsis><opcodename>tablexseg</opcodename> ifn1, idur1, ifn2 [, idur2] [, ifn3] [...]</synopsis></opcode>
<opcode><desc>Implements signal reconstruction using an fft-based phase vocoder and an extra envelope.</desc><synopsis>ares <opcodename>vpvoc</opcodename> ktimpnt, kfmod, ifile [, ispecwp] [, ifn]</synopsis></opcode>
</category>
<category name="Spectral Processing:LPC">
<opcode><desc>Resynthesises a signal from the data passed internally by a previous lpread, applying formant shifting.</desc><synopsis>ares <opcodename>lpfreson</opcodename> asig, kfrqratio</synopsis></opcode>
<opcode><desc>Computes a new set of poles from the interpolation between two analysis.</desc><synopsis><opcodename>lpinterp</opcodename> islot1, islot2, kmix</synopsis></opcode>
<opcode><desc>Reads a control file of time-ordered information frames.</desc><synopsis>krmsr, krmso, kerr, kcps <opcodename>lpread</opcodename> ktimpnt, ifilcod [, inpoles] [, ifrmrate]</synopsis></opcode>
<opcode><desc>Resynthesises a signal from the data passed internally by a previous lpread.</desc><synopsis>ares <opcodename>lpreson</opcodename> asig</synopsis></opcode>
<opcode><desc>Selects the slot to be use by further lp opcodes.</desc><synopsis><opcodename>lpslot</opcodename> islot</synopsis></opcode>
</category>
<category name="Spectral Processing:Non-Standard">
<opcode><desc>Perform a weighted add of two input spectra.</desc><synopsis>wsig <opcodename>specaddm</opcodename> wsig1, wsig2 [, imul2]</synopsis></opcode>
<opcode><desc>Finds the positive difference values between consecutive spectral frames.</desc><synopsis>wsig <opcodename>specdiff</opcodename> wsigin</synopsis></opcode>
<opcode><desc>Displays the magnitude values of the spectrum.</desc><synopsis><opcodename>specdisp</opcodename> wsig, iprd [, iwtflg]</synopsis></opcode>
<opcode><desc>Filters each channel of an input spectrum.</desc><synopsis>wsig <opcodename>specfilt</opcodename> wsigin, ifhtim</synopsis></opcode>
<opcode><desc>Accumulates the values of successive spectral frames.</desc><synopsis>wsig <opcodename>spechist</opcodename> wsigin</synopsis></opcode>
<opcode><desc>Estimates the pitch of the most prominent complex tone in the spectrum.</desc><synopsis>koct, kamp <opcodename>specptrk</opcodename> wsig, kvar, ilo, ihi, istr, idbthresh, inptls, \
      irolloff [, iodd] [, iconfs] [, interp] [, ifprd] [, iwtflg]</synopsis></opcode>
<opcode><desc>Scales an input spectral datablock with spectral envelopes.</desc><synopsis>wsig <opcodename>specscal</opcodename> wsigin, ifscale, ifthresh</synopsis></opcode>
<opcode><desc>Sums the magnitudes across all channels of the spectrum.</desc><synopsis>ksum <opcodename>specsum</opcodename> wsig [, interp]</synopsis></opcode>
<opcode><desc>Generate a constant-Q, exponentially-spaced DFT.</desc><synopsis>wsig <opcodename>spectrum</opcodename> xsig, iprd, iocts, ifrqa [, iq] [, ihann] [, idbout] \
      [, idsprd] [, idsinrs]</synopsis></opcode>
</category>
<category name="Spectral Processing:Streaming">
<opcode><desc>PVS tracks to amplitude+frequency conversion.</desc><synopsis>fsig <opcodename>binit</opcodename> fin, isize</synopsis></opcode>
<opcode><desc>Generate an fsig from a mono audio source ain, using phase
      vocoder overlap-add analysis and GPU hardware. Experimental and
      only available as source code at the moment.</desc><synopsis>fsig <opcodename>cudanal</opcodename> ain, ifftsize, ioverlap, iwinsize, iwintype [, iformat] [, iinit]</synopsis></opcode>
<opcode><desc>Perform sliding phase vocoder algorithm with simplified
      transformational FM using GPU hardware. Experimental and
      only available as source code at the moment.</desc><synopsis>asig <opcodename>cudasliding</opcodename> ain, amod, iwinsize</synopsis></opcode>
<opcode><desc>Synthesis by additive synthesis and inverse FFT. Experimental and
      only available as source code at the moment.</desc><synopsis>asig <opcodename>cudasynth</opcodename> kamp, kfreq, itab, iftab, iatab[, inum]</synopsis><synopsis>asig <opcodename>cudasynth</opcodename> fsig, kamp, kfreq[, inum]</synopsis><synopsis>asig <opcodename>cudasynth</opcodename> fsig</synopsis></opcode>
<opcode><desc>Partial track spectral analysis.</desc><synopsis>ftrks <opcodename>partials</opcodename> ffr, fphs, kthresh, kminpts, kmaxgap, imaxtracks</synopsis></opcode>
<opcode><desc>Copies spectral data to k-rate arrays (or t-variables). Also known as pvs2array.</desc><synopsis>kframe <opcodename>pvs2tab</opcodename> tvar|kvar[], fsig</synopsis><synopsis>kframe <opcodename>pvs2tab</opcodename> kmags[], kfreqs[], fsig</synopsis></opcode>
<opcode><desc>Resynthesize using a fast oscillator-bank.</desc><synopsis>ares <opcodename>pvsadsyn</opcodename> fsrc, inoscs, kfmod [, ibinoffset] [, ibinincr] [, iinit]</synopsis></opcode>
<opcode><desc>Generate an fsig from a mono audio source ain, using phase vocoder overlap-add analysis.</desc><synopsis>fsig <opcodename>pvsanal</opcodename> ain, ifftsize, ioverlap, iwinsize, iwintype [, iformat] [, iinit]</synopsis></opcode>
<opcode><desc>Arpeggiate the spectral components of a streaming pv signal.</desc><synopsis>fsig <opcodename>pvsarp</opcodename> fsigin, kbin, kdepth, kgain</synopsis></opcode>
<opcode><desc>A band pass filter working in the spectral domain.</desc><synopsis>fsig <opcodename>pvsbandp</opcodename> fsigin, xlowcut, xlowfull, \
      xhighfull, xhighcut[, ktype]</synopsis></opcode>
<opcode><desc>A band reject filter working in the spectral domain.</desc><synopsis>fsig <opcodename>pvsbandr</opcodename> fsigin, xlowcut, xlowfull, \
      xhighfull, xhighcut[, ktype]</synopsis></opcode>
<opcode><desc>Obtain the amp and freq values off a PVS signal bin.</desc><synopsis>kamp, kfr <opcodename>pvsbin</opcodename> fsig, kbin</synopsis></opcode>
<opcode><desc>Average the amp/freq time functions of each analysis channel for
    a specified time.</desc><synopsis>fsig <opcodename>pvsblur</opcodename> fsigin, kblurtime, imaxdel</synopsis></opcode>
<opcode><desc>This opcode creates and writes to a circular buffer for f-signals (streaming PV signals).</desc><synopsis>ihandle, ktime  <opcodename>pvsbuffer</opcodename> fsig, ilen </synopsis></opcode>
<opcode><desc>This opcode reads a circular buffer of f-signals (streaming PV signals).</desc><synopsis>fsig <opcodename>pvsbufread</opcodename>  ktime, khandle[, ilo, ihi, iclear] </synopsis></opcode>
<opcode><desc>This opcode reads a circular buffer of f-signals (streaming PV signals), with binwise additional delays.</desc><synopsis>fsig <opcodename>pvsbufread2</opcodename>  ktime, khandle, ift1, ift2 </synopsis></opcode>
<opcode><desc>Scale the frequency components of a pv stream.</desc><synopsis>fsig <opcodename>pvscale</opcodename> fsigin, kscal[, kkeepform, kgain, kcoefs]</synopsis></opcode>
<opcode><desc>Calculate the spectral centroid of a signal.</desc><synopsis>kcent <opcodename>pvscent</opcodename> fsig</synopsis><synopsis>acent <opcodename>pvscent</opcodename> fsig</synopsis></opcode>
<opcode><desc>Calculate the cepstrum of a pvs input, optionally liftering coefficients.</desc><synopsis>keps[] <opcodename>pvsceps</opcodename> fsig[, icoefs]</synopsis></opcode>
<opcode><desc>Performs cross-synthesis between two source fsigs.</desc><synopsis>fsig <opcodename>pvscross</opcodename> fsrc, fdest, kamp1, kamp2</synopsis></opcode>
<opcode><desc>Spectral azimuth-based de-mixing of stereo sources.</desc><synopsis>fsig <opcodename>pvsdemix</opcodename> fleft, fright, kpos, kwidth, ipoints</synopsis></opcode>
<opcode><desc>Read a selected channel from a PVOC-EX analysis file.</desc><synopsis>fsig <opcodename>pvsdiskin</opcodename> SFname,ktscal,kgain[,ioffset, ichan]</synopsis></opcode>
<opcode><desc>Displays a PVS signal as an amplitude vs. freq graph.</desc><synopsis><opcodename>pvsdisp</opcodename> fsig[, ibins, iwtflg] </synopsis></opcode>
<opcode><desc>Multiply amplitudes of a pvoc stream by those of a second
pvoc stream, with dynamic scaling.</desc><synopsis>fsig <opcodename>pvsfilter</opcodename> fsigin, fsigfil, kdepth[, igain]</synopsis></opcode>
<opcode><desc>Read a selected channel from a PVOC-EX analysis file.</desc><synopsis>fsig <opcodename>pvsfread</opcodename> ktimpt, ifn [, ichan]</synopsis></opcode>
<opcode><desc>Freeze the amplitude and frequency time functions of a pv stream according to a control-rate
      trigger.</desc><synopsis>fsig <opcodename>pvsfreeze</opcodename> fsigin, kfreeza, kfreezf</synopsis></opcode>
<opcode><desc>Reads amplitude and/or frequency data from function tables.</desc><synopsis><opcodename>pvsftr</opcodename> fsrc, ifna [, ifnf]</synopsis></opcode>
<opcode><desc>Writes amplitude and/or frequency data to function tables.</desc><synopsis>kflag <opcodename>pvsftw</opcodename> fsrc, ifna [, ifnf]</synopsis></opcode>
<opcode><desc>Write a fsig to a PVOCEX file.</desc><synopsis><opcodename>pvsfwrite</opcodename> fsig, ifile</synopsis></opcode>
<opcode><desc>Scale the amplitude of a pv stream.</desc><synopsis>fsig <opcodename>pvsgain</opcodename> fsigin, kgain </synopsis></opcode>
<opcode><desc>Shift the frequency components of a pv stream, stretching/compressing
      its spectrum.</desc><synopsis>fsig <opcodename>pvshift</opcodename> fsigin, kshift, klowest[, kkeepform, igain, kcoefs]</synopsis></opcode>
<opcode><desc>Instantaneous Frequency Distribution, magnitude and phase analysis.</desc><synopsis>ffr,fphs <opcodename>pvsifd</opcodename> ain, ifftsize, ihopsize, iwintype[,iscal]</synopsis></opcode>
<opcode><desc>Retrieve an fsig from the input software bus; a pvs equivalent to chani.</desc><synopsis>fsig <opcodename>pvsin</opcodename> kchan[, isize, iolap, iwinsize, iwintype, iformat]</synopsis></opcode>
<opcode><desc>Get information from a PVOC-EX formatted source.</desc><synopsis>ioverlap, inumbins, iwinsize, iformat <opcodename>pvsinfo</opcodename> fsrc</synopsis></opcode>
<opcode><desc>Initialise a spectral (f) variable to zero.</desc><synopsis>fsig <opcodename>pvsinit</opcodename> isize[, iolap, iwinsize, iwintype, iformat]</synopsis></opcode>
<opcode><desc>Frequency lock an input fsig</desc><synopsis>fsig <opcodename>pvslock</opcodename> fsigin, klock</synopsis></opcode>
<opcode><desc>Modify amplitudes using a function table, with dynamic scaling.</desc><synopsis>fsig <opcodename>pvsmaska</opcodename> fsrc, ifn, kdepth</synopsis></opcode>
<opcode><desc>Mix 'seamlessly' two pv signals.</desc><synopsis>fsig <opcodename>pvsmix</opcodename> fsigin1, fsigin2</synopsis></opcode>
<opcode><desc>Smooth the amplitude and frequency time functions of a pv stream using parallel 1st order
      lowpass IIR filters with time-varying cutoff frequency.</desc><synopsis>fsig <opcodename>pvsmooth</opcodename> fsigin, kacf, kfcf</synopsis></opcode>
<opcode><desc>Performs morphing (or interpolation) between two source fsigs.</desc><synopsis>fsig <opcodename>pvsmorph</opcodename> fsig1, fsig2, kampint, kfrqint</synopsis></opcode>
<opcode><desc>PVS-based oscillator simulator.</desc><synopsis>fsig <opcodename>pvsosc</opcodename> kamp, kfreq, ktype, isize [,ioverlap] [, iwinsize] [, iwintype] [, iformat]</synopsis></opcode>
<opcode><desc>Write a fsig to the pvs output bus.</desc><synopsis><opcodename>pvsout</opcodename> fsig, kchan</synopsis></opcode>
<opcode><desc>Track the pitch and amplitude of a PVS signal.</desc><synopsis>kfr, kamp <opcodename>pvspitch</opcodename> fsig, kthresh</synopsis></opcode>
<opcode><desc>Phase vocoder analysis processing with onset detection/processing.</desc><synopsis>fsig <opcodename>pvstanal</opcodename> ktimescal, kamp, kpitch, ktab, [kdetect, kwrap, ioffset,ifftsize, ihop, idbthresh]
      </synopsis></opcode>
<opcode><desc>Transforms a pvoc stream according to a masking function table.</desc><synopsis>fsig <opcodename>pvstencil</opcodename> fsigin, kgain, klevel, iftable</synopsis></opcode>
<opcode><desc>Retain only the N loudest bins.</desc><synopsis>fsig <opcodename>pvstrace</opcodename> fsigin, kn </synopsis><synopsis>fsig, kBins[] <opcodename>pvstrace</opcodename> fsigin, kn[, isort] </synopsis></opcode>
<opcode><desc>Combine the spectral envelope of one fsig with the excitation (frequencies) of another.</desc><synopsis>fsig <opcodename>pvsvoc</opcodename> famp, fexc, kdepth, kgain [,kcoefs]</synopsis></opcode>
<opcode><desc>Warp the spectral envelope of a PVS signal</desc><synopsis>fsig <opcodename>pvswarp</opcodename> fsigin, kscal, kshift[, klowest, kmeth, kgain, kcoefs]</synopsis></opcode>
<opcode><desc>Resynthesise using a FFT overlap-add.</desc><synopsis>ares <opcodename>pvsynth</opcodename> fsrc, [iinit]</synopsis></opcode>
<opcode><desc>Streaming partial track additive synthesis with cubic phase interpolation with
pitch control and support for timescale-modified input</desc><synopsis>asig <opcodename>resyn</opcodename> fin, kscal, kpitch, kmaxtracks, ifn</synopsis></opcode>
<opcode><desc>Streaming partial track additive synthesis with cubic phase interpolation</desc><synopsis>asig <opcodename>sinsyn</opcodename> fin, kscal, kmaxtracks, ifn</synopsis></opcode>
<opcode><desc>Copies spectral data from k-rate arrays (or t-variables.). Also known as pvsfromarray.</desc><synopsis>fsig <opcodename>tab2pvs</opcodename> tvar|karr[][,ihopsize, iwinsize, iwintype]</synopsis><synopsis>fsig <opcodename>tab2pvs</opcodename> kmags[], kfreqs[][,ihopsize, iwinsize, iwintype]</synopsis></opcode>
<opcode><desc>Instantaneous Frequency Distribution, magnitude and phase analysis.</desc><synopsis>ffr,fphs <opcodename>tabifd</opcodename> ktimpt, kamp, kpitch, ifftsize, ihopsize, iwintype,ifn</synopsis></opcode>
<opcode><desc>Streaming partial track additive synthesis</desc><synopsis>asig <opcodename>tradsyn</opcodename> fin, kscal, kpitch, kmaxtracks, ifn</synopsis></opcode>
<opcode><desc>Streaming partial track cross-synthesis.</desc><synopsis>fsig <opcodename>trcross</opcodename> fin1, fin2, ksearch, kdepth [, kmode] </synopsis></opcode>
<opcode><desc>Streaming partial track filtering.</desc><synopsis>fsig <opcodename>trfilter</opcodename> fin, kamnt, ifn</synopsis></opcode>
<opcode><desc>Extracts the highest-frequency track from a streaming track input signal.</desc><synopsis>fsig, kfr, kamp <opcodename>trhighest</opcodename> fin1, kscal</synopsis></opcode>
<opcode><desc>Extracts the lowest-frequency track from a streaming track input signal.</desc><synopsis>fsig, kfr, kamp <opcodename>trlowest</opcodename> fin1, kscal</synopsis></opcode>
<opcode><desc>Streaming partial track mixing.</desc><synopsis>fsig <opcodename>trmix</opcodename> fin1, fin2 </synopsis></opcode>
<opcode><desc>Streaming partial track frequency scaling.</desc><synopsis>fsig <opcodename>trscale</opcodename> fin, kpitch[, kgain]</synopsis></opcode>
<opcode><desc>Streaming partial track frequency scaling.</desc><synopsis>fsig <opcodename>trshift</opcodename> fin, kpshift[, kgain]</synopsis></opcode>
<opcode><desc>Streaming partial track frequency splitting.</desc><synopsis>fsiglow, fsighi <opcodename>trsplit</opcodename> fin, ksplit[, kgainlow, kgainhigh]</synopsis></opcode>
</category>
<category name="Spectral Processing:ATS">
<opcode><desc>uses the data from an ATS analysis file to perform additive synthesis.</desc><synopsis>ar <opcodename>ATSadd</opcodename> ktimepnt, kfmod, iatsfile, ifn, ipartials[, ipartialoffset, \
        ipartialincr, igatefn]</synopsis></opcode>
<opcode><desc>uses the data from an ATS analysis file to perform noise resynthesis.</desc><synopsis>ar <opcodename>ATSaddnz</opcodename> ktimepnt, iatsfile, ibands[, ibandoffset, ibandincr]</synopsis></opcode>
<opcode><desc>reads data from and ATS data file and stores it in an internal data table of frequency, amplitude pairs.</desc><synopsis><opcodename>ATSbufread</opcodename> ktimepnt, kfmod, iatsfile, ipartials[, ipartialoffset, \
          ipartialincr]</synopsis></opcode>
<opcode><desc>perform cross synthesis from ATS analysis files.</desc><synopsis>ar <opcodename>ATScross</opcodename> ktimepnt, kfmod, iatsfile, ifn, kmylev, kbuflev, ipartials \
          [, ipartialoffset, ipartialincr]</synopsis></opcode>
<opcode><desc>reads data out of the header of an ATS file.</desc><synopsis>idata <opcodename>ATSinfo</opcodename> iatsfile, ilocation</synopsis></opcode>
<opcode><desc>allows a user to determine the frequency envelope of any</desc><synopsis>kamp <opcodename>ATSinterpread</opcodename> kfreq</synopsis></opcode>
<opcode><desc>returns a frequency, amplitude pair from an</desc><synopsis>kfrq, kamp <opcodename>ATSpartialtap</opcodename> ipartialnum</synopsis></opcode>
<opcode><desc>reads data from an ATS file.</desc><synopsis>kfreq, kamp <opcodename>ATSread</opcodename> ktimepnt, iatsfile, ipartial</synopsis></opcode>
<opcode><desc>reads data from an ATS file.</desc><synopsis>kenergy <opcodename>ATSreadnz</opcodename> ktimepnt, iatsfile, iband</synopsis></opcode>
<opcode><desc>uses the data from an ATS analysis file to perform resynthesis.</desc><synopsis>ar <opcodename>ATSsinnoi</opcodename> ktimepnt, ksinlev, knzlev, kfmod, iatsfile, ipartials \
          [, ipartialoffset, ipartialincr]</synopsis></opcode>
</category>
<category name="Spectral Processing:Loris">
<opcode><desc>Morphs two stored sets of bandwidth-enhanced partials
    and stores a new set of partials representing the morphed
    sound. The morph is performed by linearly interpolating the
    parameter envelopes (frequency, amplitude, and bandwidth, or
    noisiness) of the bandwidth-enhanced partials according to
    control-rate frequency, amplitude, and bandwidth morphing
    functions.</desc><synopsis><opcodename>lorismorph</opcodename> isrcidx, itgtidx, istoreidx, kfreqmorphenv, kampmorphenv, kbwmorphenv</synopsis></opcode>
<opcode><desc>renders a stored set of bandwidth-enhanced partials using the method of Bandwidth-Enhanced Additive Synthesis implemented in the Loris software, applying control-rate frequency, amplitude, and bandwidth scaling envelopes.</desc><synopsis>ar <opcodename>lorisplay</opcodename> ireadidx, kfreqenv, kampenv, kbwenv</synopsis></opcode>
<opcode><desc>Imports a set of bandwidth-enhanced partials from a SDIF-format
    data file, applying control-rate frequency, amplitude, and
    bandwidth scaling envelopes, and stores the modified partials in
    memory.</desc><synopsis><opcodename>lorisread</opcodename> ktimpnt, ifilcod, istoreidx, kfreqenv, kampenv, kbwenv[, ifadetime]</synopsis></opcode>
</category>
<category name="Spectral Processing:Other">
<opcode><desc>Calculate the spectral centroid of a signal.</desc><synopsis>kcent <opcodename>centroid</opcodename> asig, ktrig, ifftsize</synopsis></opcode>
<opcode><desc>Phase-locked vocoder processing with onset detection/processing, 'tempo-scaling'.</desc><synopsis>asig[,asig2] <opcodename>filescal</opcodename> ktimescal, kamp, kpitch, Sfile, klock [,ifftsize, idecim, ithresh]
      </synopsis></opcode>
<opcode><desc>Phase-locked vocoder processing.</desc><synopsis>asig <opcodename>mincer</opcodename> atimpt, kamp, kpitch, ktab, klock[,ifftsize,idecim]
      </synopsis></opcode>
<opcode><desc>Phase-locked vocoder processing with onset detection/processing, 'tempo-scaling'.</desc><synopsis>asig, asig2, ktime <opcodename>mp3scal</opcodename> Sfile, ktimescal, kpitch, kamp[, iskip, ifftsize, idecim, ilock]
      </synopsis></opcode>
<opcode><desc>Extreme time-stretching algorithm by Nasca Octavian Paul.</desc><synopsis>asig <opcodename>paulstretch</opcodename> istretch, iwindowsize, ift
    </synopsis></opcode>
<opcode><desc>Phase-locked vocoder processing with onset detection/processing, 'tempo-scaling'.</desc><synopsis>asig <opcodename>temposcal</opcodename> ktimescal, kamp, kpitch, ktab, klock [,ifftsize, idecim, ithresh]
      </synopsis></opcode>
</category>
<category name="Strings:Definition">
<opcode><desc>Set string variable to value read from an URL</desc><synopsis>Sdst <opcodename>strfromurl</opcodename> StringURL</synopsis></opcode>
<opcode><desc>Set string variable to value from strset table or string p-field</desc><synopsis>Sdst <opcodename>strget</opcodename> indx</synopsis></opcode>
<opcode><desc>Allows a string to be linked with a numeric value.</desc><synopsis><opcodename>strset</opcodename> iarg, istring</synopsis></opcode>
</category>
<category name="Strings:Manipulation">
<opcode><desc>Print a string constant or variable</desc><synopsis><opcodename>puts</opcodename> Sstr, ktrig[, inonl]</synopsis></opcode>
<opcode><desc>printf-style formatted output to a string variable.</desc><synopsis>Sdst <opcodename>sprintf</opcodename> Sfmt, xarg1[, xarg2[, ... ]]</synopsis></opcode>
<opcode><desc>printf-style formatted output to a string variable at k-rate.</desc><synopsis>Sdst <opcodename>sprintfk</opcodename> Sfmt, xarg1[, xarg2[, ... ]]</synopsis></opcode>
<opcode><desc>Concatenate strings</desc><synopsis>Sdst <opcodename>strcat</opcodename> Ssrc1, Ssrc2</synopsis></opcode>
<opcode><desc>Concatenate strings (k-rate)</desc><synopsis>Sdst <opcodename>strcatk</opcodename> Ssrc1, Ssrc2</synopsis></opcode>
<opcode><desc>Compare strings</desc><synopsis>ires <opcodename>strcmp</opcodename> S1, S2</synopsis></opcode>
<opcode><desc>Compare strings</desc><synopsis>kres <opcodename>strcmpk</opcodename> S1, S2</synopsis></opcode>
<opcode><desc>Assign value to a string variable</desc><synopsis>Sdst <opcodename>strcpy</opcodename> Ssrc</synopsis><synopsis>Sdst <opcodename>=</opcodename> Ssrc</synopsis></opcode>
<opcode><desc>Assign value to a string variable (k-rate)</desc><synopsis>Sdst <opcodename>strcpyk</opcodename> Ssrc</synopsis></opcode>
<opcode><desc>Return the position of the first occurence of a string in another string</desc><synopsis>ipos <opcodename>strindex</opcodename> S1, S2</synopsis></opcode>
<opcode><desc>Return the position of the first occurence of a string in another string</desc><synopsis>kpos <opcodename>strindexk</opcodename> S1, S2</synopsis></opcode>
<opcode><desc>Return the length of a string</desc><synopsis>ilen <opcodename>strlen</opcodename> Sstr</synopsis></opcode>
<opcode><desc>Return the length of a string</desc><synopsis>klen <opcodename>strlenk</opcodename> Sstr</synopsis></opcode>
<opcode><desc>Return the position of the last occurence of a string in another string</desc><synopsis>ipos <opcodename>strrindex</opcodename> S1, S2</synopsis></opcode>
<opcode><desc>Return the position of the last occurence of a string in another string</desc><synopsis>kpos <opcodename>strrindexk</opcodename> S1, S2</synopsis></opcode>
<opcode><desc>Extract a substring</desc><synopsis>Sdst <opcodename>strsub</opcodename> Ssrc[, istart[, iend]]</synopsis></opcode>
<opcode><desc>Extract a substring</desc><synopsis>Sdst <opcodename>strsubk</opcodename> Ssrc, kstart, kend</synopsis></opcode>
</category>
<category name="Strings:Conversion">
<opcode><desc>Return the ASCII code of a character in a string</desc><synopsis>ichr <opcodename>strchar</opcodename> Sstr[, ipos]</synopsis></opcode>
<opcode><desc>Return the ASCII code of a character in a string</desc><synopsis>kchr <opcodename>strchark</opcodename> Sstr[, kpos]</synopsis></opcode>
<opcode><desc>Convert a string to lower case</desc><synopsis>Sdst <opcodename>strlower</opcodename> Ssrc</synopsis></opcode>
<opcode><desc>Convert a string to lower case</desc><synopsis>Sdst <opcodename>strlowerk</opcodename> Ssrc</synopsis></opcode>
<opcode><desc>Converts a string to a float (i-rate).</desc><synopsis>ir <opcodename>strtod</opcodename> Sstr</synopsis><synopsis>ir <opcodename>strtod</opcodename> indx</synopsis></opcode>
<opcode><desc>Converts a string to a float (k-rate).</desc><synopsis>kr <opcodename>strtodk</opcodename> Sstr</synopsis><synopsis>kr <opcodename>strtodk</opcodename> kndx</synopsis></opcode>
<opcode><desc>Converts a string to a signed integer (i-rate).</desc><synopsis>ir <opcodename>strtol</opcodename> Sstr</synopsis><synopsis>ir <opcodename>strtol</opcodename> indx</synopsis></opcode>
<opcode><desc>Converts a string to a signed integer (k-rate).</desc><synopsis>kr <opcodename>strtolk</opcodename> Sstr</synopsis><synopsis>kr <opcodename>strtolk</opcodename> kndx</synopsis></opcode>
<opcode><desc>Convert a string to upper case</desc><synopsis>Sdst <opcodename>strupper</opcodename> Ssrc</synopsis></opcode>
<opcode><desc>Convert a string to upper case</desc><synopsis>Sdst <opcodename>strupperk</opcodename> Ssrc</synopsis></opcode>
</category>
<category name="Vectorial:Tables">
<opcode><desc>Read vectors (from tables -or arrays of vectors).</desc><synopsis><opcodename>vtaba</opcodename>  andx, ifn, aout1 [, aout2, aout3, .... , aoutN ]</synopsis></opcode>
<opcode><desc>Read vectors (from tables -or arrays of vectors).</desc><synopsis><opcodename>vtabi</opcodename>  indx, ifn, iout1 [, iout2, iout3, .... , ioutN ]</synopsis></opcode>
<opcode><desc>Read vectors (from tables -or arrays of vectors).</desc><synopsis><opcodename>vtabk</opcodename>  kndx, ifn, kout1 [, kout2, kout3, .... , koutN ]</synopsis></opcode>
<opcode><desc>Read a vector (several scalars simultaneously) from a table.</desc><synopsis><opcodename>vtable1k</opcodename>  kfn,kout1 [, kout2, kout3, .... , koutN ]</synopsis></opcode>
<opcode><desc>Read vectors (from tables -or arrays of vectors).</desc><synopsis><opcodename>vtablea</opcodename>  andx, kfn, kinterp, ixmode, aout1 [, aout2, aout3, .... , aoutN ]</synopsis></opcode>
<opcode><desc>Read vectors (from tables -or arrays of vectors).</desc><synopsis><opcodename>vtablei</opcodename>  indx, ifn, interp, ixmode, iout1 [, iout2, iout3, .... , ioutN ]</synopsis></opcode>
<opcode><desc>Read vectors (from tables -or arrays of vectors).</desc><synopsis><opcodename>vtablek</opcodename>  kndx, kfn, kinterp, ixmode, kout1 [, kout2, kout3, .... , koutN ]</synopsis></opcode>
<opcode><desc>Write vectors (to tables -or arrays of vectors).</desc><synopsis><opcodename>vtablewa</opcodename>  andx, kfn, ixmode, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]</synopsis></opcode>
<opcode><desc>Write vectors (to tables -or arrays of vectors).</desc><synopsis><opcodename>vtablewi</opcodename>  indx, ifn, ixmode, inarg1 [, inarg2, inarg3 , .... , inargN ]</synopsis></opcode>
<opcode><desc>Write vectors (to tables -or arrays of vectors).</desc><synopsis><opcodename>vtablewk</opcodename>  kndx, kfn, ixmode, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]</synopsis></opcode>
<opcode><desc>Write vectors (to tables -or arrays of vectors).</desc><synopsis><opcodename>vtabwa</opcodename>  andx, ifn, ainarg1 [, ainarg2, ainarg3 , .... , ainargN ]</synopsis></opcode>
<opcode><desc>Write vectors (to tables -or arrays of vectors).</desc><synopsis><opcodename>vtabwi</opcodename>  indx, ifn, inarg1 [, inarg2, inarg3 , .... , inargN ]</synopsis></opcode>
<opcode><desc>Write vectors (to tables -or arrays of vectors).</desc><synopsis><opcodename>vtabwk</opcodename>  kndx, ifn, kinarg1 [, kinarg2, kinarg3 , .... , kinargN ]</synopsis></opcode>
</category>
<category name="Vectorial:Scalar operations">
<opcode><desc>Adds a scalar value to a vector in a table.</desc><synopsis><opcodename>vadd</opcodename>  ifn, kval, kelements [, kdstoffset] [, kverbose]</synopsis></opcode>
<opcode><desc>Adds a scalar value to a vector in a table.</desc><synopsis><opcodename>vadd_i</opcodename>  ifn, ival, ielements [, idstoffset]</synopsis></opcode>
<opcode><desc>Performs power-of operations between a vector and a scalar</desc><synopsis><opcodename>vexp</opcodename>  ifn, kval, kelements [, kdstoffset] [, kverbose]</synopsis></opcode>
<opcode><desc>Performs power-of operations between a vector and a scalar</desc><synopsis><opcodename>vexp_i</opcodename>  ifn, ival, ielements[, idstoffset]</synopsis></opcode>
<opcode><desc>Multiplies a vector in a table by a scalar value.</desc><synopsis><opcodename>vmult</opcodename>  ifn, kval, kelements [, kdstoffset] [, kverbose]</synopsis></opcode>
<opcode><desc>Multiplies a vector in a table by a scalar value.</desc><synopsis><opcodename>vmult_i</opcodename>  ifn, ival, ielements [, idstoffset]</synopsis></opcode>
<opcode><desc>Raises each element of a vector to a scalar power.</desc><synopsis><opcodename>vpow</opcodename>  ifn, kval, kelements [, kdstoffset] [, kverbose]</synopsis></opcode>
<opcode><desc>Raises each element of a vector to a scalar power</desc><synopsis><opcodename>vpow_i</opcodename>  ifn, ival, ielements [, idstoffset]</synopsis></opcode>
</category>
<category name="Vectorial:Vectorial operations">
<opcode><desc>Performs addition between two vectorial control signals.</desc><synopsis><opcodename>vaddv</opcodename>  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]</synopsis></opcode>
<opcode><desc>Performs addition between two vectorial control signals at init time.</desc><synopsis><opcodename>vaddv_i</opcodename>  ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]</synopsis></opcode>
<opcode><desc>Copies between two vectorial control signals</desc><synopsis><opcodename>vcopy</opcodename>  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [, kverbose]</synopsis></opcode>
<opcode><desc>Copies a vector from one table to another.</desc><synopsis><opcodename>vcopy_i</opcodename>  ifn1, ifn2, ielements [,idstoffset, isrcoffset]</synopsis></opcode>
<opcode><desc>Performs division between two vectorial control signals</desc><synopsis><opcodename>vdivv</opcodename>  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]</synopsis></opcode>
<opcode><desc>Performs division between two vectorial control signals at init time.</desc><synopsis><opcodename>vdivv_i</opcodename>  ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]</synopsis></opcode>
<opcode><desc>Performs exponential operations between two vectorial control signals</desc><synopsis><opcodename>vexpv</opcodename>  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]</synopsis></opcode>
<opcode><desc>Performs exponential operations between two vectorial control signals at init time.</desc><synopsis><opcodename>vexpv_i</opcodename>  ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]</synopsis></opcode>
<opcode><desc>Maps elements from a vector according to indexes contained in another vector.</desc><synopsis><opcodename>vmap</opcodename>  ifn1, ifn2, ielements [,idstoffset, isrcoffset]</synopsis></opcode>
<opcode><desc>Performs mutiplication between two vectorial control signals</desc><synopsis><opcodename>vmultv</opcodename>  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]</synopsis></opcode>
<opcode><desc>Performs mutiplication between two vectorial control signals at init time.</desc><synopsis><opcodename>vmultv_i</opcodename>  ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]</synopsis></opcode>
<opcode><desc>Performs power-of operations between two vectorial control signals</desc><synopsis><opcodename>vpowv</opcodename> ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]</synopsis></opcode>
<opcode><desc>Performs power-of operations between two vectorial control signals at init time.</desc><synopsis><opcodename>vpowv_i</opcodename> ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]</synopsis></opcode>
<opcode><desc>Performs subtraction between two vectorial control signals</desc><synopsis><opcodename>vsubv</opcodename>  ifn1, ifn2, kelements [, kdstoffset] [, ksrcoffset] [,kverbose]</synopsis></opcode>
<opcode><desc>Performs subtraction between two vectorial control signals at init time.</desc><synopsis><opcodename>vsubv_i</opcodename>  ifn1, ifn2, ielements [, idstoffset] [, isrcoffset]</synopsis></opcode>
</category>
<category name="Vectorial:Envelopes">
<opcode><desc>Vectorial envelope generator</desc><synopsis><opcodename>vexpseg</opcodename>  ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]</synopsis></opcode>
<opcode><desc>Vectorial envelope generator</desc><synopsis><opcodename>vlinseg</opcodename>  ifnout, ielements, ifn1, idur1, ifn2 [, idur2, ifn3 [...]]</synopsis></opcode>
</category>
<category name="Vectorial:Limiting and Wrapping">
<opcode><desc>Limiting and Wrapping Vectorial Signals</desc><synopsis><opcodename>vlimit</opcodename>  ifn, kmin, kmax, ielements</synopsis></opcode>
<opcode><desc>Limiting and Wrapping Vectorial Signals</desc><synopsis><opcodename>vmirror</opcodename>  ifn, kmin, kmax, ielements</synopsis></opcode>
<opcode><desc>Limiting and Wrapping Vectorial Signals</desc><synopsis><opcodename>vwrap</opcodename>  ifn, kmin, kmax, ielements</synopsis></opcode>
</category>
<category name="Vectorial:Delay Paths">
<opcode><desc>k-rate variable time delay.</desc><synopsis>kout <opcodename>vdelayk</opcodename>  ksig, kdel, imaxdel [, iskip, imode]</synopsis></opcode>
<opcode><desc>Vectorial Control-rate Delay Paths</desc><synopsis><opcodename>vecdelay</opcodename>  ifn, ifnIn, ifnDel, ielements, imaxdel [, iskip]
</synopsis></opcode>
<opcode><desc>Vectorial Control-rate Delay Paths</desc><synopsis><opcodename>vport</opcodename> ifn, khtime, ielements [, ifnInit]</synopsis></opcode>
</category>
<category name="Vectorial:Random">
<opcode><desc>Generates a vector of random numbers stored into a table, holding the values for a period of time.</desc><synopsis><opcodename>vrandh</opcodename>  ifn,  krange, kcps, ielements [, idstoffset] [, iseed] \
      [, isize] [, ioffset]</synopsis></opcode>
<opcode><desc>Generate a sort of 'vectorial band-limited noise'</desc><synopsis><opcodename>vrandi</opcodename>  ifn,  krange, kcps, ielements [, idstoffset] [, iseed] \
      [, isize] [, ioffset]</synopsis></opcode>
</category>
<category name="Vectorial:Cellular Automata">
<opcode><desc>Cellular Automaton</desc><synopsis><opcodename>cell</opcodename> ktrig, kreinit, ioutFunc, initStateFunc, iRuleFunc, ielements</synopsis></opcode>
<opcode><desc>Cellular Automata</desc><synopsis><opcodename>vcella</opcodename> ktrig, kreinit, ioutFunc, initStateFunc, \
      iRuleFunc, ielements, irulelen [, iradius]</synopsis></opcode>
</category>
<category name="Zak Patch System">
<opcode><desc>Clears one or more variables in the za space.</desc><synopsis><opcodename>zacl</opcodename> kfirst, klast</synopsis></opcode>
<opcode><desc>Establishes zak space.</desc><synopsis><opcodename>zakinit</opcodename> isizea, isizek</synopsis></opcode>
<opcode><desc>Modulates one a-rate signal by a second one.</desc><synopsis>ares <opcodename>zamod</opcodename> asig, kzamod</synopsis></opcode>
<opcode><desc>Reads from a location in za space at a-rate.</desc><synopsis>ares <opcodename>zar</opcodename> kndx</synopsis></opcode>
<opcode><desc>Reads from a location in za space at a-rate, adds some gain.</desc><synopsis>ares <opcodename>zarg</opcodename> kndx, kgain</synopsis></opcode>
<opcode><desc>Writes to a za variable at a-rate without mixing.</desc><synopsis><opcodename>zaw</opcodename> asig, kndx</synopsis></opcode>
<opcode><desc>Writes to a za variable at a-rate with mixing.</desc><synopsis><opcodename>zawm</opcodename> asig, kndx [, imix]</synopsis></opcode>
<opcode><desc>Reads from a location in zk space at i-rate.</desc><synopsis>ir <opcodename>zir</opcodename> indx</synopsis></opcode>
<opcode><desc>Writes to a zk variable at i-rate without mixing.</desc><synopsis><opcodename>ziw</opcodename> isig, indx</synopsis></opcode>
<opcode><desc>Writes to a zk variable to an i-rate variable with mixing.</desc><synopsis><opcodename>ziwm</opcodename> isig, indx [, imix]</synopsis></opcode>
<opcode><desc>Clears one or more variables in the zk space.</desc><synopsis><opcodename>zkcl</opcodename> kfirst, klast</synopsis></opcode>
<opcode><desc>Facilitates the modulation of one signal by another.</desc><synopsis>kres <opcodename>zkmod</opcodename> ksig, kzkmod</synopsis></opcode>
<opcode><desc>Reads from a location in zk space at k-rate.</desc><synopsis>kres <opcodename>zkr</opcodename> kndx</synopsis></opcode>
<opcode><desc>Writes to a zk variable at k-rate without mixing.</desc><synopsis><opcodename>zkw</opcodename> kval, kndx</synopsis></opcode>
<opcode><desc>Writes to a zk variable at k-rate with mixing.</desc><synopsis><opcodename>zkwm</opcodename> ksig, kndx [, imix]</synopsis></opcode>
</category>
<category name="Plugin Hosting:DSSI and LADSPA">
<opcode><desc>Activates or deactivates a DSSI or LADSPA plugin.</desc><synopsis><opcodename>dssiactivate</opcodename> ihandle, ktoggle </synopsis></opcode>
<opcode><desc>Processes audio using a LADSPA or DSSI plugin.</desc><synopsis>[aout1, aout2, ..., aout9] <opcodename>dssiaudio</opcodename> ihandle, [ain1, ain2, ..., ain9]</synopsis></opcode>
<opcode><desc>Send control information to a LADSPA or DSSI plugin.</desc><synopsis><opcodename>dssictls</opcodename> ihandle, iport, kvalue, ktrigger </synopsis></opcode>
<opcode><desc>Loads a DSSI or LADSPA plugin.</desc><synopsis>ihandle <opcodename>dssiinit</opcodename> ilibraryname, iplugindex [, iverbose] </synopsis></opcode>
<opcode><desc>Lists all available DSSI and LADSPA plugins.</desc><synopsis><opcodename>dssilist</opcodename></synopsis></opcode>
</category>
<category name="OSC">
<opcode><desc>Sends data to other processes using the OSC protocol by packing
      messages in a bundle.</desc><synopsis><opcodename>OSCbundle</opcodename> kwhen, ihost, iport,
    Sdest[], Stype[],kArgs[][][,isize]</synopsis></opcode>
<opcode><desc>Gives the Count of OSC messages currently unread.</desc><synopsis>kans <opcodename>OSCcount</opcodename></synopsis></opcode>
<opcode><desc>Start a listening process for OSC messages to a particular port.</desc><synopsis>ihandle <opcodename>OSCinit</opcodename> iport</synopsis></opcode>
<opcode><desc>Start a listening process for multicast OSC messages to a particular port.</desc><synopsis>ihandle <opcodename>OSCinitM</opcodename> Sgroup, iport</synopsis></opcode>
<opcode><desc>Listen for OSC messages to a particular path.</desc><synopsis>kans <opcodename>OSClisten</opcodename> ihandle, idest, itype [, xdata1, xdata2, ...]</synopsis><synopsis>kans, kdata[] <opcodename>OSClisten</opcodename> ihandle, idest, itype</synopsis></opcode>
<opcode><desc>Listen for all OSC messages at a given port.</desc><synopsis>Smess[],klen <opcodename>OSCraw</opcodename> iport</synopsis></opcode>
<opcode><desc>Sends data to other processes using the OSC protocol</desc><synopsis><opcodename>OSCsend</opcodename> kwhen, ihost, iport, idestination[, itype , xdata1, xdata2, ...]</synopsis></opcode>
</category>
<category name="Faust Opcodes">
<opcode><desc>Instantiates and runs a compiled Faust program.</desc><synopsis><opcodename>ihandle,a1[,a2,...] faustaudio</opcodename> ifac[,ain1,...] </synopsis></opcode>
<opcode><desc>Invokes the just-in-time compiler to produce a instantiable DSP process from a Faust program.</desc><synopsis><opcodename>ihandle faustcompile</opcodename> Scode, Sargs[,iasync, istacksize]  </synopsis></opcode>
<opcode><desc>Adjusts a given control in a Faust DSP instance.</desc><synopsis><opcodename>faustctl</opcodename> idsp,Scontrol,kval </synopsis></opcode>
<opcode><desc>Instantiates a Faust program.</desc><synopsis><opcodename>ihandle faustdsp</opcodename> ifac </synopsis></opcode>
<opcode><desc>Compiles, Instantiates and runs a compiled Faust program.</desc><synopsis><opcodename>ihandle,a1[,a2,...] faustgen</opcodename> SCode[,ain1,...] </synopsis></opcode>
<opcode><desc>Runs an instantiated Faust program.</desc><synopsis><opcodename>a1[, a2,...] faustplay</opcodename> ihandle[, ain1,...]</synopsis></opcode>
</category>
<category name="Network">
<opcode><desc>Defines the port for use with the remote system.</desc><synopsis><opcodename>remoteport</opcodename> iportnum</synopsis></opcode>
<opcode><desc>Receives data from other processes using the low-level UDP or TCP protocols</desc><synopsis>asig <opcodename>sockrecv</opcodename> iport, ilength</synopsis><synopsis>ksig <opcodename>sockrecv</opcodename> iport, ilength</synopsis><synopsis>asigl, asigr <opcodename>sockrecvs</opcodename> iport, ilength</synopsis><synopsis>String <opcodename>sockrecv</opcodename> iport, ilength</synopsis><synopsis>asig <opcodename>strecv</opcodename> Sipaddr, iport</synopsis></opcode>
<opcode><desc>Sends data to other processes using the low-level UDP or TCP protocols</desc><synopsis><opcodename>socksend</opcodename> asig, Sipaddr, iport, ilength</synopsis><synopsis><opcodename>socksend</opcodename> ksig, Sipaddr, iport, ilength</synopsis><synopsis><opcodename>socksends</opcodename> asigl, asigr, Sipaddr, iport,
    ilength</synopsis><synopsis><opcodename>stsend</opcodename> asig, Sipaddr, iport</synopsis></opcode>
</category>
<category name="Remote Opcodes">
<opcode><desc>An opcode which can be used to implement a remote
      orchestra. This opcode will send note events from a source
      machine to many destinations.</desc><synopsis><opcodename>insglobal</opcodename> isource, instrnum [,instrnum...] </synopsis></opcode>
<opcode><desc>An opcode which can be used to implement a remote
      orchestra. This opcode will send note events from a source
      machine to one destination.</desc><synopsis><opcodename>insremot</opcodename> idestination, isource, instrnum [,instrnum...] </synopsis></opcode>
<opcode><desc>An opcode which can be used to implement a remote midi orchestra. This opcode will broadcast the midi events to all the machines involved in the remote concert.</desc><synopsis><opcodename>midglobal</opcodename> isource, instrnum [,instrnum...] </synopsis></opcode>
<opcode><desc>An opcode which can be used to implement a remote midi orchestra. This opcode will send midi events from a source machine to one destination.</desc><synopsis><opcodename>midremot</opcodename> idestination, isource, instrnum [,instrnum...] </synopsis></opcode>
</category>
<category name="Mixer Opcodes">
<opcode><desc>Resets all channels of a buss to 0.</desc><synopsis><opcodename>MixerClear</opcodename></synopsis></opcode>
<opcode><desc>Gets the level of a send to a buss.</desc><synopsis>kgain <opcodename>MixerGetLevel</opcodename> isend, ibuss</synopsis></opcode>
<opcode><desc>Receives an arate signal from a channel of a buss.</desc><synopsis>asignal <opcodename>MixerReceive</opcodename> ibuss, ichannel</synopsis></opcode>
<opcode><desc>Mixes an arate signal into a channel of a buss.</desc><synopsis><opcodename>MixerSend</opcodename> asignal, isend, ibuss, ichannel</synopsis></opcode>
<opcode><desc>Sets the level of a send to a buss.</desc><synopsis><opcodename>MixerSetLevel</opcodename> isend, ibuss, kgain</synopsis></opcode>
<opcode><desc>Sets the level of a send to a buss.</desc><synopsis><opcodename>MixerSetLevel_i</opcodename> isend, ibuss, igain</synopsis></opcode>
</category>
<category name="Ableton Link Opcodes">
<opcode><desc>Forces the global network Ableton Link session to adopt a specific beat number and time.</desc><synopsis><opcodename>link_beat_force</opcodename>  i_peer, k_beat [, k_at_time_seconds  [, k_quantum ]] </synopsis></opcode>
<opcode><desc>Returns the beat, phase with respect to the local quantum, and current time for the session.</desc><synopsis>k_beat_number, k_phase, k_current_time_seconds <opcodename>link_beat_get</opcodename> i_peer [, k_quantum]</synopsis></opcode>
<opcode><desc>Requests the global network Ableton Link session to adopt a specific beat number and time.</desc><synopsis><opcodename>link_beat_request</opcodename>  i_peer, k_beat [, k_at_time_seconds  [, k_quantum ]] </synopsis></opcode>
<opcode><desc>Creates a peer in an Ableton Link network session.</desc><synopsis>i_peer <opcodename>link_create</opcodename> [i_bpm]</synopsis></opcode>
<opcode><desc>Enable or disable synchronization with the Ableton Link session.</desc><synopsis> <opcodename>ableton_link_enable</opcodename> i_peer [, k_enable]</synopsis></opcode>
<opcode><desc>Returns whether or not this peer is synchronized with the global network Ableton Link session.</desc><synopsis>k_is_enabled <opcodename>link_is_enabled</opcodename> i_peer</synopsis></opcode>
<opcode><desc>Returns a trigger that is 1 on the beat and 0 otherwise along with beat, phase, and time for this session of Ableton Link.</desc><synopsis>k_trigger, k_beat, k_phase, k_current_time_seconds <opcodename>link_metro</opcodename> i_peer [, k_quantum]</synopsis></opcode>
<opcode><desc>Returns the number of peers in the session.</desc><synopsis>k_count <opcodename>link_peers</opcodename> i_peer</synopsis></opcode>
<opcode><desc>Returns the current tempo of the global network Ableton Link session.</desc><synopsis>k_bpm <opcodename>link_tempo_get</opcodename> i_peer</synopsis></opcode>
<opcode><desc>Sets the tempo.</desc><synopsis><opcodename>link_tempo_set</opcodename> i_peer, k_bpm [, k_at_time_seconds]</synopsis></opcode>
</category>
<category name="Python Opcodes">
<opcode><desc>Assign the value of the given Csound variable to a Python variable possibly destroying its previous content.</desc><synopsis><opcodename>pyassign</opcodename> &quot;variable&quot;, kvalue</synopsis><synopsis><opcodename>pyassigni</opcodename> &quot;variable&quot;, ivalue</synopsis><synopsis><opcodename>pylassign</opcodename> &quot;variable&quot;, kvalue</synopsis><synopsis><opcodename>pylassigni</opcodename> &quot;variable&quot;, ivalue</synopsis><synopsis><opcodename>pyassignt</opcodename> ktrigger, &quot;variable&quot;, kvalue</synopsis><synopsis><opcodename>pylassignt</opcodename> ktrigger, &quot;variable&quot;, kvalue</synopsis></opcode>
<opcode><desc>Invoke the specified Python callable at
      k-time and i-time (i suffix), passing the given arguments. The call is
      perfomed in the global environment, and the result (the returning
      value) is copied into the Csound output variables specified.</desc><synopsis>                                        <opcodename>pycall</opcodename>   &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult                                 <opcodename>pycall1</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult1, kresult2                      <opcodename>pycall2</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3                           <opcodename>pycall3</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4                      <opcodename>pycall4</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5                 <opcodename>pycall5</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <opcodename>pycall6</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <opcodename>pycall7</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <opcodename>pycall8</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>                                        <opcodename>pycallt</opcodename>   ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult                                 <opcodename>pycall1t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult1, kresult2                      <opcodename>pycall2t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3                           <opcodename>pycall3t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4                      <opcodename>pycall4t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5                 <opcodename>pycall5t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <opcodename>pycall6t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <opcodename>pycall7t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <opcodename>pycall8t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>                                        <opcodename>pycalli</opcodename>   &quot;callable&quot;, karg1, ...</synopsis><synopsis>iresult                                 <opcodename>pycall1i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>iresult1, iresult2                      <opcodename>pycall2i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3                           <opcodename>pycall3i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4                      <opcodename>pycall4i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5                 <opcodename>pycall5i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5, ir6            <opcodename>pycall6i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7       <opcodename>pycall7i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7, ir8  <opcodename>pycall8i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis><opcodename>pycalln</opcodename>   &quot;callable&quot;, nresults, kresult1, ..., kresultn, karg1, ...</synopsis><synopsis><opcodename>pycallni</opcodename>  &quot;callable&quot;, nresults, iresult1, ..., iresultn, iarg1,  ...</synopsis><synopsis>                                        <opcodename>pylcall</opcodename>   &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult                                 <opcodename>pylcall1</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult1, kresult2                      <opcodename>pylcall2</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3                           <opcodename>pylcall3</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4                      <opcodename>pylcall4</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5                 <opcodename>pylcall5</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <opcodename>pylcall6</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <opcodename>pylcall7</opcodename>  &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <opcodename>pylcall8</opcodename>   &quot;callable&quot;, karg1, ...</synopsis><synopsis>                                        <opcodename>pylcallt</opcodename>   ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult                                 <opcodename>pylcall1t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kresult1, kresult2                      <opcodename>pylcall2t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3                           <opcodename>pylcall3t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4                      <opcodename>pylcall4t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5                 <opcodename>pylcall5t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6            <opcodename>pylcall6t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7       <opcodename>pylcall7t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>kr1, kr2, kr3, kr4, kr5, kr6, kr7, kr8  <opcodename>pylcall8t</opcodename>  ktrigger, &quot;callable&quot;, karg1, ...</synopsis><synopsis>                                        <opcodename>pylcalli</opcodename>   &quot;callable&quot;, karg1, ...</synopsis><synopsis>iresult                                 <opcodename>pylcall1i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>iresult1, iresult2                      <opcodename>pylcall2i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3                           <opcodename>pylcall3i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4                      <opcodename>pylcall4i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5                 <opcodename>pylcall5i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5, ir6            <opcodename>pylcall6i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7       <opcodename>pylcall7i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis>ir1, ir2, ir3, ir4, ir5, ir6, ir7, ir8  <opcodename>pylcall8i</opcodename>  &quot;callable&quot;, iarg1, ...</synopsis><synopsis><opcodename>pylcalln</opcodename>   &quot;callable&quot;, nresults, kresult1, ..., kresultn, karg1, ...</synopsis><synopsis><opcodename>pylcallni</opcodename>  &quot;callable&quot;, nresults, iresult1, ..., iresultn, iarg1, ...</synopsis></opcode>
<opcode><desc>Evaluate a generic Python expression and store the result in a Csound variable at k-time or i-time (i suffix).</desc><synopsis>kresult <opcodename>pyeval</opcodename> &quot;expression&quot;</synopsis><synopsis>iresult <opcodename>pyevali</opcodename> &quot;expression&quot;</synopsis><synopsis>kresult <opcodename>pyleval</opcodename> &quot;expression&quot;</synopsis><synopsis>iresult <opcodename>pylevali</opcodename> &quot;expression&quot;</synopsis><synopsis>kresult <opcodename>pyevalt</opcodename> ktrigger, &quot;expression&quot;</synopsis><synopsis>kresult <opcodename>pylevalt</opcodename> ktrigger, &quot;expression&quot;</synopsis></opcode>
<opcode><desc>Execute a script from a file at k-time or i-time (i suffix).</desc><synopsis><opcodename>pyexec</opcodename> &quot;filename&quot;</synopsis><synopsis><opcodename>pyexeci</opcodename> &quot;filename&quot;</synopsis><synopsis><opcodename>pylexec</opcodename> &quot;filename&quot;</synopsis><synopsis><opcodename>pylexeci</opcodename> &quot;filename&quot;</synopsis><synopsis><opcodename>pyexect</opcodename> ktrigger, &quot;filename&quot;</synopsis><synopsis><opcodename>plyexect</opcodename> ktrigger, &quot;filename&quot;</synopsis></opcode>
<opcode><desc>Initialize the Python interpreter.</desc><synopsis><opcodename>pyinit</opcodename></synopsis></opcode>
<opcode><desc>Run a Python statement or block of statements.</desc><synopsis><opcodename>pyrun</opcodename> &quot;statement&quot;</synopsis><synopsis><opcodename>pyruni</opcodename> &quot;statement&quot;</synopsis><synopsis><opcodename>pylrun</opcodename> &quot;statement&quot;</synopsis><synopsis><opcodename>pylruni</opcodename> &quot;statement&quot;</synopsis><synopsis><opcodename>pyrunt</opcodename> ktrigger, &quot;statement&quot;</synopsis><synopsis><opcodename>pylrunt</opcodename> ktrigger, &quot;statement&quot;</synopsis></opcode>
</category>
<category name="Image Processing Opcodes">
<opcode><desc>Create an empty image of a given size.</desc><synopsis>iimagenum <opcodename>imagecreate</opcodename> iwidth, iheight</synopsis></opcode>
<opcode><desc>Frees memory allocated for a previously loaded or created image.</desc><synopsis><opcodename>imagefree</opcodename> iimagenum</synopsis></opcode>
<opcode><desc>Return the RGB pixel values of a previously opened or created image.</desc><synopsis>ared, agreen, ablue <opcodename>imagegetpixel</opcodename> iimagenum, ax, ay</synopsis><synopsis>kred, kgreen, kblue <opcodename>imagegetpixel</opcodename> iimagenum, kx, ky</synopsis></opcode>
<opcode><desc>Load an image.</desc><synopsis>iimagenum <opcodename>imageload</opcodename> filename</synopsis></opcode>
<opcode><desc>Save a previously created image.</desc><synopsis><opcodename>imagesave</opcodename> iimagenum, filename</synopsis></opcode>
<opcode><desc>Set the RGB value of a pixel inside a previously opened or created image.</desc><synopsis><opcodename>imagesetpixel</opcodename> iimagenum, ax, ay, ared, agreen, ablue</synopsis><synopsis><opcodename>imagesetpixel</opcodename> iimagenum, kx, ky, kred, kgreen, kblue</synopsis></opcode>
<opcode><desc>Return the width and height of a previously opened or created image.</desc><synopsis>iwidth, iheight <opcodename>imagesize</opcodename> iimagenum</synopsis></opcode>
</category>
<category name="Array Opcodes">
<opcode><desc>Copy data from a vector to an f-table.</desc><synopsis><opcodename>copya2ftab</opcodename> kftbl, tab</synopsis></opcode>
<opcode><desc>Copy data from an f-table to a vector.</desc><synopsis><opcodename>copyf2array</opcodename> tab, kftbl</synopsis></opcode>
<opcode><desc>Gets a given column from a 2-dimensional array as a vector.</desc><synopsis>i/kout[] <opcodename>getcol</opcodename>i/kin[],i/kcol</synopsis></opcode>
<opcode><desc>Gets a given row from a 2-dimensional array as a vector.</desc><synopsis>i/kout[] <opcodename>getrow</opcodename>i/kin[],i/krow</synopsis></opcode>
<opcode><desc>returns the maximum value in an array.</desc><synopsis>kmax [,kindx] <opcodename>maxarray</opcodename> karray</synopsis></opcode>
<opcode><desc>returns the minimum value in an array.</desc><synopsis>kmin [,kindx] <opcodename>minarray</opcodename> karray</synopsis></opcode>
<opcode><desc>Print the contents of an array</desc><synopsis><opcodename>printarray</opcodename> ixs[] [, Smft, Slabel ]</synopsis><synopsis><opcodename>printarray</opcodename> kxs[] [, ktrig, Sfmt, Slabel ]</synopsis></opcode>
<opcode><desc>Calculates the product of an array.</desc><synopsis>kres/ires<opcodename>product</opcodename> karr[]/iarr[]  (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Reshape an array, maintaining its capacity</desc><synopsis><opcodename>reshapearray</opcodename> array[], isize0 [, isize1 ]</synopsis></opcode>
<opcode><desc>Scales the values in a range of a vector (one dimensional array).</desc><synopsis><opcodename>scalearray</opcodename> tarray, kmin, kmax[, kleft, kright]</synopsis></opcode>
<opcode><desc>Sets a given column of a 2-dimensional array from a vector.</desc><synopsis>i/kout[] <opcodename>setcol</opcodename>i/kin[],i/kcol</synopsis></opcode>
<opcode><desc>Sets a given row of a 2-dimensional array from a vector.</desc><synopsis>i/kout[] <opcodename>setrow</opcodename>i/kin[],i/krow</synopsis></opcode>
<opcode><desc>Shifts the contents of an audio variable into a 1-dimensional array.</desc><synopsis>kout[] <opcodename>shiftin</opcodename> asig</synopsis></opcode>
<opcode><desc>Shifts the contents of a 1-dimensional array into an audio variable.</desc><synopsis>asig <opcodename>shiftout</opcodename> kIn[][, ioff]</synopsis></opcode>
<opcode><desc>returns the sum of the elements in an array.</desc><synopsis>ksum <opcodename>sumarray</opcodename> karray</synopsis></opcode>
<opcode><desc>Copy a slice from an f-table to an array</desc><synopsis>kout[] <opcodename>tab2array</opcodename> ifn [, kstart, kend, kstep ]</synopsis><synopsis>iout[] <opcodename>tab2array</opcodename> ifn [, istart, iend, istep ]</synopsis></opcode>
<opcode><desc>Adjust size o a one-dimensional array.</desc><synopsis><opcodename>trim_i</opcodename> iarray, ilen</synopsis><synopsis><opcodename>trim</opcodename> xarray, klen</synopsis></opcode>
</category>
<category name="Array Operations: Fast Fourier Transform">
<opcode><desc>Complex-to-complex Fast Fourier Transform.</desc><synopsis>kout[] <opcodename>fft</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Complex-to-complex Inverse Fast Fourier Transform.</desc><synopsis>kout[] <opcodename>fftinv</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Fast Fourier Transform of a real-value array.</desc><synopsis>kout[] <opcodename>rfft</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Complex-to-real Inverse Fast Fourier Transform.</desc><synopsis>kout[] <opcodename>rifft</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Applies a unwrapping operation to an array of phase values.</desc><synopsis>kout[] <opcodename>unwrap</opcodename> kin[] </synopsis></opcode>
<opcode><desc>Applies a window to an array.</desc><synopsis>kout[] <opcodename>window</opcodename> kin[][, koff, itype]</synopsis></opcode>
</category>
<category name="Array Operations: complex numbers">
<opcode><desc>Real to complex format conversion.</desc><synopsis>kout[] <opcodename>c2r</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Complex product of two arrays.</desc><synopsis>kout[] <opcodename>cmplxprod</opcodename> kin1[], kin2[]</synopsis></opcode>
<opcode><desc>Obtains the magnitudes of a complex-number array</desc><synopsis>kout[] <opcodename>mags</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Obtains the phases of a complex-number array</desc><synopsis>kout[] <opcodename>phs</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Polar to rectangular format conversion.</desc><synopsis>kout[] <opcodename>pol2rect</opcodename> kin[]</synopsis><synopsis>kout[] <opcodename>pol2rect</opcodename> kmags[], kphs[]</synopsis></opcode>
<opcode><desc>Real to complex format conversion.</desc><synopsis>kout[] <opcodename>r2c</opcodename> kin[]</synopsis></opcode>
<opcode><desc>Rectangular to polar format conversion.</desc><synopsis>kout[] <opcodename>rect2pol</opcodename> kin[]</synopsis></opcode>
</category>
<category name="Array Operations: Discrete Cosine Transform">
<opcode><desc>Discrete Cosine Transform of a sample array (type-II DCT)</desc><synopsis>kout[] <opcodename>dct</opcodename> kin[]</synopsis><synopsis>iout[] <opcodename>dct</opcodename> iin[]</synopsis></opcode>
<opcode><desc>Inverse Discrete Cosine Transform of a sample array (type-III DCT)</desc><synopsis>kout[] <opcodename>dctinv</opcodename> kin[]</synopsis><synopsis>iout[] <opcodename>dctinv</opcodename> iin[]</synopsis></opcode>
</category>
<category name="Array Operations: dot product">
<opcode><desc>Calculates the dot product of two arrays.</desc><synopsis>kres/ires<opcodename>dot</opcodename> karr1[]/iarr1[], karr2[]/iarr2[]   (k- or i-arrays )</synopsis></opcode>
</category>
<category name="Array Operations: Mel scale filterbank">
<opcode><desc>Mel scale filterbank for spectral magnitudes.</desc><synopsis>kout[] <opcodename>mfb</opcodename> kin[],klow,khigh,ibands</synopsis></opcode>
</category>
<category name="Array Operations: sorting">
<opcode><desc>Sorts an array in ascending order.</desc><synopsis>k/i[]<opcodename>sorta</opcodename> k/i[]  (k- or i-arrays )</synopsis></opcode>
<opcode><desc>Sorts an array in descending order.</desc><synopsis>k/i[]<opcodename>sortd</opcodename> k/i[]  (k- or i-arrays )</synopsis></opcode>
</category>
<category name="Array Operations: Cepstrum">
<opcode><desc>Calculate the cepstrum of an array input, optionally liftering coefficients.</desc><synopsis>keps[] <opcodename>ceps</opcodename> kmags[][, icoefs]</synopsis></opcode>
<opcode><desc>Calculate the inverse cepstrum of an array.</desc><synopsis>kenv <opcodename>cepsinv</opcodename> keps[]</synopsis></opcode>
</category>
<category name="Miscellaneous">
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc>Reads a directory and outputs to a string array a list of file names.</desc><synopsis>SFiles[] <opcodename>directory</opcodename> SDirectory[, SExtention]</synopsis></opcode>
<opcode><desc>returns the length of a Farey Sequence.</desc><synopsis>kfl <opcodename>fareylen</opcodename> kfn</synopsis></opcode>
<opcode><desc>returns the length of a Farey Sequence.</desc><synopsis>ifl <opcodename>fareyleni</opcodename> ifn</synopsis></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc>Read audio signals into 1 dimensional k-rate arrays and vice-versa with a specified buffer size.</desc><synopsis>kout[] <opcodename>framebuffer</opcodename> ain, isize</synopsis><synopsis>aout <opcodename>framebuffer</opcodename> kin, isize</synopsis></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc>Modulation matrix opcode with optimizations for sparse matrices.</desc><synopsis><opcodename>modmatrix</opcodename> iresfn, isrcmodfn, isrcparmfn, imodscale, inum_mod, \\
inum_parm, kupdate</synopsis></opcode>
<opcode><desc>Returns the number of audio channels in the underlying hardware.</desc><synopsis>idacc,iadcc <opcodename>nchnls_hw</opcodename></synopsis></opcode>
<opcode><desc>Sum overlapping frames of audio as k-rate arrays and read as an audio signal</desc><synopsis>aout <opcodename>olabuffer</opcodename> kin, ioverlap</synopsis></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc>Asks the underlying operating system for the current directory
      name as a string.</desc><synopsis>Sres <opcodename>pwd</opcodename></synopsis></opcode>
<opcode><desc>Select sample value based on audio-rate comparisons.</desc><synopsis>aout <opcodename>select</opcodename> a1, a2, aless, aequal, amore</synopsis></opcode>
<opcode><desc></desc></opcode>
<opcode><desc>Call an external program via the system call</desc><synopsis>ires <opcodename>system_i</opcodename> itrig, Scmd, [inowait]</synopsis><synopsis>kres <opcodename>system</opcodename> ktrig, Scmd, [knowait]</synopsis></opcode>
<opcode><desc>shuffles the content of a function table so that each element of the source
      table is put into a different random position.</desc><synopsis><opcodename>tableshuffle</opcodename> ktablenum</synopsis><synopsis><opcodename>tableshufflei</opcodename> itablenum</synopsis></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
<opcode><desc></desc></opcode>
</category>
<category name="Utilities">
<opcode><desc>Performs ATS analysis on a soundfile.</desc><synopsis><opcodename>csound -U atsa</opcodename> [flags] infilename outfilename</synopsis></opcode>
<opcode><desc>Starts Csound with a set of options that can be controlled
      by environment variables, and input and output files
      determined by the specified filename stem.</desc><synopsis><opcodename>cs</opcodename> [-OPTIONS] &lt;name&gt; [CSOUND OPTIONS ... ]</synopsis></opcode>
<opcode><desc>Converts a binary file to a Base64 encoded text file.</desc><synopsis><opcodename>csb64enc</opcodename> [OPTIONS ... ] infile1 [ infile2 [ ... ]]</synopsis></opcode>
<opcode><desc>Converts a soundfile into a single Fourier transform frame.</desc><synopsis><opcodename>csound -U cvanal</opcodename> [flags] infilename outfilename</synopsis><synopsis><opcodename>cvanal</opcodename> [flags] infilename outfilename</synopsis></opcode>
<opcode><desc>Reduces noise in a file.</desc><synopsis><opcodename>dnoise</opcodename> [flags] -i noise_ref_file  -o output_soundfile  input_soundfile</synopsis></opcode>
<opcode><desc>Extracts the envelope of a file to a text file.</desc><synopsis><opcodename>envext</opcodename> [-flags] soundfile</synopsis><synopsis>csound -U <opcodename>envext</opcodename> [-flags] soundfile</synopsis></opcode>
<opcode><desc>Extract a section of audio from an audio file.</desc><synopsis><opcodename>extractor</opcodename> [OPTIONS ... ] infile</synopsis></opcode>
<opcode><desc>Converts a .het file to a comma separated text file.</desc><synopsis><opcodename>het_export</opcodename> het_file cstext_file</synopsis><synopsis>csound -U <opcodename>het_export</opcodename> het_file cstext_file</synopsis></opcode>
<opcode><desc>Converts a comma-separated text file to a .het file.</desc><synopsis><opcodename>het_import</opcodename> cstext_file het_file</synopsis><synopsis>csound -U <opcodename>het_import</opcodename> cstext_file het_file</synopsis></opcode>
<opcode><desc>Decomposes an input soundfile into component sinusoids.</desc><synopsis><opcodename>csound -U hetro</opcodename> [flags] infilename outfilename</synopsis><synopsis><opcodename>hetro</opcodename> [flags] infilename outfilename</synopsis></opcode>
<opcode><desc>Performs both linear predictive and pitch-tracking analysis on a soundfile.</desc><synopsis><opcodename>csound -U lpanal</opcodename> [flags] infilename outfilename</synopsis><synopsis><opcodename>lpanal</opcodename> [flags] infilename outfilename</synopsis></opcode>
<opcode><desc>Creates a CSD file from the specified input files.</desc><synopsis><opcodename>makecsd</opcodename> [OPTIONS ... ] infile1 [ infile2 [ ... ]]</synopsis></opcode>
<opcode><desc>Mixes together a number of soundfiles.</desc><synopsis><opcodename>mixer</opcodename> [OPTIONS ... ] infile [[OPTIONS... ] infile] ...</synopsis></opcode>
<opcode><desc>Outputs a catalog of opcodes and plugin modules.</desc><synopsis><opcodename>mkdb</opcodename> [-m] [base_directory]</synopsis></opcode>
<opcode><desc>Converts a .pvx file to a comma separated text file.</desc><synopsis><opcodename>pv_export</opcodename> pv_file cstext_file</synopsis><synopsis>csound -U <opcodename>pv_export</opcodename> pv_file cstext_file</synopsis></opcode>
<opcode><desc>Converts a comma-separated text file to a .pvx file.</desc><synopsis><opcodename>pv_import</opcodename> cstext_file pv_file</synopsis><synopsis>csound -U <opcodename>pv_import</opcodename> cstext_file pv_file</synopsis></opcode>
<opcode><desc>Converts a soundfile into a series of short-time Fourier transform frames.</desc><synopsis><opcodename>csound -U pvanal</opcodename> [flags] infilename outfilename</synopsis><synopsis><opcodename>pvanal</opcodename> [flags] infilename outfilename</synopsis></opcode>
<opcode><desc>View formatted text output of STFT analysis files.</desc><synopsis><opcodename>csound</opcodename> -U <opcodename>pvlook</opcodename> [flags] infilename</synopsis><synopsis><opcodename>pvlook</opcodename> [flags] infilename</synopsis></opcode>
<opcode><desc>Scale the amplitude of a sound file.</desc><synopsis><opcodename>scale</opcodename> [OPTIONS ... ] infile</synopsis></opcode>
<opcode><desc>Converts SDIF files to files usable by adsyn.</desc><synopsis><opcodename>sdif2ad</opcodename> [flags] infilename outfilename</synopsis></opcode>
<opcode><desc>Displays information about a soundfile.</desc><synopsis><opcodename>csound -U sndinfo</opcodename> [options] soundfilenames ...</synopsis><synopsis><opcodename>sndinfo</opcodename> [options] soundfilenames ...</synopsis></opcode>
<opcode><desc>Converts the sample rate of an audio file.</desc><synopsis><opcodename>src_conv</opcodename> [flags] infile</synopsis></opcode>
<opcode><desc>Converts the sample rate of an audio file.</desc><synopsis><opcodename>srconv</opcodename> [flags] infile</synopsis></opcode>
</category>
</opcodes>
